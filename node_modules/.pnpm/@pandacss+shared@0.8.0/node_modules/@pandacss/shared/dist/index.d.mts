import { W as WalkObjectStopFn, M as MappedObject, C as CreateCssContext } from './split-props-3d8b55c4.js';
export { n as WalkObjectOptions, c as astish, f as compact, d as createCss, e as createMergeCss, h as filterBaseConditions, l as hypenateProperty, g as isBaseCondition, a as isFunction, j as isImportant, b as isObject, i as isString, p as mapObject, m as mergeProps, s as splitProps, t as toHash, o as walkObject, w as withoutImportant, k as withoutSpace } from './split-props-3d8b55c4.js';

type Operand = string | number | {
    ref: string;
};
declare const calc: {
    negate(x: Operand): string;
};

declare const camelCaseProperty: (property: string) => string;

declare const capitalize: (s: string) => string;
declare const dashCase: (s: string) => string;
declare const uncapitalize: (s: string) => string;

declare function getUnit(value?: string): string | undefined;
declare function toPx(value?: string | number): string | undefined;
declare function toEm(value?: string, fontSize?: number): string | undefined;
declare function toRem(value?: string): string | undefined;

type CssVar = {
    var: `--${string}`;
    ref: string;
};
type CssVarOptions = {
    fallback?: string;
    prefix?: string;
    hash?: boolean;
};
declare function cssVar(name: string, options?: CssVarOptions): CssVar;

declare const esc: (sel: string) => string;

declare function flatten(values: Record<string, Record<string, any>>, stop?: WalkObjectStopFn): Record<string, any>;

declare const memo: <T extends (...args: any[]) => any>(fn: T) => T;

type NormalizeContext = Pick<CreateCssContext, 'utility' | 'conditions'>;
declare function normalizeShorthand(styles: Record<string, any>, context: NormalizeContext): MappedObject<Record<string, any>, any>;
declare function normalizeStyleObject(styles: Record<string, any>, context: NormalizeContext): MappedObject<Record<string, any>, any>;

declare function splitBy(value: string, separator?: string): any[];
declare function splitDotPath(path: string): string[];
declare function getNegativePath(path: string[]): string[];
declare function getDotPath(obj: any, path: string, fallback?: any): any;

type MapToRecord<K extends Map<string, any>> = {
    [P in keyof K]: K[P] extends Map<string, infer V> ? Record<string, V> : never;
};
declare function mapToJson<T extends Map<string, any>>(map: T): MapToRecord<T>;

declare function unionType(values: IterableIterator<string> | string[] | Set<string>): string;

export { CreateCssContext, CssVar, CssVarOptions, MappedObject, WalkObjectStopFn, calc, camelCaseProperty, capitalize, cssVar, dashCase, esc, flatten, getDotPath, getNegativePath, getUnit, mapToJson, memo, normalizeShorthand, normalizeStyleObject, splitBy, splitDotPath, toEm, toPx, toRem, uncapitalize, unionType };
