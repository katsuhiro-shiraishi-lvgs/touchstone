import type { MachineContext as Ctx, Option } from "./select.types";
export declare const dom: {
    getRootNode: (ctx: {
        getRootNode?: (() => Node | ShadowRoot | Document) | undefined;
    }) => ShadowRoot | Document;
    getDoc: (ctx: {
        getRootNode?: (() => Node | ShadowRoot | Document) | undefined;
    }) => Document;
    getWin: (ctx: {
        getRootNode?: (() => Node | ShadowRoot | Document) | undefined;
    }) => Window & typeof globalThis;
    getActiveElement: (ctx: {
        getRootNode?: (() => Node | ShadowRoot | Document) | undefined;
    }) => HTMLElement | null;
    getById: <T extends HTMLElement = HTMLElement>(ctx: {
        getRootNode?: (() => Node | ShadowRoot | Document) | undefined;
    }, id: string) => T | null;
    queryById: <T_1 extends HTMLElement = HTMLElement>(ctx: {
        getRootNode?: (() => Node | ShadowRoot | Document) | undefined;
    }, id: string) => T_1;
} & {
    getContentId: (ctx: Ctx) => string;
    getTriggerId: (ctx: Ctx) => string;
    getLabelId: (ctx: Ctx) => string;
    getOptionId: (ctx: Ctx, id: string | number) => string;
    getHiddenSelectId: (ctx: Ctx) => string;
    getPositionerId: (ctx: Ctx) => string;
    getOptionGroupId: (ctx: Ctx, id: string | number) => string;
    getOptionGroupLabelId: (ctx: Ctx, id: string | number) => string;
    getHiddenSelectElement: (ctx: Ctx) => HTMLElement | null;
    getContentElement: (ctx: Ctx) => HTMLElement | null;
    getTriggerElement: (ctx: Ctx) => HTMLElement | null;
    getPositionerElement: (ctx: Ctx) => HTMLElement | null;
    getOptionElements: (ctx: Ctx) => HTMLElement[];
    getFirstOption: (ctx: Ctx) => HTMLElement | null | undefined;
    getLastOption: (ctx: Ctx) => HTMLElement | null | undefined;
    getNextOption: (ctx: Ctx, currentId: string) => HTMLElement;
    getPreviousOption: (ctx: Ctx, currentId: string) => HTMLElement | null;
    getOptionDetails(option: HTMLElement): Option;
    getMatchingOption(ctx: Ctx, key: string, current: any): HTMLElement | undefined;
    getHighlightedOption(ctx: Ctx): HTMLElement | null;
    getClosestOption(target: EventTarget | HTMLElement | null): HTMLElement | null;
};
