'use strict';

Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });

const core = require('@zag-js/core');
const dismissable = require('@zag-js/dismissable');
const domQuery = require('@zag-js/dom-query');
const formUtils = require('@zag-js/form-utils');
const mutationObserver = require('@zag-js/mutation-observer');
const popper = require('@zag-js/popper');
const tabbable = require('@zag-js/tabbable');
const utils = require('@zag-js/utils');
const select_dom = require('./select.dom.js');

function machine(userContext) {
  const ctx = utils.compact(userContext);
  return core.createMachine(
    {
      id: "select",
      context: {
        selectOnTab: false,
        selectedOption: null,
        highlightedOption: null,
        loop: false,
        closeOnSelect: true,
        ...ctx,
        initialSelectedOption: null,
        prevSelectedOption: null,
        prevHighlightedOption: null,
        typeahead: domQuery.getByTypeahead.defaultOptions,
        positioning: {
          placement: "bottom-start",
          gutter: 8,
          ...ctx.positioning
        }
      },
      computed: {
        hasSelectedOption: (ctx2) => ctx2.selectedOption != null,
        isTypingAhead: (ctx2) => ctx2.typeahead.keysSoFar !== "",
        isInteractive: (ctx2) => !(ctx2.disabled || ctx2.readOnly),
        selectedId: (ctx2) => ctx2.selectedOption ? select_dom.dom.getOptionId(ctx2, ctx2.selectedOption.value) : null,
        highlightedId: (ctx2) => ctx2.highlightedOption ? select_dom.dom.getOptionId(ctx2, ctx2.highlightedOption.value) : null,
        hasSelectedChanged: (ctx2) => ctx2.selectedOption?.value !== ctx2.prevSelectedOption?.value,
        hasHighlightedChanged: (ctx2) => ctx2.highlightedOption?.value !== ctx2.prevHighlightedOption?.value
      },
      initial: "idle",
      watch: {
        selectedOption: ["syncSelectValue", "dispatchChangeEvent"]
      },
      on: {
        HIGHLIGHT_OPTION: {
          actions: ["setHighlightedOption", "invokeOnHighlight"]
        },
        SELECT_OPTION: {
          actions: ["setSelectedOption", "invokeOnSelect"]
        },
        CLEAR_SELECTED: {
          actions: ["clearSelectedOption", "invokeOnSelect"]
        }
      },
      entry: ["setInitialSelectedOption"],
      activities: ["trackFormControlState"],
      states: {
        idle: {
          tags: ["closed"],
          on: {
            TRIGGER_CLICK: {
              target: "open"
            },
            TRIGGER_FOCUS: {
              target: "focused"
            },
            OPEN: {
              target: "open"
            }
          }
        },
        focused: {
          tags: ["closed"],
          entry: ["focusTrigger", "clearHighlightedOption"],
          on: {
            TRIGGER_CLICK: {
              target: "open"
            },
            TRIGGER_BLUR: {
              target: "idle",
              actions: ["clearHighlightedOption"]
            },
            TRIGGER_KEY: {
              target: "open"
            },
            ARROW_UP: {
              target: "open",
              actions: ["highlightLastOption", "invokeOnHighlight"]
            },
            ARROW_DOWN: {
              target: "open",
              actions: ["highlightFirstOption", "invokeOnHighlight"]
            },
            ARROW_LEFT: [
              {
                guard: "hasSelectedOption",
                actions: ["selectPreviousOption", "invokeOnSelect"]
              },
              {
                actions: ["selectLastOption", "invokeOnSelect"]
              }
            ],
            ARROW_RIGHT: [
              {
                guard: "hasSelectedOption",
                actions: ["selectNextOption", "invokeOnSelect"]
              },
              {
                actions: ["selectFirstOption", "invokeOnSelect"]
              }
            ],
            HOME: {
              actions: ["selectFirstOption", "invokeOnSelect"]
            },
            END: {
              actions: ["selectLastOption", "invokeOnSelect"]
            },
            TYPEAHEAD: {
              actions: ["selectMatchingOption", "invokeOnSelect"]
            },
            OPEN: {
              target: "open"
            }
          }
        },
        open: {
          tags: ["open"],
          entry: ["focusContent", "highlightSelectedOption", "invokeOnOpen"],
          exit: ["scrollContentToTop"],
          activities: ["trackInteractOutside", "computePlacement", "scrollToHighlightedOption", "proxyTabFocus"],
          on: {
            CLOSE: {
              target: "focused",
              actions: ["invokeOnClose"]
            },
            TRIGGER_CLICK: {
              target: "focused",
              actions: ["invokeOnClose"]
            },
            OPTION_CLICK: [
              {
                target: "focused",
                actions: ["selectHighlightedOption", "invokeOnSelect", "invokeOnClose"],
                guard: "closeOnSelect"
              },
              {
                actions: ["selectHighlightedOption", "invokeOnSelect"]
              }
            ],
            TRIGGER_KEY: [
              {
                target: "focused",
                actions: ["selectHighlightedOption", "invokeOnSelect", "invokeOnClose"],
                guard: "closeOnSelect"
              },
              {
                actions: ["selectHighlightedOption", "invokeOnSelect"]
              }
            ],
            BLUR: {
              target: "focused",
              actions: ["invokeOnClose"]
            },
            HOME: {
              actions: ["highlightFirstOption", "invokeOnHighlight"]
            },
            END: {
              actions: ["highlightLastOption", "invokeOnHighlight"]
            },
            ARROW_DOWN: [
              {
                guard: "hasHighlightedOption",
                actions: ["highlightNextOption", "invokeOnHighlight"]
              },
              {
                actions: ["highlightFirstOption", "invokeOnHighlight"]
              }
            ],
            ARROW_UP: [
              {
                guard: "hasHighlightedOption",
                actions: ["highlightPreviousOption", "invokeOnHighlight"]
              },
              {
                actions: ["highlightLastOption", "invokeOnHighlight"]
              }
            ],
            TYPEAHEAD: {
              actions: ["highlightMatchingOption", "invokeOnHighlight"]
            },
            POINTER_MOVE: {
              actions: ["highlightOption", "invokeOnHighlight"]
            },
            POINTER_LEAVE: {
              actions: ["clearHighlightedOption"]
            },
            TAB: [
              {
                target: "idle",
                actions: ["selectHighlightedOption", "invokeOnClose", "invokeOnSelect", "clearHighlightedOption"],
                guard: "selectOnTab"
              },
              {
                target: "idle",
                actions: ["invokeOnClose", "clearHighlightedOption"]
              }
            ]
          }
        }
      }
    },
    {
      guards: {
        hasHighlightedOption: (ctx2) => ctx2.highlightedId != null,
        selectOnTab: (ctx2) => !!ctx2.selectOnTab,
        hasSelectedOption: (ctx2) => ctx2.hasSelectedOption,
        closeOnSelect: (ctx2) => !!ctx2.closeOnSelect
      },
      activities: {
        proxyTabFocus(ctx2) {
          return tabbable.proxyTabFocus(select_dom.dom.getContentElement(ctx2), {
            triggerElement: select_dom.dom.getTriggerElement(ctx2),
            onFocus(el) {
              domQuery.raf(() => el.focus({ preventScroll: true }));
            }
          });
        },
        trackFormControlState(ctx2) {
          return formUtils.trackFormControl(select_dom.dom.getHiddenSelectElement(ctx2), {
            onFieldsetDisabled() {
              ctx2.disabled = true;
            },
            onFormReset() {
              ctx2.prevSelectedOption = ctx2.selectedOption;
              ctx2.selectedOption = ctx2.initialSelectedOption;
            }
          });
        },
        trackInteractOutside(ctx2, _evt, { send }) {
          let focusable = false;
          return dismissable.trackDismissableElement(select_dom.dom.getContentElement(ctx2), {
            exclude: [select_dom.dom.getTriggerElement(ctx2)],
            onInteractOutside(event) {
              focusable = event.detail.focusable;
              ctx2.onInteractOutside?.(event);
            },
            onDismiss() {
              send({ type: "BLUR", src: "interact-outside", focusable });
            }
          });
        },
        computePlacement(ctx2) {
          ctx2.currentPlacement = ctx2.positioning.placement;
          return popper.getPlacement(select_dom.dom.getTriggerElement(ctx2), select_dom.dom.getPositionerElement(ctx2), {
            ...ctx2.positioning,
            onComplete(data) {
              ctx2.currentPlacement = data.placement;
            }
          });
        },
        scrollToHighlightedOption(ctx2, _evt, { getState }) {
          const exec = () => {
            const state = getState();
            if (state.event.type === "POINTER_MOVE")
              return;
            const option = select_dom.dom.getHighlightedOption(ctx2);
            option?.scrollIntoView({ block: "nearest" });
          };
          domQuery.raf(() => {
            exec();
          });
          return mutationObserver.observeAttributes(select_dom.dom.getContentElement(ctx2), ["aria-activedescendant"], exec);
        }
      },
      actions: {
        setInitialSelectedOption(ctx2) {
          ctx2.initialSelectedOption = ctx2.selectedOption;
        },
        highlightPreviousOption(ctx2) {
          if (!ctx2.highlightedId)
            return;
          const option = select_dom.dom.getPreviousOption(ctx2, ctx2.highlightedId);
          highlightOption(ctx2, option);
        },
        highlightNextOption(ctx2) {
          if (!ctx2.highlightedId)
            return;
          const option = select_dom.dom.getNextOption(ctx2, ctx2.highlightedId);
          highlightOption(ctx2, option);
        },
        highlightFirstOption(ctx2) {
          const option = select_dom.dom.getFirstOption(ctx2);
          highlightOption(ctx2, option);
        },
        highlightLastOption(ctx2) {
          const option = select_dom.dom.getLastOption(ctx2);
          highlightOption(ctx2, option);
        },
        focusContent(ctx2) {
          domQuery.raf(() => {
            select_dom.dom.getContentElement(ctx2)?.focus({ preventScroll: true });
          });
        },
        focusTrigger(ctx2, evt) {
          if (evt.focusable)
            return;
          domQuery.raf(() => {
            select_dom.dom.getTriggerElement(ctx2)?.focus({ preventScroll: true });
          });
        },
        selectHighlightedOption(ctx2, evt) {
          const id = evt.id ?? ctx2.highlightedId;
          if (!id)
            return;
          const option = select_dom.dom.getById(ctx2, id);
          selectOption(ctx2, option);
        },
        selectFirstOption(ctx2) {
          const option = select_dom.dom.getFirstOption(ctx2);
          selectOption(ctx2, option);
        },
        selectLastOption(ctx2) {
          const option = select_dom.dom.getLastOption(ctx2);
          selectOption(ctx2, option);
        },
        selectNextOption(ctx2) {
          if (!ctx2.selectedId)
            return;
          const option = select_dom.dom.getNextOption(ctx2, ctx2.selectedId);
          selectOption(ctx2, option);
        },
        selectPreviousOption(ctx2) {
          if (!ctx2.selectedId)
            return;
          const option = select_dom.dom.getPreviousOption(ctx2, ctx2.selectedId);
          selectOption(ctx2, option);
        },
        highlightSelectedOption(ctx2) {
          if (!ctx2.selectedOption)
            return;
          ctx2.prevHighlightedOption = ctx2.highlightedOption;
          ctx2.highlightedOption = ctx2.selectedOption;
        },
        highlightOption(ctx2, evt) {
          const option = evt.target ?? select_dom.dom.getById(ctx2, evt.id);
          highlightOption(ctx2, option);
        },
        highlightMatchingOption(ctx2, evt) {
          const option = select_dom.dom.getMatchingOption(ctx2, evt.key, ctx2.highlightedId);
          highlightOption(ctx2, option);
        },
        selectMatchingOption(ctx2, evt) {
          const option = select_dom.dom.getMatchingOption(ctx2, evt.key, ctx2.selectedId);
          selectOption(ctx2, option);
        },
        setHighlightedOption(ctx2, evt) {
          if (!evt.value)
            return;
          ctx2.prevHighlightedOption = ctx2.highlightedOption;
          ctx2.highlightedOption = evt.value;
        },
        clearHighlightedOption(ctx2) {
          ctx2.highlightedOption = null;
        },
        setSelectedOption(ctx2, evt) {
          if (!evt.value)
            return;
          ctx2.prevSelectedOption = ctx2.selectedOption;
          ctx2.selectedOption = evt.value;
        },
        clearSelectedOption(ctx2) {
          ctx2.selectedOption = null;
        },
        scrollContentToTop(ctx2) {
          select_dom.dom.getContentElement(ctx2)?.scrollTo(0, 0);
        },
        invokeOnOpen(ctx2) {
          ctx2.onOpen?.();
        },
        invokeOnClose(ctx2) {
          ctx2.onClose?.();
        },
        invokeOnHighlight(ctx2) {
          if (!ctx2.hasHighlightedChanged)
            return;
          ctx2.onHighlight?.(utils.json(ctx2.highlightedOption));
        },
        invokeOnSelect(ctx2) {
          if (!ctx2.hasSelectedChanged)
            return;
          ctx2.onChange?.(utils.json(ctx2.selectedOption));
        },
        syncSelectValue(ctx2) {
          const selectedOption = ctx2.selectedOption;
          const node = select_dom.dom.getHiddenSelectElement(ctx2);
          if (!node || !selectedOption)
            return;
          formUtils.setElementValue(node, selectedOption.value, { type: "HTMLSelectElement" });
        },
        dispatchChangeEvent(ctx2) {
          const node = select_dom.dom.getHiddenSelectElement(ctx2);
          if (!node)
            return;
          const win = select_dom.dom.getWin(ctx2);
          const changeEvent = new win.Event("change", { bubbles: true });
          node.dispatchEvent(changeEvent);
        }
      }
    }
  );
}
function highlightOption(ctx, option) {
  if (!option)
    return;
  ctx.prevHighlightedOption = ctx.highlightedOption;
  ctx.highlightedOption = select_dom.dom.getOptionDetails(option);
}
function selectOption(ctx, option) {
  if (!option)
    return;
  ctx.prevSelectedOption = ctx.selectedOption;
  ctx.selectedOption = select_dom.dom.getOptionDetails(option);
}

exports.machine = machine;
