'use strict';

Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });

const domQuery = require('@zag-js/dom-query');

const dom = domQuery.createScope({
  getContentId: (ctx) => ctx.ids?.content ?? `select:${ctx.id}:content`,
  getTriggerId: (ctx) => ctx.ids?.trigger ?? `select:${ctx.id}:trigger`,
  getLabelId: (ctx) => ctx.ids?.label ?? `select:${ctx.id}:label`,
  getOptionId: (ctx, id) => ctx.ids?.option?.(id) ?? `select:${ctx.id}:option:${id}`,
  getHiddenSelectId: (ctx) => ctx.ids?.hiddenSelect ?? `select:${ctx.id}:select`,
  getPositionerId: (ctx) => ctx.ids?.positioner ?? `select:${ctx.id}:positioner`,
  getOptionGroupId: (ctx, id) => ctx.ids?.optionGroup?.(id) ?? `select:${ctx.id}:optgroup:${id}`,
  getOptionGroupLabelId: (ctx, id) => ctx.ids?.optionGroupLabel?.(id) ?? `select:${ctx.id}:optgroup-label:${id}`,
  getHiddenSelectElement: (ctx) => dom.getById(ctx, dom.getHiddenSelectId(ctx)),
  getContentElement: (ctx) => dom.getById(ctx, dom.getContentId(ctx)),
  getTriggerElement: (ctx) => dom.getById(ctx, dom.getTriggerId(ctx)),
  getPositionerElement: (ctx) => {
    return dom.getById(ctx, dom.getPositionerId(ctx));
  },
  getOptionElements: (ctx) => {
    return domQuery.queryAll(dom.getContentElement(ctx), "[role=option]:not([data-disabled])");
  },
  getFirstOption: (ctx) => {
    return domQuery.query(dom.getContentElement(ctx), "[role=option]:not([data-disabled])");
  },
  getLastOption: (ctx) => {
    return domQuery.query(dom.getContentElement(ctx), "[role=option]:not([data-disabled]):last-of-type");
  },
  getNextOption: (ctx, currentId) => {
    const options = dom.getOptionElements(ctx);
    return domQuery.nextById(options, currentId, ctx.loop);
  },
  getPreviousOption: (ctx, currentId) => {
    const options = dom.getOptionElements(ctx);
    return domQuery.prevById(options, currentId, ctx.loop);
  },
  getOptionDetails(option) {
    const { label, value } = option.dataset;
    return { label, value };
  },
  getMatchingOption(ctx, key, current) {
    return domQuery.getByTypeahead(dom.getOptionElements(ctx), { state: ctx.typeahead, key, activeId: current });
  },
  getHighlightedOption(ctx) {
    if (!ctx.highlightedId)
      return null;
    return dom.getById(ctx, ctx.highlightedId);
  },
  getClosestOption(target) {
    return domQuery.isHTMLElement(target) ? target.closest("[data-part=option]") : null;
  }
});

exports.dom = dom;
