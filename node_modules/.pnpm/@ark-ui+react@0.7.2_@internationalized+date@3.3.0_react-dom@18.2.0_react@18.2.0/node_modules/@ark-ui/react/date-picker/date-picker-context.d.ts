import type { matchView } from '@zag-js/date-picker/dist/date-picker.utils';
import type { DateView, DateValue, CalendarDate, CalendarDateTime, ZonedDateTime, GridProps, DayCellProps, CellProps, ViewProps } from '@zag-js/date-picker';
import type { Provider, HTMLAttributes, DetailedHTMLProps, ButtonHTMLAttributes, InputHTMLAttributes, SelectHTMLAttributes } from 'react';
import { type UseDatePickerReturn } from './use-date-picker';
export type DatePickerContext = UseDatePickerReturn;
export declare const DatePickerProvider: Provider<{
    isFocused: boolean;
    isOpen: boolean | undefined;
    view: DateView;
    matchView: typeof matchView;
    getDaysInWeek(weekIndex: number, from?: DateValue | undefined): DateValue[];
    getOffset(months: number): {
        amount: number;
        visibleRange: {
            start: CalendarDate | CalendarDateTime | ZonedDateTime;
            end: CalendarDate | CalendarDateTime | ZonedDateTime;
        };
        weeks: DateValue[][];
    };
    getMonthDays(from?: DateValue | undefined): DateValue[][];
    isUnavailable(date: DateValue): boolean;
    readonly weeks: DateValue[][];
    weekDays: {
        value: CalendarDate | CalendarDateTime | ZonedDateTime;
        short: string;
        long: string;
        narrow: string;
    }[];
    visibleRangeText: {
        start: string;
        end: string;
        formatted: string;
    };
    value: DateValue[];
    valueAsDate: Date[];
    valueAsString: string[];
    focusedValue: DateValue;
    focusedValueAsDate: Date;
    focusedValueAsString: string;
    selectToday(): void;
    setValue(values: CalendarDate[]): void;
    setFocusedValue(value: CalendarDate): void;
    clearValue(): void;
    open(): void;
    close(): void;
    focusMonth(month: number): void;
    focusYear(year: number): void;
    visibleRange: {
        start: DateValue;
        end: DateValue;
    };
    getYears(): {
        label: string;
        value: number;
    }[];
    getYearsGrid(props?: {
        columns?: number | undefined;
    } | undefined): {
        label: string;
        value: number;
    }[][];
    getDecade(): {
        start: number | undefined;
        end: number | undefined;
    };
    getMonths(props?: {
        format?: "short" | "long" | undefined;
    } | undefined): {
        label: string;
        value: number;
    }[];
    getMonthsGrid(props?: {
        columns?: number | undefined;
        format?: "short" | "long" | undefined;
    } | undefined): {
        label: string;
        value: number;
    }[][];
    format(value: CalendarDate, opts?: Intl.DateTimeFormatOptions | undefined): string;
    setView(view: DateView): void;
    goToNext(): void;
    goToPrev(): void;
    controlProps: HTMLAttributes<HTMLElement>;
    contentProps: HTMLAttributes<HTMLElement>;
    getGridProps(props?: GridProps | undefined): HTMLAttributes<HTMLElement>;
    getDayCellState(props: DayCellProps): {
        isInvalid: boolean;
        isDisabled: boolean;
        isSelected: boolean;
        isUnavailable: boolean;
        isOutsideRange: boolean;
        isInRange: boolean;
        isFirstInRange: boolean;
        isLastInRange: boolean;
        isToday: boolean;
        isWeekend: boolean;
        formattedDate: string;
        readonly isFocused: boolean;
        readonly ariaLabel: string;
        readonly isSelectable: boolean;
    };
    getDayCellProps(props: DayCellProps): HTMLAttributes<HTMLElement>;
    getDayCellTriggerProps(props: DayCellProps): HTMLAttributes<HTMLElement>;
    getMonthCellState(props: CellProps): {
        isFocused: boolean;
        isSelectable: boolean;
        isSelected: boolean;
        valueText: string;
        readonly isDisabled: boolean;
    };
    getMonthCellProps(props: CellProps): HTMLAttributes<HTMLElement>;
    getMonthCellTriggerProps(props: CellProps): HTMLAttributes<HTMLElement>;
    getYearCellState(props: CellProps): {
        isFocused: boolean;
        isSelectable: boolean;
        isSelected: boolean;
        valueText: string;
        readonly isDisabled: boolean;
    };
    getYearCellProps(props: CellProps): HTMLAttributes<HTMLElement>;
    getYearCellTriggerProps(props: CellProps): HTMLAttributes<HTMLElement>;
    getNextTriggerProps(props?: ViewProps | undefined): DetailedHTMLProps<ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>;
    getPrevTriggerProps(props?: ViewProps | undefined): DetailedHTMLProps<ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>;
    getHeaderProps(props?: ViewProps | undefined): HTMLAttributes<HTMLElement>;
    clearTriggerProps: DetailedHTMLProps<ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>;
    triggerProps: DetailedHTMLProps<ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>;
    getViewTriggerProps(props?: ViewProps | undefined): DetailedHTMLProps<ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>;
    inputProps: DetailedHTMLProps<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>;
    monthSelectProps: DetailedHTMLProps<SelectHTMLAttributes<HTMLSelectElement>, HTMLSelectElement>;
    yearSelectProps: DetailedHTMLProps<SelectHTMLAttributes<HTMLSelectElement>, HTMLSelectElement>;
}>, useDatePickerContext: () => {
    isFocused: boolean;
    isOpen: boolean | undefined;
    view: DateView;
    matchView: typeof matchView;
    getDaysInWeek(weekIndex: number, from?: DateValue | undefined): DateValue[];
    getOffset(months: number): {
        amount: number;
        visibleRange: {
            start: CalendarDate | CalendarDateTime | ZonedDateTime;
            end: CalendarDate | CalendarDateTime | ZonedDateTime;
        };
        weeks: DateValue[][];
    };
    getMonthDays(from?: DateValue | undefined): DateValue[][];
    isUnavailable(date: DateValue): boolean;
    readonly weeks: DateValue[][];
    weekDays: {
        value: CalendarDate | CalendarDateTime | ZonedDateTime;
        short: string;
        long: string;
        narrow: string;
    }[];
    visibleRangeText: {
        start: string;
        end: string;
        formatted: string;
    };
    value: DateValue[];
    valueAsDate: Date[];
    valueAsString: string[];
    focusedValue: DateValue;
    focusedValueAsDate: Date;
    focusedValueAsString: string;
    selectToday(): void;
    setValue(values: CalendarDate[]): void;
    setFocusedValue(value: CalendarDate): void;
    clearValue(): void;
    open(): void;
    close(): void;
    focusMonth(month: number): void;
    focusYear(year: number): void;
    visibleRange: {
        start: DateValue;
        end: DateValue;
    };
    getYears(): {
        label: string;
        value: number;
    }[];
    getYearsGrid(props?: {
        columns?: number | undefined;
    } | undefined): {
        label: string;
        value: number;
    }[][];
    getDecade(): {
        start: number | undefined;
        end: number | undefined;
    };
    getMonths(props?: {
        format?: "short" | "long" | undefined;
    } | undefined): {
        label: string;
        value: number;
    }[];
    getMonthsGrid(props?: {
        columns?: number | undefined;
        format?: "short" | "long" | undefined;
    } | undefined): {
        label: string;
        value: number;
    }[][];
    format(value: CalendarDate, opts?: Intl.DateTimeFormatOptions | undefined): string;
    setView(view: DateView): void;
    goToNext(): void;
    goToPrev(): void;
    controlProps: HTMLAttributes<HTMLElement>;
    contentProps: HTMLAttributes<HTMLElement>;
    getGridProps(props?: GridProps | undefined): HTMLAttributes<HTMLElement>;
    getDayCellState(props: DayCellProps): {
        isInvalid: boolean;
        isDisabled: boolean;
        isSelected: boolean;
        isUnavailable: boolean;
        isOutsideRange: boolean;
        isInRange: boolean;
        isFirstInRange: boolean;
        isLastInRange: boolean;
        isToday: boolean;
        isWeekend: boolean;
        formattedDate: string;
        readonly isFocused: boolean;
        readonly ariaLabel: string;
        readonly isSelectable: boolean;
    };
    getDayCellProps(props: DayCellProps): HTMLAttributes<HTMLElement>;
    getDayCellTriggerProps(props: DayCellProps): HTMLAttributes<HTMLElement>;
    getMonthCellState(props: CellProps): {
        isFocused: boolean;
        isSelectable: boolean;
        isSelected: boolean;
        valueText: string;
        readonly isDisabled: boolean;
    };
    getMonthCellProps(props: CellProps): HTMLAttributes<HTMLElement>;
    getMonthCellTriggerProps(props: CellProps): HTMLAttributes<HTMLElement>;
    getYearCellState(props: CellProps): {
        isFocused: boolean;
        isSelectable: boolean;
        isSelected: boolean;
        valueText: string;
        readonly isDisabled: boolean;
    };
    getYearCellProps(props: CellProps): HTMLAttributes<HTMLElement>;
    getYearCellTriggerProps(props: CellProps): HTMLAttributes<HTMLElement>;
    getNextTriggerProps(props?: ViewProps | undefined): DetailedHTMLProps<ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>;
    getPrevTriggerProps(props?: ViewProps | undefined): DetailedHTMLProps<ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>;
    getHeaderProps(props?: ViewProps | undefined): HTMLAttributes<HTMLElement>;
    clearTriggerProps: DetailedHTMLProps<ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>;
    triggerProps: DetailedHTMLProps<ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>;
    getViewTriggerProps(props?: ViewProps | undefined): DetailedHTMLProps<ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>;
    inputProps: DetailedHTMLProps<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>;
    monthSelectProps: DetailedHTMLProps<SelectHTMLAttributes<HTMLSelectElement>, HTMLSelectElement>;
    yearSelectProps: DetailedHTMLProps<SelectHTMLAttributes<HTMLSelectElement>, HTMLSelectElement>;
};
