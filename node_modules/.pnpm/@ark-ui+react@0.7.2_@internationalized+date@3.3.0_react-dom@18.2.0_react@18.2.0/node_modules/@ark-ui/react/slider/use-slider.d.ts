import type { HTMLAttributes, DetailedHTMLProps, LabelHTMLAttributes, InputHTMLAttributes, OutputHTMLAttributes } from 'react';
import * as slider from '@zag-js/slider';
import { type Optional } from '../types';
export type UseSliderProps = Optional<slider.Context, 'id'> & {
    defaultValue?: slider.Context['value'];
};
export type UseSliderReturn = ReturnType<typeof useSlider>;
export declare const useSlider: (props: UseSliderProps) => {
    isFocused: boolean;
    isDragging: boolean;
    value: number;
    percent: number;
    setValue(value: number): void;
    getPercentValue: (percent: number) => number;
    getValuePercent: (value: number) => number;
    focus(): void;
    increment(): void;
    decrement(): void;
    rootProps: HTMLAttributes<HTMLElement>;
    labelProps: DetailedHTMLProps<LabelHTMLAttributes<HTMLLabelElement>, HTMLLabelElement>;
    thumbProps: HTMLAttributes<HTMLElement>;
    hiddenInputProps: DetailedHTMLProps<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>;
    outputProps: DetailedHTMLProps<OutputHTMLAttributes<HTMLOutputElement>, HTMLOutputElement>;
    trackProps: HTMLAttributes<HTMLElement>;
    rangeProps: HTMLAttributes<HTMLElement>;
    controlProps: HTMLAttributes<HTMLElement>;
    markerGroupProps: HTMLAttributes<HTMLElement>;
    getMarkerProps({ value }: {
        value: number;
    }): HTMLAttributes<HTMLElement>;
};
