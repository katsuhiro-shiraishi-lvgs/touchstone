import type { Provider, HTMLAttributes, DetailedHTMLProps, LabelHTMLAttributes, InputHTMLAttributes, OutputHTMLAttributes } from 'react';
import { type UseSliderReturn } from './use-slider';
export type SliderContext = UseSliderReturn;
export declare const SliderProvider: Provider<{
    isFocused: boolean;
    isDragging: boolean;
    value: number;
    percent: number;
    setValue(value: number): void;
    getPercentValue: (percent: number) => number;
    getValuePercent: (value: number) => number;
    focus(): void;
    increment(): void;
    decrement(): void;
    rootProps: HTMLAttributes<HTMLElement>;
    labelProps: DetailedHTMLProps<LabelHTMLAttributes<HTMLLabelElement>, HTMLLabelElement>;
    thumbProps: HTMLAttributes<HTMLElement>;
    hiddenInputProps: DetailedHTMLProps<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>;
    outputProps: DetailedHTMLProps<OutputHTMLAttributes<HTMLOutputElement>, HTMLOutputElement>;
    trackProps: HTMLAttributes<HTMLElement>;
    rangeProps: HTMLAttributes<HTMLElement>;
    controlProps: HTMLAttributes<HTMLElement>;
    markerGroupProps: HTMLAttributes<HTMLElement>;
    getMarkerProps({ value }: {
        value: number;
    }): HTMLAttributes<HTMLElement>;
}>, useSliderContext: () => {
    isFocused: boolean;
    isDragging: boolean;
    value: number;
    percent: number;
    setValue(value: number): void;
    getPercentValue: (percent: number) => number;
    getValuePercent: (value: number) => number;
    focus(): void;
    increment(): void;
    decrement(): void;
    rootProps: HTMLAttributes<HTMLElement>;
    labelProps: DetailedHTMLProps<LabelHTMLAttributes<HTMLLabelElement>, HTMLLabelElement>;
    thumbProps: HTMLAttributes<HTMLElement>;
    hiddenInputProps: DetailedHTMLProps<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>;
    outputProps: DetailedHTMLProps<OutputHTMLAttributes<HTMLOutputElement>, HTMLOutputElement>;
    trackProps: HTMLAttributes<HTMLElement>;
    rangeProps: HTMLAttributes<HTMLElement>;
    controlProps: HTMLAttributes<HTMLElement>;
    markerGroupProps: HTMLAttributes<HTMLElement>;
    getMarkerProps({ value }: {
        value: number;
    }): HTMLAttributes<HTMLElement>;
};
