import type { HTMLAttributes, DetailedHTMLProps, InputHTMLAttributes, ButtonHTMLAttributes } from 'react';
import type { ColorFormat, ColorChannelInputProps } from '@zag-js/color-picker/dist/color-picker.types';
import * as colorPicker from '@zag-js/color-picker';
import type { Optional } from '../types';
export type UseColorPickerProps = Optional<colorPicker.Context, 'id'> & {
    defaultValue?: colorPicker.Context['value'];
};
export type UseColorPickerReturn = ReturnType<typeof useColorPicker>;
export declare const useColorPicker: (props: UseColorPickerProps) => {
    isDragging: boolean;
    value: string;
    valueAsColor: colorPicker.Color;
    channels: [colorPicker.ColorChannel, colorPicker.ColorChannel, colorPicker.ColorChannel];
    setColor(value: string | colorPicker.Color): void;
    setChannelValue(channel: colorPicker.ColorChannel, value: number): void;
    setFormat(format: ColorFormat): void;
    contentProps: HTMLAttributes<HTMLElement>;
    getAreaProps(props: colorPicker.ColorAreaProps): HTMLAttributes<HTMLElement>;
    getAreaGradientProps(props: colorPicker.ColorAreaProps): HTMLAttributes<HTMLElement>;
    getAreaThumbProps(props: colorPicker.ColorAreaProps): HTMLAttributes<HTMLElement>;
    getChannelSliderTrackProps(props: colorPicker.ColorChannelProps): HTMLAttributes<HTMLElement>;
    getChannelSliderBackgroundProps(props: colorPicker.ColorChannelProps): HTMLAttributes<HTMLElement>;
    getChannelSliderThumbProps(props: colorPicker.ColorChannelProps): HTMLAttributes<HTMLElement>;
    getChannelInputProps(props: ColorChannelInputProps): DetailedHTMLProps<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>;
    eyeDropperTriggerProps: DetailedHTMLProps<ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>;
    getSwatchBackgroundProps(props: colorPicker.ColorSwatchProps): HTMLAttributes<HTMLElement>;
    getSwatchProps(props: colorPicker.ColorSwatchProps): HTMLAttributes<HTMLElement>;
};
