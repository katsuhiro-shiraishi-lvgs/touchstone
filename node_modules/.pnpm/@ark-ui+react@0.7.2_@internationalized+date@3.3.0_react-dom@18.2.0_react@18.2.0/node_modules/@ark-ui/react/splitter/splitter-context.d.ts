import type { ResizeTriggerProps, PanelProps } from '@zag-js/splitter';
import type { PanelId } from '@zag-js/splitter/dist/splitter.types';
import type { Provider, HTMLAttributes } from 'react';
import { type UseSplitterReturn } from './use-splitter';
export type SplitterContext = UseSplitterReturn;
export declare const SplitterProvider: Provider<{
    isFocused: boolean;
    isDragging: boolean;
    bounds: {
        min: number;
        max: number;
    } | undefined;
    setToMinSize(id: PanelId): void;
    setToMaxSize(id: PanelId): void;
    setSize(id: PanelId, size: number): void;
    getResizeTriggerState(props: ResizeTriggerProps): {
        isDisabled: boolean;
        isFocused: boolean;
        panelIds: string[];
        min: number | undefined;
        max: number | undefined;
        value: number;
    };
    rootProps: HTMLAttributes<HTMLElement>;
    getPanelProps(props: PanelProps): HTMLAttributes<HTMLElement>;
    getResizeTriggerProps(props: ResizeTriggerProps): HTMLAttributes<HTMLElement>;
}>, useSplitterContext: () => {
    isFocused: boolean;
    isDragging: boolean;
    bounds: {
        min: number;
        max: number;
    } | undefined;
    setToMinSize(id: PanelId): void;
    setToMaxSize(id: PanelId): void;
    setSize(id: PanelId, size: number): void;
    getResizeTriggerState(props: ResizeTriggerProps): {
        isDisabled: boolean;
        isFocused: boolean;
        panelIds: string[];
        min: number | undefined;
        max: number | undefined;
        value: number;
    };
    rootProps: HTMLAttributes<HTMLElement>;
    getPanelProps(props: PanelProps): HTMLAttributes<HTMLElement>;
    getResizeTriggerProps(props: ResizeTriggerProps): HTMLAttributes<HTMLElement>;
};
