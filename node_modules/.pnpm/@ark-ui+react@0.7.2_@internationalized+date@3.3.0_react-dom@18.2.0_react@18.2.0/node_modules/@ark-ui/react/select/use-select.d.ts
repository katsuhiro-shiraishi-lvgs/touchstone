import type { DetailedHTMLProps, LabelHTMLAttributes, HTMLAttributes, ButtonHTMLAttributes, SelectHTMLAttributes } from 'react';
import type { Option } from '@zag-js/select/dist/select.types';
import * as select from '@zag-js/select';
import { type Optional } from '../types';
export type UseSelectProps = Optional<select.Context, 'id'> & {
    defaultValue?: select.Context['selectedOption'];
};
export type UseSelectReturn = ReturnType<typeof useSelect>;
export declare const useSelect: (props: UseSelectProps) => {
    isOpen: boolean;
    highlightedOption: Option | null;
    selectedOption: Option | null;
    focus(): void;
    open(): void;
    close(): void;
    setSelectedOption(value: Option): void;
    setHighlightedOption(value: Option): void;
    clearSelectedOption(): void;
    getOptionState: (props: select.OptionProps) => {
        isDisabled: boolean;
        isHighlighted: boolean;
        isSelected: boolean;
    };
    labelProps: DetailedHTMLProps<LabelHTMLAttributes<HTMLLabelElement>, HTMLLabelElement>;
    positionerProps: HTMLAttributes<HTMLElement>;
    triggerProps: DetailedHTMLProps<ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>;
    getOptionProps(props: select.OptionProps): HTMLAttributes<HTMLElement>;
    getOptionGroupLabelProps(props: select.OptionGroupLabelProps): HTMLAttributes<HTMLElement>;
    getOptionGroupProps(props: select.OptionGroupProps): HTMLAttributes<HTMLElement>;
    hiddenSelectProps: DetailedHTMLProps<SelectHTMLAttributes<HTMLSelectElement>, HTMLSelectElement>;
    contentProps: HTMLAttributes<HTMLElement>;
};
