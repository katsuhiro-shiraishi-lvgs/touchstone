import type { Provider, HTMLAttributes, DetailedHTMLProps, LabelHTMLAttributes, InputHTMLAttributes } from 'react';
import { type UsePinInputReturn } from './use-pin-input';
export type PinInputContext = UsePinInputReturn;
export declare const PinInputProvider: Provider<{
    value: string[];
    valueAsString: string;
    isValueComplete: boolean;
    setValue(value: string[]): void;
    clearValue(): void;
    setValueAtIndex(index: number, value: string): void;
    focus: () => void;
    rootProps: HTMLAttributes<HTMLElement>;
    labelProps: DetailedHTMLProps<LabelHTMLAttributes<HTMLLabelElement>, HTMLLabelElement>;
    hiddenInputProps: DetailedHTMLProps<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>;
    controlProps: HTMLAttributes<HTMLElement>;
    getInputProps({ index }: {
        index: number;
    }): DetailedHTMLProps<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>;
}>, usePinInputContext: () => {
    value: string[];
    valueAsString: string;
    isValueComplete: boolean;
    setValue(value: string[]): void;
    clearValue(): void;
    setValueAtIndex(index: number, value: string): void;
    focus: () => void;
    rootProps: HTMLAttributes<HTMLElement>;
    labelProps: DetailedHTMLProps<LabelHTMLAttributes<HTMLLabelElement>, HTMLLabelElement>;
    hiddenInputProps: DetailedHTMLProps<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>;
    controlProps: HTMLAttributes<HTMLElement>;
    getInputProps({ index }: {
        index: number;
    }): DetailedHTMLProps<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>;
};
