import type { HTMLAttributes, DetailedHTMLProps, LabelHTMLAttributes, InputHTMLAttributes } from 'react';
import * as pinInput from '@zag-js/pin-input';
import { type Optional } from '../types';
export type UsePinInputProps = Optional<pinInput.Context, 'id'> & {
    defaultValue?: pinInput.Context['value'];
};
export declare const usePinInput: (props: UsePinInputProps) => {
    value: string[];
    valueAsString: string;
    isValueComplete: boolean;
    setValue(value: string[]): void;
    clearValue(): void;
    setValueAtIndex(index: number, value: string): void;
    focus: () => void;
    rootProps: HTMLAttributes<HTMLElement>;
    labelProps: DetailedHTMLProps<LabelHTMLAttributes<HTMLLabelElement>, HTMLLabelElement>;
    hiddenInputProps: DetailedHTMLProps<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>;
    controlProps: HTMLAttributes<HTMLElement>;
    getInputProps({ index }: {
        index: number;
    }): DetailedHTMLProps<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>;
};
export type UsePinInputReturn = ReturnType<typeof usePinInput>;
