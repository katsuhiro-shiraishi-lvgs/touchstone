import type { HTMLAttributes, DetailedHTMLProps, LabelHTMLAttributes, InputHTMLAttributes } from 'react';
import type { RadioProps, InputProps } from '@zag-js/radio-group/dist/radio-group.types';
import * as segmentGroup from '@zag-js/radio-group';
import { type Optional } from '../types';
export type UseSegmentGroupProps = Optional<segmentGroup.Context, 'id'> & {
    defaultValue?: segmentGroup.Context['value'];
};
export type UseSegmentGroupReturn = ReturnType<typeof useSegmentGroup>;
export declare const useSegmentGroup: (props: UseSegmentGroupProps) => {
    value: string | null;
    setValue(value: string): void;
    clearValue(): void;
    focus: () => void;
    blur(): void;
    getRadioState: <T_1 extends RadioProps>(props: T_1) => {
        isInteractive: boolean;
        isReadOnly: boolean | undefined;
        isInvalid: boolean | undefined;
        isDisabled: boolean | undefined;
        isChecked: boolean;
        isFocused: boolean;
        isHovered: boolean;
        isActive: boolean;
    };
    rootProps: HTMLAttributes<HTMLElement>;
    labelProps: HTMLAttributes<HTMLElement>;
    getRadioProps(props: RadioProps): DetailedHTMLProps<LabelHTMLAttributes<HTMLLabelElement>, HTMLLabelElement>;
    getRadioLabelProps(props: RadioProps): HTMLAttributes<HTMLElement>;
    getRadioControlProps(props: RadioProps): HTMLAttributes<HTMLElement>;
    getRadioInputProps(props: InputProps): DetailedHTMLProps<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>;
    indicatorProps: HTMLAttributes<HTMLElement>;
};
