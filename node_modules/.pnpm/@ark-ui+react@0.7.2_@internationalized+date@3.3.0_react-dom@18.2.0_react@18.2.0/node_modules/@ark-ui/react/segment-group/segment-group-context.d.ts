import type { RadioProps, InputProps } from '@zag-js/radio-group/dist/radio-group.types';
import type { Provider, HTMLAttributes, DetailedHTMLProps, LabelHTMLAttributes, InputHTMLAttributes } from 'react';
import { type UseSegmentGroupReturn } from './use-segment-group';
export type SegmentGroupContext = UseSegmentGroupReturn;
export declare const SegmentGroupProvider: Provider<{
    value: string | null;
    setValue(value: string): void;
    clearValue(): void;
    focus: () => void;
    blur(): void;
    getRadioState: <T_1 extends RadioProps>(props: T_1) => {
        isInteractive: boolean;
        isReadOnly: boolean | undefined;
        isInvalid: boolean | undefined;
        isDisabled: boolean | undefined;
        isChecked: boolean;
        isFocused: boolean;
        isHovered: boolean;
        isActive: boolean;
    };
    rootProps: HTMLAttributes<HTMLElement>;
    labelProps: HTMLAttributes<HTMLElement>;
    getRadioProps(props: RadioProps): DetailedHTMLProps<LabelHTMLAttributes<HTMLLabelElement>, HTMLLabelElement>;
    getRadioLabelProps(props: RadioProps): HTMLAttributes<HTMLElement>;
    getRadioControlProps(props: RadioProps): HTMLAttributes<HTMLElement>;
    getRadioInputProps(props: InputProps): DetailedHTMLProps<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>;
    indicatorProps: HTMLAttributes<HTMLElement>;
}>, useSegmentGroupContext: () => {
    value: string | null;
    setValue(value: string): void;
    clearValue(): void;
    focus: () => void;
    blur(): void;
    getRadioState: <T_1 extends RadioProps>(props: T_1) => {
        isInteractive: boolean;
        isReadOnly: boolean | undefined;
        isInvalid: boolean | undefined;
        isDisabled: boolean | undefined;
        isChecked: boolean;
        isFocused: boolean;
        isHovered: boolean;
        isActive: boolean;
    };
    rootProps: HTMLAttributes<HTMLElement>;
    labelProps: HTMLAttributes<HTMLElement>;
    getRadioProps(props: RadioProps): DetailedHTMLProps<LabelHTMLAttributes<HTMLLabelElement>, HTMLLabelElement>;
    getRadioLabelProps(props: RadioProps): HTMLAttributes<HTMLElement>;
    getRadioControlProps(props: RadioProps): HTMLAttributes<HTMLElement>;
    getRadioInputProps(props: InputProps): DetailedHTMLProps<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>;
    indicatorProps: HTMLAttributes<HTMLElement>;
};
