import type { HTMLAttributes, DetailedHTMLProps, LabelHTMLAttributes, InputHTMLAttributes, ButtonHTMLAttributes } from 'react';
import * as editable from '@zag-js/editable';
import { type Optional } from '../types';
export type UseEditableProps = Optional<editable.Context, 'id'> & {
    defaultValue?: editable.Context['value'];
};
export type UseEditableReturn = ReturnType<typeof useEditable>;
export declare const useEditable: (props: UseEditableProps) => {
    isEditing: boolean;
    isValueEmpty: boolean;
    value: string;
    setValue(value: string): void;
    clearValue(): void;
    edit(): void;
    cancel(): void;
    submit(): void;
    rootProps: HTMLAttributes<HTMLElement>;
    areaProps: HTMLAttributes<HTMLElement>;
    labelProps: DetailedHTMLProps<LabelHTMLAttributes<HTMLLabelElement>, HTMLLabelElement>;
    inputProps: DetailedHTMLProps<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>;
    previewProps: HTMLAttributes<HTMLElement>;
    editTriggerProps: DetailedHTMLProps<ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>;
    controlProps: HTMLAttributes<HTMLElement>;
    submitTriggerProps: DetailedHTMLProps<ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>;
    cancelTriggerProps: DetailedHTMLProps<ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>;
};
