'use strict';

Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });

const popover = require('@zag-js/popover');
const react = require('@zag-js/react');
const React = require('react');
const useLatestRef = require('../use-latest-ref.cjs');
const environmentContext = require('../environment/environment-context.cjs');

function _interopNamespaceDefault(e) {
  const n = Object.create(null, { [Symbol.toStringTag]: { value: 'Module' } });
  if (e) {
    for (const k in e) {
      if (k !== 'default') {
        const d = Object.getOwnPropertyDescriptor(e, k);
        Object.defineProperty(n, k, d.get ? d : {
          enumerable: true,
          get: () => e[k]
        });
      }
    }
  }
  n.default = e;
  return Object.freeze(n);
}

const popover__namespace = /*#__PURE__*/_interopNamespaceDefault(popover);

const usePopover = (props) => {
  const { isOpen, ...restProps } = props;
  const getRootNode = environmentContext.useEnvironmentContext();
  const context = {
    id: React.useId(),
    getRootNode,
    ...restProps
  };
  const [state, send] = react.useMachine(popover__namespace.machine(context), { context });
  const api = popover__namespace.connect(state, send, react.normalizeProps);
  const apiRef = useLatestRef.useLatestRef(api);
  React.useEffect(() => {
    if (isOpen == null) {
      return;
    }
    if (isOpen && !state.matches("open")) {
      apiRef.current.open();
    } else if (!isOpen && !state.matches("closed")) {
      apiRef.current.close();
    }
  }, [isOpen, state, apiRef]);
  return api;
};

exports.usePopover = usePopover;
