import type { JSX } from 'react/jsx-runtime';
import type { PromiseOptions, GroupProps } from '@zag-js/toast/dist/toast.types';
import * as toast from '@zag-js/toast';
import type { Provider, type PropsWithChildren } from 'react';
import { type Optional } from '../types';
type GroupPublicContext = Parameters<(typeof toast)['group']['machine']>[0];
export type ToastContext = ReturnType<(typeof toast)['group']['connect']>;
export declare const ToastContextProvider: Provider<{
    count: number;
    toasts: toast.Service[];
    toastsByPlacement: Partial<Record<toast.Placement, toast.Service[]>>;
    isVisible(id: string): boolean;
    create(options: Partial<toast.ToastOptions>): string | undefined;
    upsert(options: Partial<toast.ToastOptions>): string | undefined;
    dismiss(id?: string | undefined): void;
    remove(id?: string | undefined): void;
    dismissByPlacement(placement: toast.Placement): void;
    update(id: string, options: Partial<toast.ToastOptions>): string | undefined;
    loading(options: Partial<toast.ToastOptions>): string | undefined;
    success(options: Partial<toast.ToastOptions>): string | undefined;
    error(options: Partial<toast.ToastOptions>): string | undefined;
    promise<T_1>(promise: Promise<T_1>, options: PromiseOptions<T_1>, shared?: Partial<toast.ToastOptions> | undefined): Promise<T_1>;
    pause(id?: string | undefined): void;
    resume(id?: string | undefined): void;
    getGroupProps(options: GroupProps): {
        [x: string]: any;
    };
    subscribe(fn: (toasts: any) => void): () => void;
}>, useToast: () => {
    count: number;
    toasts: toast.Service[];
    toastsByPlacement: Partial<Record<toast.Placement, toast.Service[]>>;
    isVisible(id: string): boolean;
    create(options: Partial<toast.ToastOptions>): string | undefined;
    upsert(options: Partial<toast.ToastOptions>): string | undefined;
    dismiss(id?: string | undefined): void;
    remove(id?: string | undefined): void;
    dismissByPlacement(placement: toast.Placement): void;
    update(id: string, options: Partial<toast.ToastOptions>): string | undefined;
    loading(options: Partial<toast.ToastOptions>): string | undefined;
    success(options: Partial<toast.ToastOptions>): string | undefined;
    error(options: Partial<toast.ToastOptions>): string | undefined;
    promise<T_1>(promise: Promise<T_1>, options: PromiseOptions<T_1>, shared?: Partial<toast.ToastOptions> | undefined): Promise<T_1>;
    pause(id?: string | undefined): void;
    resume(id?: string | undefined): void;
    getGroupProps(options: GroupProps): {
        [x: string]: any;
    };
    subscribe(fn: (toasts: any) => void): () => void;
};
export type ToastProviderProps = PropsWithChildren & Optional<GroupPublicContext, 'id'>;
export declare const ToastProvider: (props: ToastProviderProps) => JSX.Element;
export {};
