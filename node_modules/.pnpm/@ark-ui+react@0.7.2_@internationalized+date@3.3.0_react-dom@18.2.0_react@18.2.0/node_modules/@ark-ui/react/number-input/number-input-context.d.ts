import type { Provider, HTMLAttributes, DetailedHTMLProps, LabelHTMLAttributes, InputHTMLAttributes, ButtonHTMLAttributes } from 'react';
import { type UseNumberInputReturn } from './use-number-input';
export type NumberInputContext = UseNumberInputReturn;
export declare const NumberInputProvider: Provider<{
    isFocused: boolean;
    isInvalid: boolean;
    isValueEmpty: boolean;
    value: string;
    valueAsNumber: number;
    setValue(value: string | number): void;
    clearValue(): void;
    increment(): void;
    decrement(): void;
    setToMax(): void;
    setToMin(): void;
    focus(): void;
    blur(): void;
    rootProps: HTMLAttributes<HTMLElement>;
    labelProps: DetailedHTMLProps<LabelHTMLAttributes<HTMLLabelElement>, HTMLLabelElement>;
    controlProps: HTMLAttributes<HTMLElement>;
    inputProps: DetailedHTMLProps<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>;
    decrementTriggerProps: DetailedHTMLProps<ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>;
    incrementTriggerProps: DetailedHTMLProps<ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>;
    scrubberProps: HTMLAttributes<HTMLElement>;
}>, useNumberInputContext: () => {
    isFocused: boolean;
    isInvalid: boolean;
    isValueEmpty: boolean;
    value: string;
    valueAsNumber: number;
    setValue(value: string | number): void;
    clearValue(): void;
    increment(): void;
    decrement(): void;
    setToMax(): void;
    setToMin(): void;
    focus(): void;
    blur(): void;
    rootProps: HTMLAttributes<HTMLElement>;
    labelProps: DetailedHTMLProps<LabelHTMLAttributes<HTMLLabelElement>, HTMLLabelElement>;
    controlProps: HTMLAttributes<HTMLElement>;
    inputProps: DetailedHTMLProps<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>;
    decrementTriggerProps: DetailedHTMLProps<ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>;
    incrementTriggerProps: DetailedHTMLProps<ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>;
    scrubberProps: HTMLAttributes<HTMLElement>;
};
