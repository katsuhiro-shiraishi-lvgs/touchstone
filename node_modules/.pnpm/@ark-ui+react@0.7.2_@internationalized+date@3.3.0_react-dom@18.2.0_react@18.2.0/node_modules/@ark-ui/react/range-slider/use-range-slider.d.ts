import type { DetailedHTMLProps, LabelHTMLAttributes, HTMLAttributes, OutputHTMLAttributes, InputHTMLAttributes } from 'react';
import * as rangeSlider from '@zag-js/range-slider';
import { type Optional } from '../types';
export type UseRangeSliderProps = Optional<rangeSlider.Context, 'id'> & {
    defaultValue?: rangeSlider.Context['value'];
};
export type UseRangeSliderReturn = ReturnType<typeof useRangeSlider>;
export declare const useRangeSlider: (props: UseRangeSliderProps) => {
    value: number[];
    isDragging: boolean;
    isFocused: boolean;
    setValue(value: number[]): void;
    getThumbValue(index: number): number;
    setThumbValue(index: number, value: number): void;
    getValuePercent: (value: number) => number;
    getPercentValue: (percent: number) => number;
    getThumbPercent(index: number): number;
    setThumbPercent(index: number, percent: number): void;
    getThumbMin(index: number): number;
    getThumbMax(index: number): number;
    increment(index: number): void;
    decrement(index: number): void;
    focus(): void;
    labelProps: DetailedHTMLProps<LabelHTMLAttributes<HTMLLabelElement>, HTMLLabelElement>;
    rootProps: HTMLAttributes<HTMLElement>;
    outputProps: DetailedHTMLProps<OutputHTMLAttributes<HTMLOutputElement>, HTMLOutputElement>;
    trackProps: HTMLAttributes<HTMLElement>;
    getThumbProps(index: number): HTMLAttributes<HTMLElement>;
    getHiddenInputProps(index: number): DetailedHTMLProps<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>;
    rangeProps: HTMLAttributes<HTMLElement>;
    controlProps: HTMLAttributes<HTMLElement>;
    markerGroupProps: HTMLAttributes<HTMLElement>;
    getMarkerProps({ value }: {
        value: number;
    }): HTMLAttributes<HTMLElement>;
};
