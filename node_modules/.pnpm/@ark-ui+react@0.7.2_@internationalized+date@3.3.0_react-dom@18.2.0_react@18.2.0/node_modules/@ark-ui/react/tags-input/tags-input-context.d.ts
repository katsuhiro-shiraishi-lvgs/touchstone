import type { TagProps } from '@zag-js/tags-input/dist/tags-input.types';
import type { Provider, HTMLAttributes, DetailedHTMLProps, LabelHTMLAttributes, InputHTMLAttributes, ButtonHTMLAttributes } from 'react';
import { type UseTagsInputReturn } from './use-tags-input';
export type TagsInputContext = UseTagsInputReturn;
export declare const TagsInputProvider: Provider<{
    isEmpty: boolean;
    inputValue: string;
    value: string[];
    valueAsString: string;
    count: number;
    isAtMax: boolean;
    setValue(value: string[]): void;
    clearValue(id?: string | undefined): void;
    addValue(value: string): void;
    setValueAtIndex(index: number, value: string): void;
    setInputValue(value: string): void;
    clearInputValue(): void;
    focus(): void;
    rootProps: HTMLAttributes<HTMLElement>;
    labelProps: DetailedHTMLProps<LabelHTMLAttributes<HTMLLabelElement>, HTMLLabelElement>;
    controlProps: HTMLAttributes<HTMLElement>;
    inputProps: DetailedHTMLProps<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>;
    hiddenInputProps: DetailedHTMLProps<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>;
    getTagProps(options: TagProps): HTMLAttributes<HTMLElement>;
    getTagInputProps(options: TagProps): DetailedHTMLProps<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>;
    getTagDeleteTriggerProps(options: TagProps): DetailedHTMLProps<ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>;
    clearTriggerProps: DetailedHTMLProps<ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>;
}>, useTagsInputContext: () => {
    isEmpty: boolean;
    inputValue: string;
    value: string[];
    valueAsString: string;
    count: number;
    isAtMax: boolean;
    setValue(value: string[]): void;
    clearValue(id?: string | undefined): void;
    addValue(value: string): void;
    setValueAtIndex(index: number, value: string): void;
    setInputValue(value: string): void;
    clearInputValue(): void;
    focus(): void;
    rootProps: HTMLAttributes<HTMLElement>;
    labelProps: DetailedHTMLProps<LabelHTMLAttributes<HTMLLabelElement>, HTMLLabelElement>;
    controlProps: HTMLAttributes<HTMLElement>;
    inputProps: DetailedHTMLProps<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>;
    hiddenInputProps: DetailedHTMLProps<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>;
    getTagProps(options: TagProps): HTMLAttributes<HTMLElement>;
    getTagInputProps(options: TagProps): DetailedHTMLProps<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>;
    getTagDeleteTriggerProps(options: TagProps): DetailedHTMLProps<ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>;
    clearTriggerProps: DetailedHTMLProps<ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>;
};
