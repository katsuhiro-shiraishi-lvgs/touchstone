import type { TagProps } from '@zag-js/tags-input/dist/tags-input.types';
import type { HTMLAttributes, DetailedHTMLProps, LabelHTMLAttributes, InputHTMLAttributes, ButtonHTMLAttributes } from 'react';
import * as tagsInput from '@zag-js/tags-input';
import { type Optional } from '../types';
export type UseTagsInputProps = Optional<tagsInput.Context, 'id'> & {
    defaultValue?: tagsInput.Context['value'];
};
export declare const useTagsInput: (props: UseTagsInputProps) => {
    isEmpty: boolean;
    inputValue: string;
    value: string[];
    valueAsString: string;
    count: number;
    isAtMax: boolean;
    setValue(value: string[]): void;
    clearValue(id?: string | undefined): void;
    addValue(value: string): void;
    setValueAtIndex(index: number, value: string): void;
    setInputValue(value: string): void;
    clearInputValue(): void;
    focus(): void;
    rootProps: HTMLAttributes<HTMLElement>;
    labelProps: DetailedHTMLProps<LabelHTMLAttributes<HTMLLabelElement>, HTMLLabelElement>;
    controlProps: HTMLAttributes<HTMLElement>;
    inputProps: DetailedHTMLProps<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>;
    hiddenInputProps: DetailedHTMLProps<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>;
    getTagProps(options: TagProps): HTMLAttributes<HTMLElement>;
    getTagInputProps(options: TagProps): DetailedHTMLProps<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>;
    getTagDeleteTriggerProps(options: TagProps): DetailedHTMLProps<ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>;
    clearTriggerProps: DetailedHTMLProps<ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>;
};
export type UseTagsInputReturn = ReturnType<typeof useTagsInput>;
