import type { OptionData, OptionProps, OptionGroupProps } from '@zag-js/combobox';
import type { Provider, HTMLAttributes, DetailedHTMLProps, LabelHTMLAttributes, InputHTMLAttributes, ButtonHTMLAttributes } from 'react';
import { type UseComboboxReturn } from './use-combobox';
export type ComboboxContext = UseComboboxReturn;
export declare const ComboboxProvider: Provider<{
    isFocused: boolean;
    isOpen: boolean;
    isInputValueEmpty: boolean;
    inputValue: string;
    focusedOption: OptionData | null;
    selectedValue: string | undefined;
    setValue(value: string | OptionData): void;
    setInputValue(value: string): void;
    clearValue(): void;
    focus(): void;
    rootProps: HTMLAttributes<HTMLElement>;
    labelProps: DetailedHTMLProps<LabelHTMLAttributes<HTMLLabelElement>, HTMLLabelElement>;
    controlProps: HTMLAttributes<HTMLElement>;
    positionerProps: HTMLAttributes<HTMLElement>;
    inputProps: DetailedHTMLProps<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>;
    triggerProps: DetailedHTMLProps<ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>;
    contentProps: HTMLAttributes<HTMLElement>;
    clearTriggerProps: DetailedHTMLProps<ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>;
    getOptionState(props: OptionProps): {
        disabled: boolean | undefined;
        focused: boolean;
        checked: boolean;
    };
    getOptionProps(props: OptionProps): HTMLAttributes<HTMLElement>;
    getOptionGroupProps(props: OptionGroupProps): HTMLAttributes<HTMLElement>;
}>, useComboboxContext: () => {
    isFocused: boolean;
    isOpen: boolean;
    isInputValueEmpty: boolean;
    inputValue: string;
    focusedOption: OptionData | null;
    selectedValue: string | undefined;
    setValue(value: string | OptionData): void;
    setInputValue(value: string): void;
    clearValue(): void;
    focus(): void;
    rootProps: HTMLAttributes<HTMLElement>;
    labelProps: DetailedHTMLProps<LabelHTMLAttributes<HTMLLabelElement>, HTMLLabelElement>;
    controlProps: HTMLAttributes<HTMLElement>;
    positionerProps: HTMLAttributes<HTMLElement>;
    inputProps: DetailedHTMLProps<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>;
    triggerProps: DetailedHTMLProps<ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>;
    contentProps: HTMLAttributes<HTMLElement>;
    clearTriggerProps: DetailedHTMLProps<ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>;
    getOptionState(props: OptionProps): {
        disabled: boolean | undefined;
        focused: boolean;
        checked: boolean;
    };
    getOptionProps(props: OptionProps): HTMLAttributes<HTMLElement>;
    getOptionGroupProps(props: OptionGroupProps): HTMLAttributes<HTMLElement>;
};
