import type { HTMLAttributes, DetailedHTMLProps, LabelHTMLAttributes, InputHTMLAttributes, ButtonHTMLAttributes } from 'react';
import * as combobox from '@zag-js/combobox';
import { type Optional } from '../types';
export type UseComboboxProps = Optional<combobox.Context, 'id'>;
export declare const useCombobox: (props: UseComboboxProps) => {
    isFocused: boolean;
    isOpen: boolean;
    isInputValueEmpty: boolean;
    inputValue: string;
    focusedOption: combobox.OptionData | null;
    selectedValue: string | undefined;
    setValue(value: string | combobox.OptionData): void;
    setInputValue(value: string): void;
    clearValue(): void;
    focus(): void;
    rootProps: HTMLAttributes<HTMLElement>;
    labelProps: DetailedHTMLProps<LabelHTMLAttributes<HTMLLabelElement>, HTMLLabelElement>;
    controlProps: HTMLAttributes<HTMLElement>;
    positionerProps: HTMLAttributes<HTMLElement>;
    inputProps: DetailedHTMLProps<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>;
    triggerProps: DetailedHTMLProps<ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>;
    contentProps: HTMLAttributes<HTMLElement>;
    clearTriggerProps: DetailedHTMLProps<ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>;
    getOptionState(props: combobox.OptionProps): {
        disabled: boolean | undefined;
        focused: boolean;
        checked: boolean;
    };
    getOptionProps(props: combobox.OptionProps): HTMLAttributes<HTMLElement>;
    getOptionGroupProps(props: combobox.OptionGroupProps): HTMLAttributes<HTMLElement>;
};
export type UseComboboxReturn = ReturnType<typeof useCombobox>;
