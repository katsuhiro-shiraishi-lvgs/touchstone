import type { PaginationRange, EllipsisProps, PageTriggerProps } from '@zag-js/pagination/dist/pagination.types';
import type { Provider, HTMLAttributes } from 'react';
import { type UsePaginationReturn } from './use-pagination';
export type PaginationContext = UsePaginationReturn;
export declare const PaginationProvider: Provider<{
    page: number;
    totalPages: number;
    pages: PaginationRange;
    previousPage: number | null;
    nextPage: number | null;
    pageRange: {
        start: number;
        end: number;
    };
    slice<T_1>(data: T_1[]): T_1[];
    isFirstPage: boolean;
    isLastPage: boolean;
    setCount(count: number): void;
    setPageSize(size: number): void;
    setPage(page: number): void;
    rootProps: HTMLAttributes<HTMLElement>;
    getEllipsisProps(props: EllipsisProps): HTMLAttributes<HTMLElement>;
    getPageTriggerProps(page: PageTriggerProps): HTMLAttributes<HTMLElement>;
    prevPageTriggerProps: HTMLAttributes<HTMLElement>;
    nextPageTriggerProps: HTMLAttributes<HTMLElement>;
}>, usePaginationContext: () => {
    page: number;
    totalPages: number;
    pages: PaginationRange;
    previousPage: number | null;
    nextPage: number | null;
    pageRange: {
        start: number;
        end: number;
    };
    slice<T_1>(data: T_1[]): T_1[];
    isFirstPage: boolean;
    isLastPage: boolean;
    setCount(count: number): void;
    setPageSize(size: number): void;
    setPage(page: number): void;
    rootProps: HTMLAttributes<HTMLElement>;
    getEllipsisProps(props: EllipsisProps): HTMLAttributes<HTMLElement>;
    getPageTriggerProps(page: PageTriggerProps): HTMLAttributes<HTMLElement>;
    prevPageTriggerProps: HTMLAttributes<HTMLElement>;
    nextPageTriggerProps: HTMLAttributes<HTMLElement>;
};
