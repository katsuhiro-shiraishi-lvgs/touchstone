'use strict';

Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });

const domEvent = require('@zag-js/dom-event');
const domQuery = require('@zag-js/dom-query');
const pressable_dom = require('./pressable.dom.js');
const pressable_utils = require('./pressable.utils.js');

function connect(state, send, normalize) {
  const isPressed = state.hasTag("pressed");
  const isDisabled = state.context.disabled;
  return {
    /**
     * Whether the element is pressed.
     */
    isPressed,
    pressableProps: normalize.element({
      id: pressable_dom.dom.getPressableId(state.context),
      "data-disabled": domQuery.dataAttr(isDisabled),
      "data-pressed": domQuery.dataAttr(isPressed),
      onKeyDown(event) {
        const evt = domEvent.getNativeEvent(event);
        if (!pressable_utils.isValidKeyboardEvent(evt))
          return;
        if (!domQuery.contains(event.currentTarget, event.target))
          return;
        if (!event.repeat) {
          const currentTarget = event.currentTarget;
          send({ type: "KEY_DOWN", currentTarget, pointerType: "keyboard" });
        }
        if (pressable_utils.shouldPreventDefaultKeyboard(event.target)) {
          event.preventDefault();
        }
      },
      onClick(event) {
        const evt = domEvent.getNativeEvent(event);
        if (!domQuery.contains(event.currentTarget, event.target) || event.button !== 0)
          return;
        const ctx = state.context;
        if (ctx.disabled) {
          event.preventDefault();
        }
        const isVirtual = ctx.pointerType === "virtual" || domEvent.isVirtualClick(evt);
        if (!ctx.ignoreClickAfterPress && isVirtual) {
          const currentTarget = event.currentTarget;
          send({ type: "CLICK", currentTarget, pointerType: "virtual" });
        }
      },
      onPointerDown(event) {
        if (isDisabled)
          return;
        if (event.button !== 0 || !domQuery.contains(event.currentTarget, event.target)) {
          return;
        }
        if (pressable_utils.shouldPreventDefault(event.currentTarget)) {
          event.preventDefault();
        }
        const evt = domEvent.getNativeEvent(event);
        const pointerType = domEvent.isVirtualPointerEvent(evt) ? "virtual" : event.pointerType;
        const pointerId = evt.pointerId;
        const currentTarget = event.currentTarget;
        send({ type: "POINTER_DOWN", currentTarget, pointerType, pointerId });
      },
      onMouseDown(event) {
        if (event.button !== 0)
          return;
        if (pressable_utils.shouldPreventDefault(event.currentTarget)) {
          event.preventDefault();
        }
      },
      onDragStart(event) {
        const currentTarget = event.currentTarget;
        send({ type: "DRAG_START", currentTarget });
      }
    })
  };
}

exports.connect = connect;
