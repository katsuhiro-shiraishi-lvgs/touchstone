import type { MachineContext as Ctx } from "./menu.types";
export declare const dom: {
    getRootNode: (ctx: {
        getRootNode?: (() => Node | ShadowRoot | Document) | undefined;
    }) => ShadowRoot | Document;
    getDoc: (ctx: {
        getRootNode?: (() => Node | ShadowRoot | Document) | undefined;
    }) => Document;
    getWin: (ctx: {
        getRootNode?: (() => Node | ShadowRoot | Document) | undefined;
    }) => Window & typeof globalThis;
    getActiveElement: (ctx: {
        getRootNode?: (() => Node | ShadowRoot | Document) | undefined;
    }) => HTMLElement | null;
    getById: <T extends HTMLElement = HTMLElement>(ctx: {
        getRootNode?: (() => Node | ShadowRoot | Document) | undefined;
    }, id: string) => T | null;
    queryById: <T_1 extends HTMLElement = HTMLElement>(ctx: {
        getRootNode?: (() => Node | ShadowRoot | Document) | undefined;
    }, id: string) => T_1;
} & {
    getTriggerId: (ctx: Ctx) => string;
    getContextTriggerId: (ctx: Ctx) => string;
    getContentId: (ctx: Ctx) => string;
    getArrowId: (ctx: Ctx) => string;
    getPositionerId: (ctx: Ctx) => string;
    getGroupId: (ctx: Ctx, id: string) => string;
    getGroupLabelId: (ctx: Ctx, id: string) => string;
    getContentEl: (ctx: Ctx) => HTMLElement | null;
    getPositionerEl: (ctx: Ctx) => HTMLElement | null;
    getTriggerEl: (ctx: Ctx) => HTMLElement | null;
    getFocusedItem: (ctx: Ctx) => HTMLElement | null;
    getArrowEl: (ctx: Ctx) => HTMLElement | null;
    getElements: (ctx: Ctx) => HTMLElement[];
    getFirstEl: (ctx: Ctx) => HTMLElement | undefined;
    getLastEl: (ctx: Ctx) => HTMLElement | undefined;
    getNextEl: (ctx: Ctx, loop?: boolean) => HTMLElement;
    getPrevEl: (ctx: Ctx, loop?: boolean) => HTMLElement | null;
    getElemByKey: (ctx: Ctx, key: string) => HTMLElement | undefined;
    isTargetDisabled: (v: EventTarget | null) => boolean;
    isTriggerItem: (el: HTMLElement | null) => boolean;
};
