import { createScope, queryAll, nextById, prevById, getByTypeahead, isHTMLElement } from '@zag-js/dom-query';
import { first, last } from '@zag-js/utils';

const dom = createScope({
  getTriggerId: (ctx) => ctx.ids?.trigger ?? `menu:${ctx.id}:trigger`,
  getContextTriggerId: (ctx) => ctx.ids?.contextTrigger ?? `menu:${ctx.id}:ctx-trigger`,
  getContentId: (ctx) => ctx.ids?.content ?? `menu:${ctx.id}:content`,
  getArrowId: (ctx) => ctx.ids?.arrow ?? `menu:${ctx.id}:arrow`,
  getPositionerId: (ctx) => ctx.ids?.positioner ?? `menu:${ctx.id}:popper`,
  getGroupId: (ctx, id) => ctx.ids?.group?.(id) ?? `menu:${ctx.id}:group:${id}`,
  getGroupLabelId: (ctx, id) => ctx.ids?.label?.(id) ?? `menu:${ctx.id}:label:${id}`,
  getContentEl: (ctx) => dom.getById(ctx, dom.getContentId(ctx)),
  getPositionerEl: (ctx) => dom.getById(ctx, dom.getPositionerId(ctx)),
  getTriggerEl: (ctx) => dom.getById(ctx, dom.getTriggerId(ctx)),
  getFocusedItem: (ctx) => ctx.highlightedId ? dom.getById(ctx, ctx.highlightedId) : null,
  getArrowEl: (ctx) => dom.getById(ctx, dom.getArrowId(ctx)),
  getElements: (ctx) => {
    const ownerId = CSS.escape(dom.getContentId(ctx));
    const selector = `[role^="menuitem"][data-ownedby=${ownerId}]:not([data-disabled])`;
    return queryAll(dom.getContentEl(ctx), selector);
  },
  getFirstEl: (ctx) => first(dom.getElements(ctx)),
  getLastEl: (ctx) => last(dom.getElements(ctx)),
  getNextEl: (ctx, loop) => nextById(dom.getElements(ctx), ctx.highlightedId, loop ?? ctx.loop),
  getPrevEl: (ctx, loop) => prevById(dom.getElements(ctx), ctx.highlightedId, loop ?? ctx.loop),
  getElemByKey: (ctx, key) => getByTypeahead(dom.getElements(ctx), { state: ctx.typeahead, key, activeId: ctx.highlightedId }),
  isTargetDisabled: (v) => {
    return isHTMLElement(v) && v.dataset.disabled === "";
  },
  isTriggerItem: (el) => {
    return !!el?.getAttribute("role")?.startsWith("menuitem") && !!el?.hasAttribute("aria-controls");
  }
});

export { dom };
