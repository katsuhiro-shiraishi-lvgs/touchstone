'use strict';

Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });

const core = require('@zag-js/core');
const formUtils = require('@zag-js/form-utils');
const utils = require('@zag-js/utils');
const checkbox_dom = require('./checkbox.dom.js');

function machine(userContext) {
  const ctx = utils.compact(userContext);
  return core.createMachine(
    {
      id: "checkbox",
      initial: "ready",
      context: {
        checked: false,
        value: "on",
        ...ctx
      },
      watch: {
        disabled: "removeFocusIfNeeded",
        checked: ["invokeOnChange", "syncInputElement"]
      },
      activities: ["trackFormControlState"],
      on: {
        "CHECKED.TOGGLE": {
          actions: ["toggleChecked"]
        },
        "CHECKED.SET": {
          actions: ["setChecked"]
        },
        "DISPATCH.CHANGE": {
          actions: ["dispatchCheckedEvent"]
        },
        "CONTEXT.SET": {
          actions: ["setContext"]
        }
      },
      computed: {
        isIndeterminate: (ctx2) => isIndeterminate(ctx2.checked),
        isChecked: (ctx2) => ctx2.isIndeterminate ? false : !!ctx2.checked
      },
      states: {
        ready: {}
      }
    },
    {
      activities: {
        trackFormControlState(ctx2, _evt, { send, initialContext }) {
          return formUtils.trackFormControl(checkbox_dom.dom.getInputEl(ctx2), {
            onFieldsetDisabled() {
              ctx2.disabled = true;
            },
            onFormReset() {
              send({ type: "CHECKED.SET", checked: !!initialContext.checked });
            }
          });
        }
      },
      actions: {
        invokeOnChange(ctx2) {
          ctx2.onChange?.({ checked: ctx2.checked });
        },
        setContext(ctx2, evt) {
          Object.assign(ctx2, evt.context);
        },
        syncInputElement(ctx2) {
          const inputEl = checkbox_dom.dom.getInputEl(ctx2);
          inputEl.checked = ctx2.isChecked;
          inputEl.indeterminate = ctx2.isIndeterminate;
        },
        dispatchCheckedEvent(ctx2, evt) {
          const inputEl = checkbox_dom.dom.getInputEl(ctx2);
          const checked = isIndeterminate(evt.checked) ? false : evt.checked;
          formUtils.dispatchInputCheckedEvent(inputEl, { checked, bubbles: true });
        },
        removeFocusIfNeeded(ctx2) {
          if (ctx2.disabled && ctx2.focused) {
            ctx2.focused = false;
          }
        },
        setChecked(ctx2, evt) {
          ctx2.checked = evt.checked;
        },
        toggleChecked(ctx2) {
          ctx2.checked = isIndeterminate(ctx2.checked) ? true : !ctx2.checked;
        }
      }
    }
  );
}
function isIndeterminate(checked) {
  return checked === "indeterminate";
}

exports.machine = machine;
