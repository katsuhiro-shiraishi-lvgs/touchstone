'use strict';

Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });

const domQuery = require('@zag-js/dom-query');
const interactOutside = require('@zag-js/interact-outside');
const utils = require('@zag-js/utils');
const escapeKeydown = require('./escape-keydown.js');
const layerStack = require('./layer-stack.js');
const pointerEventOutside = require('./pointer-event-outside.js');

function trackDismissableElementImpl(node, options) {
  if (!node) {
    utils.warn("[@zag-js/dismissable] node is `null` or `undefined`");
    return;
  }
  const { onDismiss, pointerBlocking, exclude: excludeContainers, debug } = options;
  const layer = { dismiss: onDismiss, node, pointerBlocking };
  layerStack.layerStack.add(layer);
  pointerEventOutside.assignPointerEventToLayers();
  function onPointerDownOutside(event) {
    const target = domQuery.getEventTarget(event.detail.originalEvent);
    if (layerStack.layerStack.isBelowPointerBlockingLayer(node) || layerStack.layerStack.isInBranch(target))
      return;
    options.onPointerDownOutside?.(event);
    options.onInteractOutside?.(event);
    if (event.defaultPrevented)
      return;
    if (debug) {
      console.log("onPointerDownOutside:", event.detail.originalEvent);
    }
    onDismiss?.();
  }
  function onFocusOutside(event) {
    const target = domQuery.getEventTarget(event.detail.originalEvent);
    if (layerStack.layerStack.isInBranch(target))
      return;
    options.onFocusOutside?.(event);
    options.onInteractOutside?.(event);
    if (event.defaultPrevented)
      return;
    if (debug) {
      console.log("onFocusOutside:", event.detail.originalEvent);
    }
    onDismiss?.();
  }
  function onEscapeKeyDown(event) {
    if (!layerStack.layerStack.isTopMost(node))
      return;
    options.onEscapeKeyDown?.(event);
    if (!event.defaultPrevented && onDismiss) {
      event.preventDefault();
      onDismiss();
    }
  }
  function exclude(target) {
    if (!node)
      return false;
    const containers = typeof excludeContainers === "function" ? excludeContainers() : excludeContainers;
    const _containers = Array.isArray(containers) ? containers : [containers];
    return _containers.some((node2) => domQuery.contains(node2, target)) || layerStack.layerStack.isInNestedLayer(node, target);
  }
  const cleanups = [
    pointerBlocking ? pointerEventOutside.disablePointerEventsOutside(node) : void 0,
    escapeKeydown.trackEscapeKeydown(node, onEscapeKeyDown),
    interactOutside.trackInteractOutside(node, { exclude, onFocusOutside, onPointerDownOutside })
  ];
  return () => {
    layerStack.layerStack.remove(node);
    pointerEventOutside.assignPointerEventToLayers();
    pointerEventOutside.clearPointerEvent(node);
    cleanups.forEach((fn) => fn?.());
  };
}
function trackDismissableElement(nodeOrFn, options) {
  const { defer } = options;
  const func = defer ? domQuery.raf : (v) => v();
  const cleanups = [];
  cleanups.push(
    func(() => {
      const node = typeof nodeOrFn === "function" ? nodeOrFn() : nodeOrFn;
      cleanups.push(trackDismissableElementImpl(node, options));
    })
  );
  return () => {
    cleanups.forEach((fn) => fn?.());
  };
}

exports.trackDismissableElement = trackDismissableElement;
