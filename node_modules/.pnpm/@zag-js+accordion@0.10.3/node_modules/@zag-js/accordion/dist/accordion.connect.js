'use strict';

Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });

const domEvent = require('@zag-js/dom-event');
const domQuery = require('@zag-js/dom-query');
const accordion_anatomy = require('./accordion.anatomy.js');
const accordion_dom = require('./accordion.dom.js');
const accordion_reducer = require('./accordion.reducer.js');

function connect(state, send, normalize) {
  const reducer = accordion_reducer.createReducer(state, send);
  return {
    ...reducer,
    rootProps: normalize.element({
      ...accordion_anatomy.parts.root.attrs,
      id: accordion_dom.dom.getRootId(state.context)
    }),
    getItemProps(props) {
      const { isOpen, isFocused } = reducer.getItemState(props);
      return normalize.element({
        ...accordion_anatomy.parts.item.attrs,
        id: accordion_dom.dom.getItemId(state.context, props.value),
        "data-expanded": domQuery.dataAttr(isOpen),
        "data-focus": domQuery.dataAttr(isFocused)
      });
    },
    getContentProps(props) {
      const { isOpen, isFocused, isDisabled } = reducer.getItemState(props);
      return normalize.element({
        ...accordion_anatomy.parts.content.attrs,
        role: "region",
        id: accordion_dom.dom.getContentId(state.context, props.value),
        "aria-labelledby": accordion_dom.dom.getTriggerId(state.context, props.value),
        hidden: !isOpen,
        "data-disabled": domQuery.dataAttr(isDisabled),
        "data-focus": domQuery.dataAttr(isFocused),
        "data-expanded": domQuery.dataAttr(isOpen)
      });
    },
    getTriggerProps(props) {
      const { value } = props;
      const itemState = reducer.getItemState(props);
      return normalize.button({
        ...accordion_anatomy.parts.trigger.attrs,
        type: "button",
        id: accordion_dom.dom.getTriggerId(state.context, value),
        "aria-controls": accordion_dom.dom.getContentId(state.context, value),
        "aria-expanded": itemState.isOpen,
        disabled: itemState.isDisabled,
        "aria-disabled": itemState.isDisabled,
        "data-expanded": domQuery.dataAttr(itemState.isOpen),
        "data-ownedby": accordion_dom.dom.getRootId(state.context),
        onFocus() {
          if (itemState.isDisabled)
            return;
          send({ type: "TRIGGER.FOCUS", value });
        },
        onBlur() {
          if (itemState.isDisabled)
            return;
          send("TRIGGER.BLUR");
        },
        onClick(event) {
          if (itemState.isDisabled)
            return;
          if (domQuery.isSafari()) {
            event.currentTarget.focus();
          }
          send({ type: "TRIGGER.CLICK", value });
        },
        onKeyDown(event) {
          if (itemState.isDisabled)
            return;
          const keyMap = {
            ArrowDown() {
              if (state.context.isHorizontal)
                return;
              send({ type: "GOTO.NEXT", value });
            },
            ArrowUp() {
              if (state.context.isHorizontal)
                return;
              send({ type: "GOTO.PREV", value });
            },
            ArrowRight() {
              if (!state.context.isHorizontal)
                return;
              send({ type: "GOTO.NEXT", value });
            },
            ArrowLeft() {
              if (!state.context.isHorizontal)
                return;
              send({ type: "GOTO.PREV", value });
            },
            Home() {
              send({ type: "GOTO.FIRST", value });
            },
            End() {
              send({ type: "GOTO.LAST", value });
            }
          };
          const key = domEvent.getEventKey(event, {
            dir: state.context.dir,
            orientation: state.context.orientation
          });
          const exec = keyMap[key];
          if (exec) {
            exec(event);
            event.preventDefault();
          }
        }
      });
    }
  };
}

exports.connect = connect;
