'use strict';

Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });

const domQuery = require('@zag-js/dom-query');
const visuallyHidden = require('@zag-js/visually-hidden');
const switch_anatomy = require('./switch.anatomy.js');
const switch_dom = require('./switch.dom.js');

function connect(state, send, normalize) {
  const isDisabled = state.context.disabled;
  const isFocusable = state.context.focusable;
  const isFocused = !isDisabled && state.context.focused;
  const isChecked = state.context.checked;
  const dataAttrs = {
    "data-active": domQuery.dataAttr(state.context.active),
    "data-focus": domQuery.dataAttr(isFocused),
    "data-hover": domQuery.dataAttr(state.context.hovered),
    "data-disabled": domQuery.dataAttr(isDisabled),
    "data-checked": domQuery.dataAttr(state.context.checked),
    "data-invalid": domQuery.dataAttr(state.context.invalid)
  };
  const trulyDisabled = isDisabled && !isFocusable;
  return {
    /**
     * Whether the checkbox is checked
     */
    isChecked,
    /**
     * Whether the checkbox is disabled
     */
    isDisabled,
    /**
     * Whether the checkbox is focused
     */
    isFocused,
    /**
     * Function to set the checked state of the switch.
     */
    setChecked(checked) {
      send({ type: "DISPATCH.CHANGE", checked });
    },
    /**
     * Function to toggle the checked state of the checkbox
     */
    toggleChecked() {
      send({ type: "CHECKED.TOGGLE", checked: isChecked });
    },
    rootProps: normalize.label({
      ...switch_anatomy.parts.root.attrs,
      ...dataAttrs,
      id: switch_dom.dom.getRootId(state.context),
      htmlFor: switch_dom.dom.getInputId(state.context),
      onPointerMove() {
        if (isDisabled)
          return;
        send({ type: "CONTEXT.SET", context: { hovered: true } });
      },
      onPointerLeave() {
        if (isDisabled)
          return;
        send({ type: "CONTEXT.SET", context: { hovered: false } });
      },
      onPointerDown(event) {
        if (isDisabled)
          return;
        if (isFocused)
          event.preventDefault();
        send({ type: "CONTEXT.SET", context: { active: true } });
      },
      onPointerUp() {
        if (isDisabled)
          return;
        send({ type: "CONTEXT.SET", context: { active: false } });
      },
      onClick(event) {
        if (event.target === switch_dom.dom.getInputEl(state.context)) {
          event.stopPropagation();
        }
      }
    }),
    labelProps: normalize.element({
      ...switch_anatomy.parts.label.attrs,
      ...dataAttrs,
      id: switch_dom.dom.getLabelId(state.context)
    }),
    thumbProps: normalize.element({
      ...switch_anatomy.parts.thumb.attrs,
      ...dataAttrs,
      id: switch_dom.dom.getThumbId(state.context),
      "aria-hidden": true
    }),
    controlProps: normalize.element({
      ...switch_anatomy.parts.control.attrs,
      ...dataAttrs,
      id: switch_dom.dom.getControlId(state.context),
      "aria-hidden": true
    }),
    inputProps: normalize.input({
      ...switch_anatomy.parts.input.attrs,
      id: switch_dom.dom.getInputId(state.context),
      type: "checkbox",
      required: state.context.required,
      defaultChecked: isChecked,
      "data-focus": domQuery.dataAttr(isFocused),
      "data-hover": domQuery.dataAttr(state.context.hovered),
      disabled: trulyDisabled,
      "data-disabled": domQuery.dataAttr(isDisabled),
      "aria-labelledby": switch_dom.dom.getLabelId(state.context),
      "aria-invalid": state.context.invalid,
      name: state.context.name,
      form: state.context.form,
      value: state.context.value,
      style: visuallyHidden.visuallyHiddenStyle,
      onChange(event) {
        const checked = event.currentTarget.checked;
        send({ type: "CHECKED.SET", checked });
      },
      onBlur() {
        send({ type: "CONTEXT.SET", context: { focused: false } });
      },
      onFocus() {
        send({ type: "CONTEXT.SET", context: { focused: true } });
      },
      onKeyDown(event) {
        if (event.key === " ") {
          send({ type: "CONTEXT.SET", context: { active: true } });
        }
      },
      onKeyUp(event) {
        if (event.key === " ") {
          send({ type: "CONTEXT.SET", context: { active: false } });
        }
      }
    })
  };
}

exports.connect = connect;
