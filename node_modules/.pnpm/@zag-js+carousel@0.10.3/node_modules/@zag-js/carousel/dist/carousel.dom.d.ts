import type { MachineContext as Ctx } from "./carousel.types";
export declare const dom: {
    getRootNode: (ctx: {
        getRootNode?: (() => Node | ShadowRoot | Document) | undefined;
    }) => ShadowRoot | Document;
    getDoc: (ctx: {
        getRootNode?: (() => Node | ShadowRoot | Document) | undefined;
    }) => Document;
    getWin: (ctx: {
        getRootNode?: (() => Node | ShadowRoot | Document) | undefined;
    }) => Window & typeof globalThis;
    getActiveElement: (ctx: {
        getRootNode?: (() => Node | ShadowRoot | Document) | undefined;
    }) => HTMLElement | null;
    getById: <T extends HTMLElement = HTMLElement>(ctx: {
        getRootNode?: (() => Node | ShadowRoot | Document) | undefined;
    }, id: string) => T | null;
    queryById: <T_1 extends HTMLElement = HTMLElement>(ctx: {
        getRootNode?: (() => Node | ShadowRoot | Document) | undefined;
    }, id: string) => T_1;
} & {
    getRootId: (ctx: Ctx) => string;
    getViewportId: (ctx: Ctx) => string;
    getSlideId: (ctx: Ctx, index: number) => string;
    getSlideGroupId: (ctx: Ctx) => string;
    getNextTriggerId: (ctx: Ctx) => string;
    getPrevTriggerId: (ctx: Ctx) => string;
    getIndicatorGroupId: (ctx: Ctx) => string;
    getIndicatorId: (ctx: Ctx, index: number) => string;
    getRootEl: (ctx: Ctx) => HTMLElement;
    getViewportEl: (ctx: Ctx) => HTMLElement;
    getSlideGroupEl: (ctx: Ctx) => HTMLElement;
    getSlideEls: (ctx: Ctx) => HTMLElement[];
};
