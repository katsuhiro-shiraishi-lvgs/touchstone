'use strict';

Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });

const domQuery = require('@zag-js/dom-query');
const pagination_anatomy = require('./pagination.anatomy.js');
const pagination_dom = require('./pagination.dom.js');
const pagination_utils = require('./pagination.utils.js');

function connect(state, send, normalize) {
  const totalPages = state.context.totalPages;
  const page = state.context.page;
  const translations = state.context.translations;
  const previousPage = state.context.previousPage;
  const nextPage = state.context.nextPage;
  const pageRange = state.context.pageRange;
  const type = state.context.type;
  const isButton = type === "button";
  const isFirstPage = page === 1;
  const isLastPage = page === totalPages;
  return {
    /**
     * The current page.
     */
    page,
    /**
     * The total number of pages.
     */
    totalPages,
    /**
     * The page range. Represented as an array of page numbers (including ellipsis)
     */
    pages: pagination_utils.utils.getRange(state.context),
    /**
     * The previous page.
     */
    previousPage,
    /**
     * The next page.
     */
    nextPage,
    /**
     * The page range. Represented as an object with `start` and `end` properties.
     */
    pageRange,
    /**
     * Function to slice an array of data based on the current page.
     */
    slice(data) {
      return data.slice(pageRange.start, pageRange.end);
    },
    /**
     * Whether the current page is the first page.
     */
    isFirstPage,
    /**
     * Whether the current page is the last page.
     */
    isLastPage,
    /**
     * Function to set the total number of pages.
     */
    setCount(count) {
      send({ type: "SET_COUNT", count });
    },
    /**
     * Function to set the page size.
     */
    setPageSize(size) {
      send({ type: "SET_PAGE_SIZE", size });
    },
    /**
     * Function to set the current page.
     */
    setPage(page2) {
      send({ type: "SET_PAGE", page: page2, srcElement: null });
    },
    rootProps: normalize.element({
      id: pagination_dom.dom.getRootId(state.context),
      ...pagination_anatomy.parts.root.attrs,
      "aria-label": translations.rootLabel
    }),
    getEllipsisProps(props) {
      return normalize.element({
        id: pagination_dom.dom.getEllipsisId(state.context, props.index),
        ...pagination_anatomy.parts.ellipsis.attrs
      });
    },
    getPageTriggerProps(page2) {
      const index = page2.value;
      const isCurrentPage = index === state.context.page;
      return normalize.element({
        id: pagination_dom.dom.getPageTriggerId(state.context, index),
        ...pagination_anatomy.parts.pageTrigger.attrs,
        "data-selected": domQuery.dataAttr(isCurrentPage),
        "aria-current": isCurrentPage ? "page" : void 0,
        "aria-label": translations.pageTriggerLabel?.({ page: index, totalPages }),
        onClick(evt) {
          send({ type: "SET_PAGE", page: index, srcElement: evt.currentTarget });
        },
        ...isButton && { type: "button" }
      });
    },
    prevPageTriggerProps: normalize.element({
      id: pagination_dom.dom.getPrevPageTriggerId(state.context),
      ...pagination_anatomy.parts.prevPageTrigger.attrs,
      "data-disabled": domQuery.dataAttr(isFirstPage),
      "aria-label": translations.prevPageTriggerLabel,
      onClick(evt) {
        send({ type: "PREVIOUS_PAGE", srcElement: evt.currentTarget });
      },
      ...isButton && { disabled: isFirstPage, type: "button" }
    }),
    nextPageTriggerProps: normalize.element({
      id: pagination_dom.dom.getNextPageTriggerId(state.context),
      ...pagination_anatomy.parts.nextPageTrigger.attrs,
      "data-disabled": domQuery.dataAttr(isLastPage),
      "aria-label": translations.nextPageTriggerLabel,
      onClick(evt) {
        send({ type: "NEXT_PAGE", srcElement: evt.currentTarget });
      },
      ...isButton && { disabled: isLastPage, type: "button" }
    })
  };
}

exports.connect = connect;
