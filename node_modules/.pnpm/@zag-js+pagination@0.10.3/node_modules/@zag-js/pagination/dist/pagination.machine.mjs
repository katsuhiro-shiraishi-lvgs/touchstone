import { createMachine } from '@zag-js/core';
import { compact } from '@zag-js/utils';

function machine(userContext) {
  const ctx = compact(userContext);
  return createMachine(
    {
      id: "pagination",
      initial: "idle",
      context: {
        pageSize: 10,
        siblingCount: 1,
        page: 1,
        type: "button",
        translations: {
          rootLabel: "pagination",
          prevPageTriggerLabel: "previous page",
          nextPageTriggerLabel: "next page",
          pageTriggerLabel({ page, totalPages }) {
            const isLastPage = totalPages > 1 && page === totalPages;
            return `${isLastPage ? "last page, " : ""}page ${page}`;
          },
          ...ctx.translations
        },
        ...ctx
      },
      watch: {
        page: ["invokeOnChange"],
        pageSize: ["setPageIfNeeded"]
      },
      computed: {
        totalPages: (ctx2) => Math.ceil(ctx2.count / ctx2.pageSize),
        previousPage: (ctx2) => ctx2.page === 1 ? null : ctx2.page - 1,
        nextPage: (ctx2) => ctx2.page === ctx2.totalPages ? null : ctx2.page + 1,
        pageRange: (ctx2) => {
          const start = (ctx2.page - 1) * ctx2.pageSize;
          const end = start + ctx2.pageSize;
          return { start, end };
        },
        isValidPage: (ctx2) => ctx2.page >= 1 && ctx2.page <= ctx2.totalPages
      },
      on: {
        SET_COUNT: [
          {
            guard: "isValidCount",
            actions: ["setCount", "goToFirstPage"]
          },
          {
            actions: "setCount"
          }
        ],
        SET_PAGE: {
          guard: "isValidPage",
          actions: "setPage"
        },
        SET_PAGE_SIZE: {
          actions: "setPageSize"
        },
        PREVIOUS_PAGE: {
          guard: "canGoToPrevPage",
          actions: "goToPrevPage"
        },
        NEXT_PAGE: {
          guard: "canGoToNextPage",
          actions: "goToNextPage"
        }
      },
      states: {
        idle: {}
      }
    },
    {
      guards: {
        isValidPage: (ctx2, evt) => evt.page >= 1 && evt.page <= ctx2.totalPages,
        isValidCount: (ctx2, evt) => ctx2.page > evt.count,
        canGoToNextPage: (ctx2) => ctx2.page < ctx2.totalPages,
        canGoToPrevPage: (ctx2) => ctx2.page > 1
      },
      actions: {
        setCount(ctx2, evt) {
          ctx2.count = evt.count;
        },
        setPage(ctx2, evt) {
          ctx2.page = evt.page;
        },
        setPageSize(ctx2, evt) {
          ctx2.pageSize = evt.size;
        },
        invokeOnChange(ctx2, evt) {
          ctx2.onChange?.({
            page: ctx2.page,
            pageSize: ctx2.pageSize,
            srcElement: evt.srcElement || null
          });
        },
        goToFirstPage(ctx2) {
          ctx2.page = 1;
        },
        goToPrevPage(ctx2) {
          ctx2.page = ctx2.page - 1;
        },
        goToNextPage(ctx2) {
          ctx2.page = ctx2.page + 1;
        },
        setPageIfNeeded(ctx2, _evt) {
          if (ctx2.isValidPage)
            return;
          ctx2.page = 1;
        }
      }
    }
  );
}

export { machine };
