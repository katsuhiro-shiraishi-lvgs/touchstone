import { subscribe, snapshot } from '@zag-js/store';
import ReactExports, { useRef, useSyncExternalStore, useCallback, useEffect, useMemo } from 'react';
import { isChanged, createProxy } from 'proxy-compare';

const { use } = ReactExports;
function useSnapshot(proxyObject, options) {
  const notifyInSync = options?.sync;
  const lastSnapshot = useRef();
  const lastAffected = useRef();
  const currSnapshot = useSyncExternalStore(
    useCallback(
      (callback) => {
        const unsub = subscribe(proxyObject, callback, notifyInSync);
        callback();
        return unsub;
      },
      [proxyObject, notifyInSync]
    ),
    () => {
      const nextSnapshot = snapshot(proxyObject, use);
      try {
        if (lastSnapshot.current && lastAffected.current && !isChanged(lastSnapshot.current, nextSnapshot, lastAffected.current, /* @__PURE__ */ new WeakMap())) {
          return lastSnapshot.current;
        }
      } catch (e) {
      }
      return nextSnapshot;
    },
    () => snapshot(proxyObject, use)
  );
  const currAffected = /* @__PURE__ */ new WeakMap();
  useEffect(() => {
    lastSnapshot.current = currSnapshot;
    lastAffected.current = currAffected;
  });
  const proxyCache = useMemo(() => /* @__PURE__ */ new WeakMap(), []);
  return createProxy(currSnapshot, currAffected, proxyCache);
}

export { useSnapshot };
