'use strict';

Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });

const store = require('@zag-js/store');
const ReactExports = require('react');
const proxyCompare = require('proxy-compare');

const { use } = ReactExports;
function useSnapshot(proxyObject, options) {
  const notifyInSync = options?.sync;
  const lastSnapshot = ReactExports.useRef();
  const lastAffected = ReactExports.useRef();
  const currSnapshot = ReactExports.useSyncExternalStore(
    ReactExports.useCallback(
      (callback) => {
        const unsub = store.subscribe(proxyObject, callback, notifyInSync);
        callback();
        return unsub;
      },
      [proxyObject, notifyInSync]
    ),
    () => {
      const nextSnapshot = store.snapshot(proxyObject, use);
      try {
        if (lastSnapshot.current && lastAffected.current && !proxyCompare.isChanged(lastSnapshot.current, nextSnapshot, lastAffected.current, /* @__PURE__ */ new WeakMap())) {
          return lastSnapshot.current;
        }
      } catch (e) {
      }
      return nextSnapshot;
    },
    () => store.snapshot(proxyObject, use)
  );
  const currAffected = /* @__PURE__ */ new WeakMap();
  ReactExports.useEffect(() => {
    lastSnapshot.current = currSnapshot;
    lastAffected.current = currAffected;
  });
  const proxyCache = ReactExports.useMemo(() => /* @__PURE__ */ new WeakMap(), []);
  return proxyCompare.createProxy(currSnapshot, currAffected, proxyCache);
}

exports.useSnapshot = useSnapshot;
