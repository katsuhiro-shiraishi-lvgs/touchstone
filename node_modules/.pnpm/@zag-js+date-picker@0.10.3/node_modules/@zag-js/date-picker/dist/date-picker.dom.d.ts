import type { DateView, MachineContext as Ctx } from "./date-picker.types";
export declare const dom: {
    getRootNode: (ctx: {
        getRootNode?: (() => Node | ShadowRoot | Document) | undefined;
    }) => ShadowRoot | Document;
    getDoc: (ctx: {
        getRootNode?: (() => Node | ShadowRoot | Document) | undefined;
    }) => Document;
    getWin: (ctx: {
        getRootNode?: (() => Node | ShadowRoot | Document) | undefined;
    }) => Window & typeof globalThis;
    getActiveElement: (ctx: {
        getRootNode?: (() => Node | ShadowRoot | Document) | undefined;
    }) => HTMLElement | null;
    getById: <T extends HTMLElement = HTMLElement>(ctx: {
        getRootNode?: (() => Node | ShadowRoot | Document) | undefined;
    }, id: string) => T | null;
    queryById: <T_1 extends HTMLElement = HTMLElement>(ctx: {
        getRootNode?: (() => Node | ShadowRoot | Document) | undefined;
    }, id: string) => T_1;
} & {
    getGridId: (ctx: Ctx, id: string) => string;
    getHeaderId: (ctx: Ctx) => string;
    getContentId: (ctx: Ctx) => string;
    getCellTriggerId: (ctx: Ctx, id: string) => string;
    getPrevTriggerId: (ctx: Ctx, view: DateView) => string;
    getNextTriggerId: (ctx: Ctx, view: DateView) => string;
    getViewTriggerId: (ctx: Ctx, view: DateView) => string;
    getClearTriggerId: (ctx: Ctx) => string;
    getControlId: (ctx: Ctx) => string;
    getInputId: (ctx: Ctx) => string;
    getTriggerId: (ctx: Ctx) => string;
    getMonthSelectId: (ctx: Ctx) => string;
    getYearSelectId: (ctx: Ctx) => string;
    getFocusedCell: (ctx: Ctx, view?: DateView) => HTMLElement | null | undefined;
    getTriggerEl: (ctx: Ctx) => HTMLButtonElement | null;
    getContentEl: (ctx: Ctx) => HTMLElement | null;
    getInputEl: (ctx: Ctx) => HTMLInputElement | null;
    getYearSelectEl: (ctx: Ctx) => HTMLSelectElement | null;
    getMonthSelectEl: (ctx: Ctx) => HTMLSelectElement | null;
    getClearTriggerEl: (ctx: Ctx) => HTMLButtonElement | null;
};
