import type { CalendarDateTime, ZonedDateTime, type CalendarDate,  type DateValue } from '@internationalized/date';
import type { NormalizeProps, PropTypes } from "@zag-js/types";
import type { CellProps, DateView, DayCellProps, GridProps, Send, State, ViewProps } from "./date-picker.types";
import { matchView } from "./date-picker.utils";
export declare function connect<T extends PropTypes>(state: State, send: Send, normalize: NormalizeProps<T>): {
    /**
     * Whether the input is focused
     */
    isFocused: boolean;
    /**
     * Whether the date picker is open
     */
    isOpen: boolean | undefined;
    /**
     * The current view of the date picker
     */
    view: DateView;
    /**
     * Matcher for the current view of the date picker
     */
    matchView: typeof matchView;
    /**
     * Returns an array of days in the week index counted from the provided start date, or the first visible date if not given.
     */
    getDaysInWeek(weekIndex: number, from?: DateValue): DateValue[];
    /**
     * Returns the offset of the month based on the provided number of months.
     */
    getOffset(months: number): {
        amount: number;
        visibleRange: {
            start: CalendarDate | CalendarDateTime | ZonedDateTime;
            end: CalendarDate | CalendarDateTime | ZonedDateTime;
        };
        weeks: DateValue[][];
    };
    /**
     * Returns the weeks of the month from the provided date. Represented as an array of arrays of dates.
     */
    getMonthDays(from?: DateValue): DateValue[][];
    /**
     * Returns whether the provided date is available (or can be selected)
     */
    isUnavailable(date: DateValue): boolean;
    /**
     * The weeks of the month. Represented as an array of arrays of dates.
     */
    readonly weeks: DateValue[][];
    /**
     * The days of the week. Represented as an array of strings.
     */
    weekDays: {
        value: CalendarDate | CalendarDateTime | ZonedDateTime;
        short: string;
        long: string;
        narrow: string;
    }[];
    /**
     * The human readable text for the visible range of dates.
     */
    visibleRangeText: {
        start: string;
        end: string;
        formatted: string;
    };
    /**
     * The selected date.
     */
    value: DateValue[];
    /**
     * The selected date as a Date object.
     */
    valueAsDate: Date[];
    /**
     * The selected date as a string.
     */
    valueAsString: string[];
    /**
     * The focused date.
     */
    focusedValue: DateValue;
    /**
     * The focused date as a Date object.
     */
    focusedValueAsDate: Date;
    /**
     * The focused date as a string.
     */
    focusedValueAsString: string;
    /**
     * Sets the selected date to today.
     */
    selectToday(): void;
    /**
     * Sets the selected date to the given date.
     */
    setValue(values: CalendarDate[]): void;
    /**
     * Sets the focused date to the given date.
     */
    setFocusedValue(value: CalendarDate): void;
    /**
     * Clears the selected date(s).
     */
    clearValue(): void;
    /**
     * Function to open the calendar.
     */
    open(): void;
    /**
     * Function to close the calendar.
     */
    close(): void;
    /**
     * Function to set the selected month.
     */
    focusMonth(month: number): void;
    /**
     * Function to set the selected year.
     */
    focusYear(year: number): void;
    /**
     * The visible range of dates.
     */
    visibleRange: {
        start: DateValue;
        end: DateValue;
    };
    /**
     * Returns the months of the year
     */
    getYears(): {
        label: string;
        value: number;
    }[];
    /**
     * Returns the years of the decade based on the columns.
     * Represented as an array of arrays of years.
     */
    getYearsGrid(props?: {
        columns?: number;
    }): {
        label: string;
        value: number;
    }[][];
    /**
     * Returns the start and end years of the decade.
     */
    getDecade(): {
        start: number | undefined;
        end: number | undefined;
    };
    /**
     * Returns the months of the year
     */
    getMonths(props?: {
        format?: "short" | "long";
    }): {
        label: string;
        value: number;
    }[];
    /**
     * Returns the months of the year based on the columns.
     * Represented as an array of arrays of months.
     */
    getMonthsGrid(props?: {
        columns?: number;
        format?: "short" | "long";
    }): {
        label: string;
        value: number;
    }[][];
    /**
     * Formats the given date value based on the provided options.
     */
    format(value: CalendarDate, opts?: Intl.DateTimeFormatOptions): string;
    /**
     * Sets the view of the date picker.
     */
    setView(view: DateView): void;
    /**
     * Goes to the next month/year/decade.
     */
    goToNext(): void;
    /**
     * Goes to the previous month/year/decade.
     */
    goToPrev(): void;
    controlProps: T["element"];
    contentProps: T["element"];
    getGridProps(props?: GridProps): T["element"];
    /**
     * Returns the state details for a given cell.
     */
    getDayCellState(props: DayCellProps): {
        isInvalid: boolean;
        isDisabled: boolean;
        isSelected: boolean;
        isUnavailable: boolean;
        isOutsideRange: boolean;
        isInRange: boolean;
        isFirstInRange: boolean;
        isLastInRange: boolean;
        isToday: boolean;
        isWeekend: boolean;
        formattedDate: string;
        readonly isFocused: boolean;
        readonly ariaLabel: string;
        readonly isSelectable: boolean;
    };
    getDayCellProps(props: DayCellProps): T["element"];
    getDayCellTriggerProps(props: DayCellProps): T["element"];
    getMonthCellState(props: CellProps): {
        isFocused: boolean;
        isSelectable: boolean;
        isSelected: boolean;
        valueText: string;
        readonly isDisabled: boolean;
    };
    getMonthCellProps(props: CellProps): T["element"];
    getMonthCellTriggerProps(props: CellProps): T["element"];
    getYearCellState(props: CellProps): {
        isFocused: boolean;
        isSelectable: boolean;
        isSelected: boolean;
        valueText: string;
        readonly isDisabled: boolean;
    };
    getYearCellProps(props: CellProps): T["element"];
    getYearCellTriggerProps(props: CellProps): T["element"];
    getNextTriggerProps(props?: ViewProps): T["button"];
    getPrevTriggerProps(props?: ViewProps): T["button"];
    getHeaderProps(props?: ViewProps): T["element"];
    clearTriggerProps: T["button"];
    triggerProps: T["button"];
    getViewTriggerProps(props?: ViewProps): T["button"];
    inputProps: T["input"];
    monthSelectProps: T["select"];
    yearSelectProps: T["select"];
};
