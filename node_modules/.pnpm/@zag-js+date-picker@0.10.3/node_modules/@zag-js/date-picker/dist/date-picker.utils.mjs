import { DateFormatter } from '@internationalized/date';

function adjustStartAndEndDate(value) {
  const [startDate, endDate] = value;
  if (!startDate || !endDate)
    return value;
  return startDate.compare(endDate) <= 0 ? value : [endDate, startDate];
}
function isDateWithinRange(date, value) {
  const [startDate, endDate] = value;
  if (!startDate || !endDate)
    return false;
  return startDate.compare(date) <= 0 && endDate.compare(date) >= 0;
}
function sortDates(values) {
  return values.sort((a, b) => a.compare(b));
}
function matchView(view, values) {
  if (view === "year")
    return values.year;
  if (view === "month")
    return values.month;
  return values.day;
}
function formatValue(ctx) {
  const formatter = new DateFormatter(ctx.locale, {
    timeZone: ctx.timeZone,
    day: "2-digit",
    month: "2-digit",
    year: "numeric"
  });
  if (ctx.selectionMode === "range") {
    const [startDate, endDate] = ctx.value;
    if (!startDate || !endDate)
      return "";
    return `${formatter.format(startDate.toDate(ctx.timeZone))} - ${formatter.format(endDate.toDate(ctx.timeZone))}`;
  }
  if (ctx.selectionMode === "single") {
    const [startValue] = ctx.value;
    if (!startValue)
      return "";
    return formatter.format(startValue.toDate(ctx.timeZone));
  }
  return ctx.value.map((date) => formatter.format(date.toDate(ctx.timeZone))).join(", ");
}
function getNextTriggerLabel(view) {
  return matchView(view, {
    year: "Switch to next decade",
    month: "Switch to next year",
    day: "Switch to next month"
  });
}
function getPrevTriggerLabel(view) {
  return matchView(view, {
    year: "Switch to previous decade",
    month: "Switch to previous year",
    day: "Switch to previous month"
  });
}
function getRoleDescription(view) {
  return matchView(view, {
    year: "calendar decade",
    month: "calendar year",
    day: "calendar month"
  });
}
function getViewTriggerLabel(view) {
  return matchView(view, {
    year: "Switch to month view",
    month: "Switch to day view",
    day: "Switch to year view"
  });
}
const PLACEHOLDERS = { day: "dd", month: "mm", year: "yyyy" };
function getInputPlaceholder(locale) {
  return new DateFormatter(locale).formatToParts(/* @__PURE__ */ new Date()).map((item) => PLACEHOLDERS[item.type] ?? item.value).join("");
}
const isValidCharacter = (char, separator) => {
  if (!char)
    return true;
  return /\d/.test(char) || char === separator || char.length !== 1;
};
const ensureValidCharacters = (value, separator) => {
  return value.split("").filter((char) => isValidCharacter(char, separator)).join("");
};
function getLocaleSeparator(locale) {
  const dateFormatter = new Intl.DateTimeFormat(locale);
  const parts = dateFormatter.formatToParts(/* @__PURE__ */ new Date());
  const literalPart = parts.find((part) => part.type === "literal");
  return literalPart ? literalPart.value : "/";
}

export { adjustStartAndEndDate, ensureValidCharacters, formatValue, getInputPlaceholder, getLocaleSeparator, getNextTriggerLabel, getPrevTriggerLabel, getRoleDescription, getViewTriggerLabel, isDateWithinRange, isValidCharacter, matchView, sortDates };
