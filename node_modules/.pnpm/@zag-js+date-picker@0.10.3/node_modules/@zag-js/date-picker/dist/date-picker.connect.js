'use strict';

Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });

const date = require('@internationalized/date');
const dateUtils = require('@zag-js/date-utils');
const domEvent = require('@zag-js/dom-event');
const domQuery = require('@zag-js/dom-query');
const utils = require('@zag-js/utils');
const datePicker_anatomy = require('./date-picker.anatomy.js');
const datePicker_dom = require('./date-picker.dom.js');
const datePicker_utils = require('./date-picker.utils.js');

const pretty = (value) => value.toString().split("T")[0];
function connect(state, send, normalize) {
  const startValue = state.context.startValue;
  const endValue = state.context.endValue;
  const selectedValue = state.context.value;
  const focusedValue = state.context.focusedValue;
  const hoveredValue = state.context.hoveredValue;
  const hoveredRangeValue = hoveredValue ? datePicker_utils.adjustStartAndEndDate([selectedValue[0], hoveredValue]) : [];
  const disabled = state.context.disabled;
  const readOnly = state.context.readOnly;
  const isInteractive = state.context.isInteractive;
  const min = state.context.min;
  const max = state.context.max;
  const locale = state.context.locale;
  const timeZone = state.context.timeZone;
  const startOfWeek = state.context.startOfWeek;
  const isFocused = state.matches("focused");
  const isOpen = state.matches("open") || state.context.inline;
  const isRangePicker = state.context.selectionMode === "range";
  const isDateUnavailableFn = state.context.isDateUnavailable;
  const defaultOffset = {
    amount: 0,
    visibleRange: state.context.visibleRange
  };
  const separator = datePicker_utils.getLocaleSeparator(locale);
  const api = {
    /**
     * Whether the input is focused
     */
    isFocused,
    /**
     * Whether the date picker is open
     */
    isOpen,
    /**
     * The current view of the date picker
     */
    view: state.context.view,
    /**
     * Matcher for the current view of the date picker
     */
    matchView: datePicker_utils.matchView,
    /**
     * Returns an array of days in the week index counted from the provided start date, or the first visible date if not given.
     */
    getDaysInWeek(weekIndex, from = startValue) {
      return dateUtils.getDaysInWeek(weekIndex, from, locale, startOfWeek);
    },
    /**
     * Returns the offset of the month based on the provided number of months.
     */
    getOffset(months) {
      const from = startValue.add({ months });
      return {
        amount: months,
        visibleRange: { start: from, end: endValue.add({ months }) },
        weeks: api.getMonthDays(from)
      };
    },
    /**
     * Returns the weeks of the month from the provided date. Represented as an array of arrays of dates.
     */
    getMonthDays(from = startValue) {
      const numOfWeeks = state.context.fixedWeeks ? 6 : void 0;
      return dateUtils.getMonthDays(from, locale, numOfWeeks, startOfWeek);
    },
    /**
     * Returns whether the provided date is available (or can be selected)
     */
    isUnavailable(date) {
      return dateUtils.isDateUnavailable(date, isDateUnavailableFn, locale, min, max);
    },
    /**
     * The weeks of the month. Represented as an array of arrays of dates.
     */
    get weeks() {
      return api.getMonthDays();
    },
    /**
     * The days of the week. Represented as an array of strings.
     */
    weekDays: dateUtils.getWeekDays(dateUtils.getTodayDate(timeZone), startOfWeek, timeZone, locale),
    /**
     * The human readable text for the visible range of dates.
     */
    visibleRangeText: state.context.visibleRangeText,
    /**
     * The selected date.
     */
    value: selectedValue,
    /**
     * The selected date as a Date object.
     */
    valueAsDate: selectedValue.map((date) => date.toDate(timeZone)),
    /**
     * The selected date as a string.
     */
    valueAsString: selectedValue.map(pretty),
    /**
     * The focused date.
     */
    focusedValue,
    /**
     * The focused date as a Date object.
     */
    focusedValueAsDate: focusedValue?.toDate(timeZone),
    /**
     * The focused date as a string.
     */
    focusedValueAsString: pretty(focusedValue),
    /**
     * Sets the selected date to today.
     */
    selectToday() {
      const value = dateUtils.constrainValue(dateUtils.getTodayDate(timeZone), min, max);
      send({ type: "VALUE.SET", value });
    },
    /**
     * Sets the selected date to the given date.
     */
    setValue(values) {
      const computedValue = values.map((date) => dateUtils.constrainValue(date, min, max));
      send({ type: "VALUE.SET", value: computedValue });
    },
    /**
     * Sets the focused date to the given date.
     */
    setFocusedValue(value) {
      send({ type: "FOCUS.SET", value });
    },
    /**
     * Clears the selected date(s).
     */
    clearValue() {
      send("VALUE.CLEAR");
    },
    /**
     * Function to open the calendar.
     */
    open() {
      send("OPEN");
    },
    /**
     * Function to close the calendar.
     */
    close() {
      send("CLOSE");
    },
    /**
     * Function to set the selected month.
     */
    focusMonth(month) {
      const value = dateUtils.setMonth(focusedValue ?? dateUtils.getTodayDate(timeZone), month);
      send({ type: "FOCUS.SET", value });
    },
    /**
     * Function to set the selected year.
     */
    focusYear(year) {
      const value = dateUtils.setYear(focusedValue ?? dateUtils.getTodayDate(timeZone), year);
      send({ type: "FOCUS.SET", value });
    },
    /**
     * The visible range of dates.
     */
    visibleRange: state.context.visibleRange,
    /**
     * Returns the months of the year
     */
    getYears() {
      return dateUtils.getDecadeRange(focusedValue.year).map((year) => ({ label: year.toString(), value: year }));
    },
    /**
     * Returns the years of the decade based on the columns.
     * Represented as an array of arrays of years.
     */
    getYearsGrid(props = {}) {
      const { columns = 1 } = props;
      return utils.chunk(api.getYears(), columns);
    },
    /**
     * Returns the start and end years of the decade.
     */
    getDecade() {
      const years = dateUtils.getDecadeRange(focusedValue.year);
      return { start: years.at(0), end: years.at(-1) };
    },
    /**
     * Returns the months of the year
     */
    getMonths(props = {}) {
      const { format } = props;
      return dateUtils.getMonthNames(locale, format).map((label, index) => ({ label, value: index + 1 }));
    },
    /**
     * Returns the months of the year based on the columns.
     * Represented as an array of arrays of months.
     */
    getMonthsGrid(props = {}) {
      const { columns = 1, format } = props;
      return utils.chunk(api.getMonths({ format }), columns);
    },
    /**
     * Formats the given date value based on the provided options.
     */
    format(value, opts = { month: "long", year: "numeric" }) {
      return new date.DateFormatter(locale, opts).format(value.toDate(timeZone));
    },
    /**
     * Sets the view of the date picker.
     */
    setView(view) {
      send({ type: "VIEW.SET", cell: view });
    },
    /**
     * Goes to the next month/year/decade.
     */
    goToNext() {
      send({ type: "GOTO.NEXT", view: state.context.view });
    },
    /**
     * Goes to the previous month/year/decade.
     */
    goToPrev() {
      send({ type: "GOTO.PREV", view: state.context.view });
    },
    controlProps: normalize.element({
      ...datePicker_anatomy.parts.control.attrs,
      id: datePicker_dom.dom.getControlId(state.context),
      "data-disabled": domQuery.dataAttr(disabled)
    }),
    contentProps: normalize.element({
      ...datePicker_anatomy.parts.content.attrs,
      hidden: !isOpen,
      id: datePicker_dom.dom.getContentId(state.context),
      role: "application",
      "aria-roledescription": "datepicker",
      "aria-label": "calendar"
    }),
    getGridProps(props = {}) {
      const { view = "day", columns = view === "day" ? 7 : 4, id } = props;
      const uid = [view, id].filter(Boolean).join(" ");
      return normalize.element({
        ...datePicker_anatomy.parts.grid.attrs,
        role: "grid",
        "data-columns": columns,
        "aria-roledescription": datePicker_utils.getRoleDescription(view),
        id: datePicker_dom.dom.getGridId(state.context, uid),
        "aria-readonly": domQuery.ariaAttr(readOnly),
        "aria-disabled": domQuery.ariaAttr(disabled),
        "aria-multiselectable": domQuery.ariaAttr(state.context.selectionMode !== "single"),
        "data-type": view,
        dir: state.context.dir,
        tabIndex: -1,
        onKeyDown(event) {
          const keyMap = {
            Enter() {
              if (api.isUnavailable(focusedValue))
                return;
              send({ type: "GRID.ENTER", view, columns, focus: true });
            },
            ArrowLeft() {
              send({ type: "GRID.ARROW_LEFT", view, columns, focus: true });
            },
            ArrowRight() {
              send({ type: "GRID.ARROW_RIGHT", view, columns, focus: true });
            },
            ArrowUp() {
              send({ type: "GRID.ARROW_UP", view, columns, focus: true });
            },
            ArrowDown() {
              send({ type: "GRID.ARROW_DOWN", view, columns, focus: true });
            },
            PageUp(event2) {
              send({ type: "GRID.PAGE_UP", larger: event2.shiftKey, view, columns, focus: true });
            },
            PageDown(event2) {
              send({ type: "GRID.PAGE_DOWN", larger: event2.shiftKey, view, columns, focus: true });
            },
            Home() {
              send({ type: "GRID.HOME", view, columns, focus: true });
            },
            End() {
              send({ type: "GRID.END", view, columns, focus: true });
            }
          };
          const exec = keyMap[domEvent.getEventKey(event, state.context)];
          if (exec) {
            exec(event);
            event.preventDefault();
            event.stopPropagation();
          }
        },
        onPointerLeave() {
          send({ type: "GRID.POINTER_LEAVE" });
        },
        onPointerDown() {
          send({ type: "GRID.POINTER_DOWN", view });
        },
        onPointerUp() {
          send({ type: "GRID.POINTER_UP", view });
        }
      });
    },
    /**
     * Returns the state details for a given cell.
     */
    getDayCellState(props) {
      const { value, disabled: disabled2, offset = defaultOffset } = props;
      const { visibleRange } = offset;
      const formatter = dateUtils.getDayFormatter(locale, timeZone);
      const unitDuration = dateUtils.getUnitDuration(state.context.visibleDuration);
      const end = visibleRange.start.add(unitDuration).subtract({ days: 1 });
      const cellState = {
        isInvalid: dateUtils.isDateInvalid(value, min, max),
        isDisabled: disabled2 || dateUtils.isDateDisabled(value, visibleRange.start, end, min, max),
        isSelected: selectedValue.some((date) => dateUtils.isDateEqual(value, date)),
        isUnavailable: dateUtils.isDateUnavailable(value, isDateUnavailableFn, locale, min, max) && !disabled2,
        isOutsideRange: dateUtils.isDateOutsideVisibleRange(value, visibleRange.start, end),
        isInRange: isRangePicker && (datePicker_utils.isDateWithinRange(value, selectedValue) || datePicker_utils.isDateWithinRange(value, hoveredRangeValue)),
        isFirstInRange: isRangePicker && dateUtils.isDateEqual(value, selectedValue[0]),
        isLastInRange: isRangePicker && dateUtils.isDateEqual(value, selectedValue[1]),
        isToday: dateUtils.isTodayDate(value, timeZone),
        isWeekend: date.isWeekend(value, locale),
        formattedDate: formatter.format(value.toDate(timeZone)),
        get isFocused() {
          return dateUtils.isDateEqual(value, focusedValue) && !cellState.isOutsideRange;
        },
        get ariaLabel() {
          if (cellState.isUnavailable)
            return `Not available. ${cellState.formattedDate}`;
          if (cellState.isSelected)
            return `Selected date. ${cellState.formattedDate}`;
          return `Choose ${cellState.formattedDate}`;
        },
        get isSelectable() {
          return !cellState.isDisabled && !cellState.isUnavailable;
        }
      };
      return cellState;
    },
    getDayCellProps(props) {
      const { value } = props;
      const cellState = api.getDayCellState(props);
      return normalize.element({
        role: "gridcell",
        "aria-disabled": domQuery.ariaAttr(!cellState.isSelectable),
        "aria-selected": cellState.isSelected || cellState.isInRange,
        "aria-invalid": domQuery.ariaAttr(cellState.isInvalid),
        "aria-current": cellState.isToday ? "date" : void 0,
        "data-value": value.toString()
      });
    },
    getDayCellTriggerProps(props) {
      const { value } = props;
      const cellState = api.getDayCellState(props);
      return normalize.element({
        ...datePicker_anatomy.parts.cellTrigger.attrs,
        id: datePicker_dom.dom.getCellTriggerId(state.context, value.toString()),
        role: "button",
        tabIndex: cellState.isFocused ? 0 : -1,
        "aria-label": cellState.ariaLabel,
        "aria-disabled": domQuery.ariaAttr(!cellState.isSelectable),
        "aria-invalid": domQuery.ariaAttr(cellState.isInvalid),
        "data-disabled": domQuery.dataAttr(!cellState.isSelectable),
        "data-selected": domQuery.dataAttr(cellState.isSelected),
        "data-value": value.toString(),
        "data-type": "day",
        "data-today": domQuery.dataAttr(cellState.isToday),
        "data-focused": domQuery.dataAttr(cellState.isFocused),
        "data-unavailable": domQuery.dataAttr(cellState.isUnavailable),
        "data-range-start": domQuery.dataAttr(cellState.isFirstInRange),
        "data-range-end": domQuery.dataAttr(cellState.isLastInRange),
        "data-in-range": domQuery.dataAttr(cellState.isInRange),
        "data-outside-range": domQuery.dataAttr(cellState.isOutsideRange),
        "data-weekend": domQuery.dataAttr(cellState.isWeekend),
        onClick() {
          if (!cellState.isSelectable)
            return;
          send({ type: "CELL.CLICK", cell: "day", value });
        },
        onPointerMove(event) {
          if (event.pointerType === "touch" || !cellState.isSelectable)
            return;
          const focus = event.currentTarget.ownerDocument.activeElement !== event.currentTarget;
          send({ type: "CELL.POINTER_MOVE", cell: "day", value, focus });
        },
        onContextMenu(event) {
          event.preventDefault();
        }
      });
    },
    getMonthCellState(props) {
      const { value, disabled: disabled2 } = props;
      const normalized = focusedValue.set({ month: value });
      const formatter = dateUtils.getMonthFormatter(locale, timeZone);
      const cellState = {
        isFocused: focusedValue.month === props.value,
        isSelectable: !dateUtils.isDateInvalid(normalized, min, max),
        isSelected: !!selectedValue.find((date) => date.month === value && date.year === focusedValue.year),
        valueText: formatter.format(normalized.toDate(timeZone)),
        get isDisabled() {
          return disabled2 || !cellState.isSelectable;
        }
      };
      return cellState;
    },
    getMonthCellProps(props) {
      const { value } = props;
      const cellState = api.getMonthCellState(props);
      return normalize.element({
        role: "gridcell",
        "aria-selected": domQuery.ariaAttr(cellState.isSelected),
        "data-selected": domQuery.dataAttr(cellState.isSelected),
        "aria-disabled": domQuery.ariaAttr(!cellState.isSelectable),
        "data-value": value
      });
    },
    getMonthCellTriggerProps(props) {
      const { value } = props;
      const cellState = api.getMonthCellState(props);
      return normalize.element({
        ...datePicker_anatomy.parts.cellTrigger.attrs,
        role: "button",
        id: datePicker_dom.dom.getCellTriggerId(state.context, value.toString()),
        "data-selected": domQuery.dataAttr(cellState.isSelected),
        "aria-disabled": domQuery.ariaAttr(!cellState.isSelectable),
        "data-disabled": domQuery.dataAttr(!cellState.isSelectable),
        "data-focused": domQuery.dataAttr(cellState.isFocused),
        "aria-label": cellState.valueText,
        "data-type": "month",
        "data-value": value,
        tabIndex: cellState.isFocused ? 0 : -1,
        onClick() {
          if (!cellState.isSelectable)
            return;
          send({ type: "CELL.CLICK", cell: "month", value });
        },
        onContextMenu(event) {
          event.preventDefault();
        }
      });
    },
    getYearCellState(props) {
      const { value, disabled: disabled2 } = props;
      const normalized = focusedValue.set({ year: value });
      const cellState = {
        isFocused: focusedValue.year === props.value,
        isSelectable: !dateUtils.isDateInvalid(normalized, min, max),
        isSelected: !!selectedValue.find((date) => date.year === value),
        valueText: value.toString(),
        get isDisabled() {
          return disabled2 || !cellState.isSelectable;
        }
      };
      return cellState;
    },
    getYearCellProps(props) {
      const { value } = props;
      const cellState = api.getYearCellState(props);
      return normalize.element({
        role: "gridcell",
        "aria-selected": domQuery.ariaAttr(cellState.isSelected),
        "data-selected": domQuery.dataAttr(cellState.isSelected),
        "aria-disabled": domQuery.ariaAttr(!cellState.isSelectable),
        "data-value": value
      });
    },
    getYearCellTriggerProps(props) {
      const { value } = props;
      const cellState = api.getYearCellState(props);
      return normalize.element({
        ...datePicker_anatomy.parts.cellTrigger.attrs,
        role: "button",
        id: datePicker_dom.dom.getCellTriggerId(state.context, value.toString()),
        "data-selected": domQuery.dataAttr(cellState.isSelected),
        "data-focused": domQuery.dataAttr(cellState.isFocused),
        "aria-disabled": domQuery.ariaAttr(!cellState.isSelectable),
        "data-disabled": domQuery.dataAttr(!cellState.isSelectable),
        "aria-label": cellState.valueText,
        "data-value": value,
        "data-type": "year",
        tabIndex: cellState.isFocused ? 0 : -1,
        onClick() {
          if (!cellState.isSelectable)
            return;
          send({ type: "CELL.CLICK", cell: "year", value });
        },
        onContextMenu(event) {
          event.preventDefault();
        }
      });
    },
    getNextTriggerProps(props = {}) {
      const { view = "day" } = props;
      return normalize.button({
        ...datePicker_anatomy.parts.nextTrigger.attrs,
        id: datePicker_dom.dom.getNextTriggerId(state.context, view),
        type: "button",
        "aria-label": datePicker_utils.getPrevTriggerLabel(view),
        disabled: disabled || !state.context.isNextVisibleRangeValid,
        onClick() {
          send({ type: "GOTO.NEXT", view });
        }
      });
    },
    getPrevTriggerProps(props = {}) {
      const { view = "day" } = props;
      return normalize.button({
        ...datePicker_anatomy.parts.prevTrigger.attrs,
        id: datePicker_dom.dom.getPrevTriggerId(state.context, view),
        type: "button",
        "aria-label": datePicker_utils.getNextTriggerLabel(view),
        disabled: disabled || !state.context.isPrevVisibleRangeValid,
        onClick() {
          send({ type: "GOTO.PREV", view });
        }
      });
    },
    getHeaderProps(props = {}) {
      const { view = "day" } = props;
      return normalize.element({
        ...datePicker_anatomy.parts.header.attrs,
        "aria-hidden": true,
        dir: state.context.dir,
        "data-type": view,
        "data-disabled": domQuery.dataAttr(disabled),
        id: datePicker_dom.dom.getHeaderId(state.context)
      });
    },
    clearTriggerProps: normalize.button({
      ...datePicker_anatomy.parts.clearTrigger.attrs,
      id: datePicker_dom.dom.getClearTriggerId(state.context),
      type: "button",
      "aria-label": "Clear dates",
      hidden: !state.context.value.length,
      onClick() {
        send("VALUE.CLEAR");
      }
    }),
    triggerProps: normalize.button({
      ...datePicker_anatomy.parts.trigger.attrs,
      id: datePicker_dom.dom.getTriggerId(state.context),
      type: "button",
      "aria-label": isOpen ? "Close calendar" : "Open calendar",
      "aria-haspopup": "grid",
      disabled,
      onClick() {
        if (!isInteractive)
          return;
        send("TRIGGER.CLICK");
      }
    }),
    getViewTriggerProps(props = {}) {
      const { view = "day" } = props;
      return normalize.button({
        ...datePicker_anatomy.parts.viewTrigger.attrs,
        id: datePicker_dom.dom.getViewTriggerId(state.context, view),
        type: "button",
        disabled,
        "aria-label": datePicker_utils.getViewTriggerLabel(state.context.view),
        onClick() {
          if (!isInteractive)
            return;
          send("VIEW.CHANGE");
        }
      });
    },
    inputProps: normalize.input({
      ...datePicker_anatomy.parts.input.attrs,
      id: datePicker_dom.dom.getInputId(state.context),
      autoComplete: "off",
      autoCorrect: "off",
      spellCheck: "false",
      dir: state.context.dir,
      name: state.context.name,
      readOnly,
      disabled,
      placeholder: datePicker_utils.getInputPlaceholder(locale),
      defaultValue: state.context.inputValue,
      onBeforeInput(event) {
        const { data } = domEvent.getNativeEvent(event);
        if (!datePicker_utils.isValidCharacter(data, separator)) {
          event.preventDefault();
        }
      },
      onFocus() {
        send("INPUT.FOCUS");
      },
      onBlur(event) {
        send({ type: "INPUT.BLUR", value: event.currentTarget.value });
      },
      onKeyDown(event) {
        if (event.key !== "Enter" || !isInteractive)
          return;
        if (api.isUnavailable(state.context.focusedValue))
          return;
        send({ type: "INPUT.ENTER", value: event.currentTarget.value });
      },
      onChange(event) {
        const { value } = event.target;
        send({ type: "INPUT.CHANGE", value: datePicker_utils.ensureValidCharacters(value, separator) });
      }
    }),
    monthSelectProps: normalize.select({
      ...datePicker_anatomy.parts.monthSelect.attrs,
      id: datePicker_dom.dom.getMonthSelectId(state.context),
      "aria-label": "Select month",
      disabled,
      dir: state.context.dir,
      defaultValue: focusedValue.month,
      onChange(event) {
        api.focusMonth(Number(event.currentTarget.value));
      }
    }),
    yearSelectProps: normalize.select({
      ...datePicker_anatomy.parts.yearSelect.attrs,
      id: datePicker_dom.dom.getYearSelectId(state.context),
      disabled,
      "aria-label": "Select year",
      dir: state.context.dir,
      defaultValue: focusedValue.year,
      onChange(event) {
        api.focusYear(Number(event.currentTarget.value));
      }
    })
  };
  return api;
}

exports.connect = connect;
