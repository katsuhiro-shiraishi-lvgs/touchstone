'use strict';

Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });

const ariaHidden = require('@zag-js/aria-hidden');
const core = require('@zag-js/core');
const dismissable = require('@zag-js/dismissable');
const domQuery = require('@zag-js/dom-query');
const removeScroll = require('@zag-js/remove-scroll');
const utils = require('@zag-js/utils');
const focusTrap = require('focus-trap');
const dialog_dom = require('./dialog.dom.js');

function machine(userContext) {
  const ctx = utils.compact(userContext);
  return core.createMachine(
    {
      id: "dialog",
      initial: ctx.open ? "open" : "closed",
      context: {
        role: "dialog",
        renderedElements: {
          title: true,
          description: true
        },
        modal: true,
        trapFocus: true,
        preventScroll: true,
        closeOnOutsideClick: true,
        closeOnEsc: true,
        restoreFocus: true,
        ...ctx
      },
      watch: {
        open: ["toggleVisibility"]
      },
      states: {
        open: {
          entry: ["checkRenderedElements"],
          activities: ["trackDismissableElement", "trapFocus", "preventScroll", "hideContentBelow"],
          on: {
            CLOSE: {
              target: "closed",
              actions: ["invokeOnClose", "restoreFocus"]
            },
            TOGGLE: {
              target: "closed",
              actions: ["invokeOnClose", "restoreFocus"]
            }
          }
        },
        closed: {
          on: {
            OPEN: {
              target: "open",
              actions: ["invokeOnOpen"]
            },
            TOGGLE: {
              target: "open",
              actions: ["invokeOnOpen"]
            }
          }
        }
      }
    },
    {
      activities: {
        trackDismissableElement(ctx2, _evt, { send }) {
          const getContentEl = () => dialog_dom.dom.getContentEl(ctx2);
          return dismissable.trackDismissableElement(getContentEl, {
            defer: true,
            pointerBlocking: ctx2.modal,
            exclude: [dialog_dom.dom.getTriggerEl(ctx2)],
            onDismiss() {
              send({ type: "CLOSE", src: "interact-outside" });
            },
            onEscapeKeyDown(event) {
              if (!ctx2.closeOnEsc) {
                event.preventDefault();
              } else {
                send({ type: "CLOSE", src: "escape-key" });
              }
              ctx2.onEsc?.();
            },
            onPointerDownOutside(event) {
              if (!ctx2.closeOnOutsideClick) {
                event.preventDefault();
              }
              ctx2.onOutsideClick?.();
            }
          });
        },
        preventScroll(ctx2) {
          if (!ctx2.preventScroll)
            return;
          return removeScroll.preventBodyScroll(dialog_dom.dom.getDoc(ctx2));
        },
        trapFocus(ctx2) {
          if (!ctx2.trapFocus)
            return;
          let trap;
          domQuery.nextTick(() => {
            const contentEl = dialog_dom.dom.getContentEl(ctx2);
            if (!contentEl)
              return;
            trap = focusTrap.createFocusTrap(contentEl, {
              document: dialog_dom.dom.getDoc(ctx2),
              escapeDeactivates: false,
              preventScroll: true,
              returnFocusOnDeactivate: false,
              fallbackFocus: contentEl,
              allowOutsideClick: true,
              initialFocus: utils.runIfFn(ctx2.initialFocusEl)
            });
            try {
              trap.activate();
            } catch {
            }
          });
          return () => trap?.deactivate();
        },
        hideContentBelow(ctx2) {
          if (!ctx2.modal)
            return;
          const getElements = () => [dialog_dom.dom.getContainerEl(ctx2)];
          return ariaHidden.ariaHidden(getElements, { defer: true });
        }
      },
      actions: {
        checkRenderedElements(ctx2) {
          domQuery.raf(() => {
            ctx2.renderedElements.title = !!dialog_dom.dom.getTitleEl(ctx2);
            ctx2.renderedElements.description = !!dialog_dom.dom.getDescriptionEl(ctx2);
          });
        },
        invokeOnClose(ctx2) {
          ctx2.onClose?.();
        },
        invokeOnOpen(ctx2) {
          ctx2.onOpen?.();
        },
        toggleVisibility(ctx2, _evt, { send }) {
          send({ type: ctx2.open ? "OPEN" : "CLOSE", src: "controlled" });
        },
        restoreFocus(ctx2) {
          if (!ctx2.restoreFocus)
            return;
          domQuery.raf(() => {
            const el = utils.runIfFn(ctx2.finalFocusEl) ?? dialog_dom.dom.getTriggerEl(ctx2);
            el?.focus({ preventScroll: true });
          });
        }
      }
    }
  );
}

exports.machine = machine;
