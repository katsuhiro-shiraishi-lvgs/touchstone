'use strict';

Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });

const dialog_anatomy = require('./dialog.anatomy.js');
const dialog_dom = require('./dialog.dom.js');

function connect(state, send, normalize) {
  const ariaLabel = state.context["aria-label"];
  const isOpen = state.matches("open");
  const rendered = state.context.renderedElements;
  return {
    /**
     * Whether the dialog is open
     */
    isOpen,
    /**
     * Function to open the dialog
     */
    open() {
      send("OPEN");
    },
    /**
     * Function to close the dialog
     */
    close() {
      send("CLOSE");
    },
    triggerProps: normalize.button({
      ...dialog_anatomy.parts.trigger.attrs,
      id: dialog_dom.dom.getTriggerId(state.context),
      "aria-haspopup": "dialog",
      type: "button",
      "aria-expanded": isOpen,
      "aria-controls": dialog_dom.dom.getContentId(state.context),
      onClick() {
        send("TOGGLE");
      }
    }),
    backdropProps: normalize.element({
      ...dialog_anatomy.parts.backdrop.attrs,
      hidden: !isOpen,
      id: dialog_dom.dom.getBackdropId(state.context)
    }),
    containerProps: normalize.element({
      ...dialog_anatomy.parts.container.attrs,
      hidden: !isOpen,
      id: dialog_dom.dom.getContainerId(state.context),
      style: {
        pointerEvents: isOpen ? void 0 : "none"
      }
    }),
    contentProps: normalize.element({
      ...dialog_anatomy.parts.content.attrs,
      role: state.context.role,
      hidden: !isOpen,
      id: dialog_dom.dom.getContentId(state.context),
      tabIndex: -1,
      "aria-modal": true,
      "aria-label": ariaLabel || void 0,
      "aria-labelledby": ariaLabel || !rendered.title ? void 0 : dialog_dom.dom.getTitleId(state.context),
      "aria-describedby": rendered.description ? dialog_dom.dom.getDescriptionId(state.context) : void 0
    }),
    titleProps: normalize.element({
      ...dialog_anatomy.parts.title.attrs,
      id: dialog_dom.dom.getTitleId(state.context)
    }),
    descriptionProps: normalize.element({
      ...dialog_anatomy.parts.description.attrs,
      id: dialog_dom.dom.getDescriptionId(state.context)
    }),
    closeTriggerProps: normalize.button({
      ...dialog_anatomy.parts.closeTrigger.attrs,
      id: dialog_dom.dom.getCloseTriggerId(state.context),
      type: "button",
      onClick(event) {
        event.stopPropagation();
        send("CLOSE");
      }
    })
  };
}

exports.connect = connect;
