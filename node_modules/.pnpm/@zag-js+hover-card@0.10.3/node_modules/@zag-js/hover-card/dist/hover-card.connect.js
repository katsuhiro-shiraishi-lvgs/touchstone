'use strict';

Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });

const domQuery = require('@zag-js/dom-query');
const popper = require('@zag-js/popper');
const hoverCard_anatomy = require('./hover-card.anatomy.js');
const hoverCard_dom = require('./hover-card.dom.js');

function connect(state, send, normalize) {
  const isOpen = state.hasTag("open");
  const popperStyles = popper.getPlacementStyles({
    placement: state.context.currentPlacement
  });
  return {
    /**
     * Whether the hover card is open
     */
    isOpen,
    /**
     * Function to open the hover card
     */
    open() {
      send("OPEN");
    },
    /**
     * Function to close the hover card
     */
    close() {
      send("CLOSE");
    },
    /**
     * Function to reposition the popover
     */
    setPositioning(options = {}) {
      send({ type: "SET_POSITIONING", options });
    },
    arrowProps: normalize.element({
      id: hoverCard_dom.dom.getArrowId(state.context),
      ...hoverCard_anatomy.parts.arrow.attrs,
      style: popperStyles.arrow
    }),
    arrowTipProps: normalize.element({
      ...hoverCard_anatomy.parts.arrowTip.attrs,
      style: popperStyles.arrowTip
    }),
    triggerProps: normalize.element({
      ...hoverCard_anatomy.parts.trigger.attrs,
      "data-placement": state.context.currentPlacement,
      id: hoverCard_dom.dom.getTriggerId(state.context),
      "data-expanded": domQuery.dataAttr(isOpen),
      onPointerEnter(event) {
        if (event.pointerType === "touch")
          return;
        send({ type: "POINTER_ENTER", src: "trigger" });
      },
      onPointerLeave(event) {
        if (event.pointerType === "touch")
          return;
        send({ type: "POINTER_LEAVE", src: "trigger" });
      },
      onFocus() {
        send("TRIGGER_FOCUS");
      },
      onBlur() {
        send("TRIGGER_BLUR");
      },
      onTouchStart(event) {
        event.preventDefault();
      }
    }),
    positionerProps: normalize.element({
      id: hoverCard_dom.dom.getPositionerId(state.context),
      ...hoverCard_anatomy.parts.positioner.attrs,
      style: popperStyles.floating
    }),
    contentProps: normalize.element({
      ...hoverCard_anatomy.parts.content.attrs,
      id: hoverCard_dom.dom.getContentId(state.context),
      hidden: !isOpen,
      "data-expanded": domQuery.dataAttr(isOpen),
      "data-placement": state.context.currentPlacement,
      onPointerEnter(event) {
        if (event.pointerType === "touch")
          return;
        send({ type: "POINTER_ENTER", src: "content" });
      },
      onPointerLeave(event) {
        if (event.pointerType === "touch")
          return;
        send({ type: "POINTER_LEAVE", src: "content" });
      }
    })
  };
}

exports.connect = connect;
