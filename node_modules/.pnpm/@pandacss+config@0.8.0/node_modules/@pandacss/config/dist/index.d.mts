import { P as PathMapping } from './ts-config-paths-d717c9e2.js';
export { c as convertTsPathsToRegexes } from './ts-config-paths-d717c9e2.js';
import * as _pandacss_types from '@pandacss/types';
import { ConfigTsOptions, Config, LoadConfigResult } from '@pandacss/types';
import { TSConfig } from 'pkg-types';
export { mergeConfigs } from './merge-config.mjs';

declare function findConfigFile({ cwd, file }: {
    cwd: string;
    file?: string;
}): string | void;

type GetDepsOptions = {
    filename: string;
    ext: string;
    cwd: string;
    seen: Set<string>;
    baseUrl: string | undefined;
    pathMappings: PathMapping[];
    foundModuleAliases: Map<string, string>;
    compilerOptions?: TSConfig['compilerOptions'];
};
declare function getConfigDependencies(filePath: string, tsOptions?: ConfigTsOptions, compilerOptions?: TSConfig['compilerOptions']): {
    deps: Set<string>;
    aliases: Map<string, string>;
};

type Extendable<T> = T & {
    extend?: T;
};
type ExtendableConfig = Extendable<Config>;
/**
 * Recursively merge all presets into a single config
 */
declare function getResolvedConfig(config: ExtendableConfig, cwd: string): Promise<Config>;

type ConfigFileOptions = {
    cwd: string;
    file?: string;
};
declare function loadConfigFile(options: ConfigFileOptions): Promise<LoadConfigResult>;
declare function resolveConfigFile(result: Awaited<ReturnType<typeof bundleConfigFile>>, cwd: string): Promise<LoadConfigResult>;
declare function bundleConfigFile(options: ConfigFileOptions): Promise<{
    config: _pandacss_types.Config;
    path: string;
    dependencies: string[];
}>;

export { GetDepsOptions, bundleConfigFile, findConfigFile, getConfigDependencies, getResolvedConfig, loadConfigFile, resolveConfigFile };
