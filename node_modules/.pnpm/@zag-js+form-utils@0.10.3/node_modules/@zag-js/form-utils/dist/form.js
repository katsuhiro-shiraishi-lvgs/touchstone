'use strict';

Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });

const mutationObserver = require('@zag-js/mutation-observer');

function getClosestForm(el) {
  if (isFormElement(el))
    return el.form;
  else
    return el.closest("form");
}
function isFormElement(el) {
  return el.matches("textarea, input, select, button");
}
function trackFormReset(el, callback) {
  if (!el)
    return;
  const form = getClosestForm(el);
  form?.addEventListener("reset", callback, { passive: true });
  return () => {
    form?.removeEventListener("reset", callback);
  };
}
function trackFieldsetDisabled(el, callback) {
  const fieldset = el?.closest("fieldset");
  if (!fieldset)
    return;
  callback(fieldset.disabled);
  return mutationObserver.observeAttributes(fieldset, ["disabled"], () => callback(fieldset.disabled));
}
function isNativeDisabled(el) {
  return el.matches(":disabled");
}
function trackFormControl(el, options) {
  if (!el)
    return;
  const { onFieldsetDisabled, onFormReset } = options;
  const cleanups = [
    trackFormReset(el, onFormReset),
    trackFieldsetDisabled(el, (disabled) => {
      if (disabled)
        onFieldsetDisabled();
    })
  ];
  return () => {
    cleanups.forEach((cleanup) => cleanup?.());
  };
}

exports.getClosestForm = getClosestForm;
exports.isNativeDisabled = isNativeDisabled;
exports.trackFormControl = trackFormControl;
