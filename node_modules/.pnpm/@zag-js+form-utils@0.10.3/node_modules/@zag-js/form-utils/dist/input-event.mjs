const getWindow = (el) => el.ownerDocument.defaultView || window;
function getDescriptor(el, options) {
  const { type, property = "value" } = options;
  const proto = getWindow(el)[type].prototype;
  return Object.getOwnPropertyDescriptor(proto, property) ?? {};
}
function setElementValue(el, value, option) {
  const descriptor = getDescriptor(el, option);
  descriptor.set?.call(el, value);
}
function dispatchInputValueEvent(el, options) {
  if (!el)
    return;
  const win = getWindow(el);
  if (!(el instanceof win.HTMLInputElement))
    return;
  const { value, bubbles = true } = options;
  const descriptor = getDescriptor(el, {
    type: "HTMLInputElement",
    property: "value"
  });
  descriptor.set?.call(el, value);
  const event = new win.Event("input", { bubbles });
  el.dispatchEvent(event);
}
function dispatchInputCheckedEvent(el, options) {
  if (!el)
    return;
  const win = getWindow(el);
  if (!(el instanceof win.HTMLInputElement))
    return;
  const { checked, bubbles = true } = options;
  const descriptor = getDescriptor(el, {
    type: "HTMLInputElement",
    property: "checked"
  });
  descriptor.set?.call(el, checked);
  const event = new win.Event("click", { bubbles });
  el.dispatchEvent(event);
}

export { dispatchInputCheckedEvent, dispatchInputValueEvent, setElementValue };
