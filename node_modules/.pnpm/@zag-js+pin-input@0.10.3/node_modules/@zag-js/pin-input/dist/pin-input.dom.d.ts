import type { MachineContext as Ctx } from "./pin-input.types";
export declare const dom: {
    getRootNode: (ctx: {
        getRootNode?: (() => Node | ShadowRoot | Document) | undefined;
    }) => ShadowRoot | Document;
    getDoc: (ctx: {
        getRootNode?: (() => Node | ShadowRoot | Document) | undefined;
    }) => Document;
    getWin: (ctx: {
        getRootNode?: (() => Node | ShadowRoot | Document) | undefined;
    }) => Window & typeof globalThis;
    getActiveElement: (ctx: {
        getRootNode?: (() => Node | ShadowRoot | Document) | undefined;
    }) => HTMLElement | null;
    getById: <T extends HTMLElement = HTMLElement>(ctx: {
        getRootNode?: (() => Node | ShadowRoot | Document) | undefined;
    }, id: string) => T | null;
    queryById: <T_1 extends HTMLElement = HTMLElement>(ctx: {
        getRootNode?: (() => Node | ShadowRoot | Document) | undefined;
    }, id: string) => T_1;
} & {
    getRootId: (ctx: Ctx) => string;
    getInputId: (ctx: Ctx, id: string) => string;
    getHiddenInputId: (ctx: Ctx) => string;
    getLabelId: (ctx: Ctx) => string;
    getControlId: (ctx: Ctx) => string;
    getRootEl: (ctx: Ctx) => HTMLElement | null;
    getElements: (ctx: Ctx) => HTMLInputElement[];
    getInputEl: (ctx: Ctx, id: string) => HTMLInputElement | null;
    getFocusedInputEl: (ctx: Ctx) => HTMLInputElement;
    getFirstInputEl: (ctx: Ctx) => HTMLInputElement;
    getHiddenInputEl: (ctx: Ctx) => HTMLInputElement | null;
};
