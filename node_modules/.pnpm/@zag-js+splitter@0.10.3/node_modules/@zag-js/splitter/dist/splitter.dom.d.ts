import type { JSX } from "@zag-js/types";
import type { MachineContext as Ctx, PanelId } from "./splitter.types";
export declare const dom: {
    getRootNode: (ctx: {
        getRootNode?: (() => Node | ShadowRoot | Document) | undefined;
    }) => ShadowRoot | Document;
    getDoc: (ctx: {
        getRootNode?: (() => Node | ShadowRoot | Document) | undefined;
    }) => Document;
    getWin: (ctx: {
        getRootNode?: (() => Node | ShadowRoot | Document) | undefined;
    }) => Window & typeof globalThis;
    getActiveElement: (ctx: {
        getRootNode?: (() => Node | ShadowRoot | Document) | undefined;
    }) => HTMLElement | null;
    getById: <T extends HTMLElement = HTMLElement>(ctx: {
        getRootNode?: (() => Node | ShadowRoot | Document) | undefined;
    }, id: string) => T | null;
    queryById: <T_1 extends HTMLElement = HTMLElement>(ctx: {
        getRootNode?: (() => Node | ShadowRoot | Document) | undefined;
    }, id: string) => T_1;
} & {
    getRootId: (ctx: Ctx) => string;
    getResizeTriggerId: (ctx: Ctx, id: string) => string;
    getToggleTriggerId: (ctx: Ctx) => string;
    getLabelId: (ctx: Ctx) => string | ((id: string) => string);
    getPanelId: (ctx: Ctx, id: string | number) => string;
    globalCursorId: (ctx: Ctx) => string;
    getRootEl: (ctx: Ctx) => HTMLElement;
    getResizeTriggerEl: (ctx: Ctx, id: string) => HTMLElement | null;
    getPanelEl: (ctx: Ctx, id: string | number) => HTMLElement | null;
    getCursor(ctx: Ctx): (string & {}) | "col-resize" | "e-resize" | "n-resize" | "row-resize" | "s-resize" | "w-resize";
    getPanelStyle(ctx: Ctx, id: PanelId): JSX.CSSProperties;
    getActiveHandleEl(ctx: Ctx): HTMLElement | null | undefined;
    getResizeTriggerEls(ctx: Ctx): HTMLElement[];
    setupGlobalCursor(ctx: Ctx): void;
    removeGlobalCursor(ctx: Ctx): void;
};
