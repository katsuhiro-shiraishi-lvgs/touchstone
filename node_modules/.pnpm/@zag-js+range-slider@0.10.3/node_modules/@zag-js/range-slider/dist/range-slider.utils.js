'use strict';

Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });

const numericRange = require('@zag-js/numeric-range');

function normalizeValues(ctx, nextValues) {
  return nextValues.map((value, index, values) => {
    return constrainValue({ ...ctx, value: values }, value, index);
  });
}
function getRangeAtIndex(ctx, index) {
  return numericRange.getValueRanges(ctx.value, ctx.min, ctx.max, ctx.minStepsBetweenThumbs)[index];
}
function constrainValue(ctx, value, index) {
  const range = getRangeAtIndex(ctx, index);
  const snapValue = numericRange.snapValueToStep(value, ctx.min, ctx.max, ctx.step);
  return numericRange.clampValue(snapValue, range.min, range.max);
}
function decrement(ctx, index, step) {
  const idx = index ?? ctx.activeIndex;
  const range = getRangeAtIndex(ctx, idx);
  return numericRange.getPreviousStepValue(idx, {
    ...range,
    step: step ?? ctx.step,
    values: ctx.value
  });
}
function increment(ctx, index, step) {
  const idx = index ?? ctx.activeIndex;
  const range = getRangeAtIndex(ctx, idx);
  return numericRange.getNextStepValue(idx, {
    ...range,
    step: step ?? ctx.step,
    values: ctx.value
  });
}
function getClosestIndex(ctx, pointValue) {
  return numericRange.getClosestValueIndex(ctx.value, pointValue);
}
function assignArray(current, next) {
  for (let i = 0; i < next.length; i++) {
    const value = next[i];
    current[i] = value;
  }
}

exports.assignArray = assignArray;
exports.constrainValue = constrainValue;
exports.decrement = decrement;
exports.getClosestIndex = getClosestIndex;
exports.getRangeAtIndex = getRangeAtIndex;
exports.increment = increment;
exports.normalizeValues = normalizeValues;
