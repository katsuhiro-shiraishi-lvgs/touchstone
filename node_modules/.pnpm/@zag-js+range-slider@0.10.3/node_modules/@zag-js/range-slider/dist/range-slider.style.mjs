import { unstable__dom } from '@zag-js/slider';

function getBounds(value) {
  const firstValue = value[0];
  const lastThumb = value[value.length - 1];
  return [firstValue, lastThumb];
}
function getRangeOffsets(ctx) {
  const [firstPercent, lastPercent] = getBounds(ctx.valuePercent);
  return { start: `${firstPercent}%`, end: `${100 - lastPercent}%` };
}
function getVisibility(ctx) {
  let visibility = "visible";
  if (ctx.thumbAlignment === "contain" && !ctx.hasMeasuredThumbSize) {
    visibility = "hidden";
  }
  return visibility;
}
function getThumbStyle(ctx, index) {
  const placementProp = ctx.isVertical ? "bottom" : ctx.isRtl ? "right" : "left";
  return {
    visibility: getVisibility(ctx),
    position: "absolute",
    transform: "var(--slider-thumb-transform)",
    [placementProp]: `var(--slider-thumb-offset-${index})`
  };
}
function getRootStyle(ctx) {
  const range = getRangeOffsets(ctx);
  const offsetStyles = ctx.value.reduce((styles, value, index) => {
    const thumbSize = ctx.thumbSizes[index] ?? { width: 0, height: 0 };
    const offset = unstable__dom.getThumbOffset({ ...ctx, value, thumbSize });
    return { ...styles, [`--slider-thumb-offset-${index}`]: offset };
  }, {});
  return {
    ...offsetStyles,
    "--slider-thumb-transform": ctx.isVertical ? "translateY(50%)" : "translateX(-50%)",
    "--slider-range-start": range.start,
    "--slider-range-end": range.end
  };
}
const styleGetterFns = {
  getRootStyle,
  getControlStyle: unstable__dom.getControlStyle,
  getThumbStyle,
  getRangeStyle: unstable__dom.getRangeStyle,
  getMarkerStyle: unstable__dom.getMarkerStyle,
  getMarkerGroupStyle: unstable__dom.getMarkerGroupStyle
};

export { getRangeOffsets, styleGetterFns };
