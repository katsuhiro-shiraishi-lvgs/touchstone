'use strict';

Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });

const domEvent = require('@zag-js/dom-event');
const domQuery = require('@zag-js/dom-query');
const formUtils = require('@zag-js/form-utils');
const numericRange = require('@zag-js/numeric-range');
const rangeSlider_style = require('./range-slider.style.js');

const dom = domQuery.createScope({
  ...rangeSlider_style.styleGetterFns,
  getRootId: (ctx) => ctx.ids?.root ?? `slider:${ctx.id}`,
  getThumbId: (ctx, index) => ctx.ids?.thumb?.(index) ?? `slider:${ctx.id}:thumb:${index}`,
  getHiddenInputId: (ctx, index) => `slider:${ctx.id}:input:${index}`,
  getControlId: (ctx) => ctx.ids?.control ?? `slider:${ctx.id}:control`,
  getTrackId: (ctx) => ctx.ids?.track ?? `slider:${ctx.id}:track`,
  getRangeId: (ctx) => ctx.ids?.range ?? `slider:${ctx.id}:range`,
  getLabelId: (ctx) => ctx.ids?.label ?? `slider:${ctx.id}:label`,
  getOutputId: (ctx) => ctx.ids?.output ?? `slider:${ctx.id}:output`,
  getMarkerId: (ctx, value) => ctx.ids?.marker?.(value) ?? `slider:${ctx.id}:marker:${value}`,
  getRootEl: (ctx) => dom.getById(ctx, dom.getRootId(ctx)),
  getThumbEl: (ctx, index) => dom.getById(ctx, dom.getThumbId(ctx, index)),
  getHiddenInputEl: (ctx, index) => dom.getById(ctx, dom.getHiddenInputId(ctx, index)),
  getControlEl: (ctx) => dom.queryById(ctx, dom.getControlId(ctx)),
  getElements: (ctx) => domQuery.queryAll(dom.getControlEl(ctx), "[role=slider]"),
  getFirstEl: (ctx) => dom.getElements(ctx)[0],
  getRangeEl: (ctx) => dom.getById(ctx, dom.getRangeId(ctx)),
  getValueFromPoint(ctx, point) {
    const relativePoint = domEvent.getRelativePoint(point, dom.getControlEl(ctx));
    const percent = relativePoint.getPercentValue({
      orientation: ctx.orientation,
      dir: ctx.dir,
      inverted: { y: true }
    });
    return numericRange.getPercentValue(percent, ctx.min, ctx.max, ctx.step);
  },
  dispatchChangeEvent(ctx) {
    const valueArray = Array.from(ctx.value);
    valueArray.forEach((value, index) => {
      const inputEl = dom.getHiddenInputEl(ctx, index);
      if (!inputEl)
        return;
      formUtils.dispatchInputValueEvent(inputEl, { value });
    });
  }
});

exports.dom = dom;
