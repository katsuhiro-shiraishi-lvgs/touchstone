'use strict';

Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });

const utils = require('./utils.js');
const guard = require('./packages/utilities/core/src/guard.js');

const Truthy = () => true;
function exec(guardMap, ctx, event, meta) {
  return (guard$1) => {
    if (guard.isString(guard$1)) {
      return !!guardMap[guard$1]?.(ctx, event, meta);
    }
    if (guard.isFunction(guard$1)) {
      return guard$1(ctx, event, meta);
    }
    return guard$1.predicate(guardMap)(ctx, event, meta);
  };
}
function or(...conditions) {
  return {
    predicate: (guardMap) => (ctx, event, meta) => conditions.map(exec(guardMap, ctx, event, meta)).some(Boolean)
  };
}
function and(...conditions) {
  return {
    predicate: (guardMap) => (ctx, event, meta) => conditions.map(exec(guardMap, ctx, event, meta)).every(Boolean)
  };
}
function not(condition) {
  return {
    predicate: (guardMap) => (ctx, event, meta) => {
      return !exec(guardMap, ctx, event, meta)(condition);
    }
  };
}
function stateIn(...values) {
  return (_ctx, _evt, meta) => meta.state.matches(...values);
}
const guards = { or, and, not, stateIn };
function choose(actions) {
  return {
    predicate: (guardMap) => (ctx, event, meta) => actions.find((def) => {
      const guard = def.guard ?? Truthy;
      return exec(guardMap, ctx, event, meta)(guard);
    })?.actions
  };
}
function determineGuardFn(guard$1, guardMap) {
  guard$1 = guard$1 ?? Truthy;
  return (context, event, meta) => {
    if (guard.isString(guard$1)) {
      const value = guardMap[guard$1];
      return guard.isFunction(value) ? value(context, event, meta) : value;
    }
    if (utils.isGuardHelper(guard$1)) {
      return guard$1.predicate(guardMap)(context, event, meta);
    }
    return guard$1?.(context, event, meta);
  };
}
function determineActionsFn(values, guardMap) {
  return (context, event, meta) => {
    if (utils.isGuardHelper(values)) {
      return values.predicate(guardMap)(context, event, meta);
    }
    return values;
  };
}

exports.choose = choose;
exports.determineActionsFn = determineActionsFn;
exports.determineGuardFn = determineGuardFn;
exports.guards = guards;
