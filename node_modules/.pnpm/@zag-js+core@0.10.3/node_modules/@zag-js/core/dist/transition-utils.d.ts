import type { Dict, StateMachine as S } from "./types";
/**
 * A transition is an object that describes the next state, or/and actions
 * that should run when an event is sent.
 *
 * Transitions can be specified as:
 * - A single string: "spinning"
 * - An object with `target`, `actions`, or `guard`: { target: "spinning", actions: [...], guard: isValid }
 * - An array of possible transitions. In this case, we'll pick the first matching transition
 * depending on the `guard` specified
 */
export declare function toTarget<TContext extends Dict, TState extends S.StateSchema, TEvent extends S.EventObject>(target: S.Transition<TContext, TState, TEvent>): S.TransitionDefinition<TContext, TState, TEvent>;
export declare function determineTransitionFn<TContext extends Dict, TState extends S.StateSchema, TEvent extends S.EventObject>(transitions: S.Transitions<TContext, TState, TEvent> | undefined, guardMap: S.GuardMap<TContext, TState, TEvent>): (context: TContext, event: TEvent, meta: S.GuardMeta<TContext, TState, TEvent>) => S.TransitionDefinition<TContext, TState, TEvent> | undefined;
