'use strict';

Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });

const domEvent = require('@zag-js/dom-event');
const domQuery = require('@zag-js/dom-query');
const tabs_anatomy = require('./tabs.anatomy.js');
const tabs_dom = require('./tabs.dom.js');

function connect(state, send, normalize) {
  const translations = state.context.translations;
  const isFocused = state.matches("focused");
  return {
    /**
     * The current value of the tabs.
     */
    value: state.context.value,
    /**
     * The value of the tab that is currently focused.
     */
    focusedValue: state.context.focusedValue,
    /**
     * The previous values of the tabs in sequence of selection.
     */
    previousValues: Array.from(state.context.previousValues),
    /**
     * Sets the value of the tabs.
     */
    setValue(value) {
      send({ type: "SET_VALUE", value });
    },
    /**
     * Clears the value of the tabs.
     */
    clearValue() {
      send({ type: "CLEAR_VALUE" });
    },
    /**
     * Sets the indicator rect to the tab with the given id.
     */
    setIndicatorRect(id) {
      send({ type: "SET_INDICATOR_RECT", id });
    },
    rootProps: normalize.element({
      ...tabs_anatomy.parts.root.attrs,
      id: tabs_dom.dom.getRootId(state.context),
      "data-orientation": state.context.orientation,
      "data-focus": domQuery.dataAttr(isFocused),
      dir: state.context.dir
    }),
    tablistProps: normalize.element({
      ...tabs_anatomy.parts.tablist.attrs,
      id: tabs_dom.dom.getTablistId(state.context),
      role: "tablist",
      "data-focus": domQuery.dataAttr(isFocused),
      "aria-orientation": state.context.orientation,
      "data-orientation": state.context.orientation,
      "aria-label": translations.tablistLabel,
      onKeyDown(event) {
        const keyMap = {
          ArrowDown() {
            send("ARROW_DOWN");
          },
          ArrowUp() {
            send("ARROW_UP");
          },
          ArrowLeft() {
            send("ARROW_LEFT");
          },
          ArrowRight() {
            send("ARROW_RIGHT");
          },
          Home() {
            send("HOME");
          },
          End() {
            send("END");
          },
          Enter() {
            send({ type: "ENTER", value: state.context.focusedValue });
          }
        };
        let key = domEvent.getEventKey(event, state.context);
        const exec = keyMap[key];
        if (exec) {
          event.preventDefault();
          exec(event);
        }
      }
    }),
    getTriggerProps(props) {
      const { value, disabled } = props;
      const selected = state.context.value === value;
      return normalize.button({
        ...tabs_anatomy.parts.trigger.attrs,
        role: "tab",
        type: "button",
        disabled,
        "data-orientation": state.context.orientation,
        "data-disabled": domQuery.dataAttr(disabled),
        "aria-disabled": disabled,
        "data-value": value,
        "aria-selected": selected,
        "data-selected": domQuery.dataAttr(selected),
        "aria-controls": tabs_dom.dom.getContentId(state.context, value),
        "data-ownedby": tabs_dom.dom.getTablistId(state.context),
        id: tabs_dom.dom.getTriggerId(state.context, value),
        tabIndex: selected ? 0 : -1,
        onFocus() {
          send({ type: "TAB_FOCUS", value });
        },
        onBlur(event) {
          const target = event.relatedTarget;
          if (target?.getAttribute("role") !== "tab") {
            send({ type: "TAB_BLUR" });
          }
        },
        onClick(event) {
          if (disabled)
            return;
          if (domQuery.isSafari()) {
            event.currentTarget.focus();
          }
          send({ type: "TAB_CLICK", value });
        }
      });
    },
    contentGroupProps: normalize.element({
      ...tabs_anatomy.parts.contentGroup.attrs,
      id: tabs_dom.dom.getContentGroupId(state.context),
      "data-orientation": state.context.orientation
    }),
    getContentProps({ value }) {
      const selected = state.context.value === value;
      return normalize.element({
        ...tabs_anatomy.parts.content.attrs,
        id: tabs_dom.dom.getContentId(state.context, value),
        tabIndex: 0,
        "aria-labelledby": tabs_dom.dom.getTriggerId(state.context, value),
        role: "tabpanel",
        "data-ownedby": tabs_dom.dom.getTablistId(state.context),
        hidden: !selected
      });
    },
    indicatorProps: normalize.element({
      id: tabs_dom.dom.getIndicatorId(state.context),
      ...tabs_anatomy.parts.indicator.attrs,
      "data-orientation": state.context.orientation,
      style: {
        "--transition-duration": "150ms",
        "--transition-property": "left, right, top, bottom, width, height",
        position: "absolute",
        willChange: "var(--transition-property)",
        transitionProperty: "var(--transition-property)",
        transitionDuration: state.context.canIndicatorTransition ? "var(--transition-duration)" : "0ms",
        transitionTimingFunction: "var(--transition-timing-function)",
        ...state.context.indicatorRect
      }
    })
  };
}

exports.connect = connect;
