import type { MachineContext as Ctx } from "./tabs.types";
export declare const dom: {
    getRootNode: (ctx: {
        getRootNode?: (() => Node | ShadowRoot | Document) | undefined;
    }) => ShadowRoot | Document;
    getDoc: (ctx: {
        getRootNode?: (() => Node | ShadowRoot | Document) | undefined;
    }) => Document;
    getWin: (ctx: {
        getRootNode?: (() => Node | ShadowRoot | Document) | undefined;
    }) => Window & typeof globalThis;
    getActiveElement: (ctx: {
        getRootNode?: (() => Node | ShadowRoot | Document) | undefined;
    }) => HTMLElement | null;
    getById: <T extends HTMLElement = HTMLElement>(ctx: {
        getRootNode?: (() => Node | ShadowRoot | Document) | undefined;
    }, id: string) => T | null;
    queryById: <T_1 extends HTMLElement = HTMLElement>(ctx: {
        getRootNode?: (() => Node | ShadowRoot | Document) | undefined;
    }, id: string) => T_1;
} & {
    getRootId: (ctx: Ctx) => string;
    getTablistId: (ctx: Ctx) => string;
    getContentId: (ctx: Ctx, id: string) => string;
    getContentGroupId: (ctx: Ctx) => string;
    getTriggerId: (ctx: Ctx, id: string) => string;
    getIndicatorId: (ctx: Ctx) => string;
    getTablistEl: (ctx: Ctx) => HTMLElement | null;
    getContentEl: (ctx: Ctx, id: string) => HTMLElement | null;
    getTriggerEl: (ctx: Ctx, id: string) => HTMLElement | null;
    getIndicatorEl: (ctx: Ctx) => HTMLElement | null;
    getElements: (ctx: Ctx) => HTMLElement[];
    getFirstEl: (ctx: Ctx) => HTMLElement | undefined;
    getLastEl: (ctx: Ctx) => HTMLElement | undefined;
    getNextEl: (ctx: Ctx, id: string) => HTMLElement;
    getPrevEl: (ctx: Ctx, id: string) => HTMLElement | null;
    getActiveContentEl: (ctx: Ctx) => HTMLElement | null | undefined;
    getActiveTabEl: (ctx: Ctx) => HTMLElement | null | undefined;
    getOffsetRect: (el: HTMLElement | undefined) => {
        left: number;
        top: number;
        width: number;
        height: number;
    };
    getRectById: (ctx: Ctx, id: string) => {
        [x: string]: string;
    };
    resolveRect(rect: Record<"width" | "height" | "left" | "top", number>, orientation?: "horizontal" | "vertical"): {
        [x: string]: string;
    };
};
