'use strict';

Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });

const domQuery = require('@zag-js/dom-query');
const formUtils = require('@zag-js/form-utils');

const dom = domQuery.createScope({
  getRootId: (ctx) => ctx.ids?.root ?? `tags-input:${ctx.id}`,
  getInputId: (ctx) => ctx.ids?.input ?? `tags-input:${ctx.id}:input`,
  getClearTriggerId: (ctx) => ctx.ids?.clearBtn ?? `tags-input:${ctx.id}:clear-btn`,
  getHiddenInputId: (ctx) => `tags-input:${ctx.id}:hidden-input`,
  getLabelId: (ctx) => ctx.ids?.label ?? `tags-input:${ctx.id}:label`,
  getControlId: (ctx) => ctx.ids?.control ?? `tags-input:${ctx.id}:control`,
  getTagId: (ctx, opt) => ctx.ids?.tag?.(opt) ?? `tags-input:${ctx.id}:tag:${opt.value}:${opt.index}`,
  getTagDeleteTriggerId: (ctx, opt) => ctx.ids?.tagDeleteTrigger?.(opt) ?? `${dom.getTagId(ctx, opt)}:delete-btn`,
  getTagInputId: (ctx, opt) => ctx.ids?.tagInput?.(opt) ?? `${dom.getTagId(ctx, opt)}:input`,
  getEditInputId: (ctx) => `${ctx.editedId}:input`,
  getTagInputEl: (ctx, opt) => dom.getById(ctx, dom.getTagInputId(ctx, opt)),
  getRootEl: (ctx) => dom.getById(ctx, dom.getRootId(ctx)),
  getInputEl: (ctx) => dom.getById(ctx, dom.getInputId(ctx)),
  getHiddenInputEl: (ctx) => dom.getById(ctx, dom.getHiddenInputId(ctx)),
  getEditInputEl: (ctx) => dom.getById(ctx, dom.getEditInputId(ctx)),
  getElements: (ctx) => domQuery.queryAll(dom.getRootEl(ctx), `[data-part=tag]:not([data-disabled])`),
  getFirstEl: (ctx) => dom.getElements(ctx)[0],
  getLastEl: (ctx) => dom.getElements(ctx)[dom.getElements(ctx).length - 1],
  getPrevEl: (ctx, id) => domQuery.prevById(dom.getElements(ctx), id, false),
  getNextEl: (ctx, id) => domQuery.nextById(dom.getElements(ctx), id, false),
  getElAtIndex: (ctx, index) => dom.getElements(ctx)[index],
  getIndexOfId: (ctx, id) => domQuery.indexOfId(dom.getElements(ctx), id),
  isInputFocused: (ctx) => dom.getDoc(ctx).activeElement === dom.getInputEl(ctx),
  getFocusedTagValue: (ctx) => {
    if (!ctx.focusedId)
      return null;
    const idx = dom.getIndexOfId(ctx, ctx.focusedId);
    if (idx === -1)
      return null;
    return dom.getElements(ctx)[idx].dataset.value ?? null;
  },
  setHoverIntent: (el) => {
    const tag = el.closest("[data-part=tag]");
    if (!tag)
      return;
    tag.dataset.deleteIntent = "";
  },
  clearHoverIntent: (el) => {
    const tag = el.closest("[data-part=tag]");
    if (!tag)
      return;
    delete tag.dataset.deleteIntent;
  },
  dispatchInputEvent(ctx) {
    const inputEl = dom.getHiddenInputEl(ctx);
    if (!inputEl)
      return;
    formUtils.dispatchInputValueEvent(inputEl, { value: ctx.valueAsString });
  }
});

exports.dom = dom;
