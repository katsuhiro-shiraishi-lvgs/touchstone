import type { MachineContext as Ctx, TagProps } from "./tags-input.types";
export declare const dom: {
    getRootNode: (ctx: {
        getRootNode?: (() => Node | ShadowRoot | Document) | undefined;
    }) => ShadowRoot | Document;
    getDoc: (ctx: {
        getRootNode?: (() => Node | ShadowRoot | Document) | undefined;
    }) => Document;
    getWin: (ctx: {
        getRootNode?: (() => Node | ShadowRoot | Document) | undefined;
    }) => Window & typeof globalThis;
    getActiveElement: (ctx: {
        getRootNode?: (() => Node | ShadowRoot | Document) | undefined;
    }) => HTMLElement | null;
    getById: <T extends HTMLElement = HTMLElement>(ctx: {
        getRootNode?: (() => Node | ShadowRoot | Document) | undefined;
    }, id: string) => T | null;
    queryById: <T_1 extends HTMLElement = HTMLElement>(ctx: {
        getRootNode?: (() => Node | ShadowRoot | Document) | undefined;
    }, id: string) => T_1;
} & {
    getRootId: (ctx: Ctx) => string;
    getInputId: (ctx: Ctx) => string;
    getClearTriggerId: (ctx: Ctx) => string;
    getHiddenInputId: (ctx: Ctx) => string;
    getLabelId: (ctx: Ctx) => string;
    getControlId: (ctx: Ctx) => string;
    getTagId: (ctx: Ctx, opt: TagProps) => string;
    getTagDeleteTriggerId: (ctx: Ctx, opt: TagProps) => string;
    getTagInputId: (ctx: Ctx, opt: TagProps) => string;
    getEditInputId: (ctx: Ctx) => string;
    getTagInputEl: (ctx: Ctx, opt: TagProps) => HTMLInputElement | null;
    getRootEl: (ctx: Ctx) => HTMLElement | null;
    getInputEl: (ctx: Ctx) => HTMLInputElement | null;
    getHiddenInputEl: (ctx: Ctx) => HTMLInputElement | null;
    getEditInputEl: (ctx: Ctx) => HTMLInputElement | null;
    getElements: (ctx: Ctx) => HTMLElement[];
    getFirstEl: (ctx: Ctx) => HTMLElement;
    getLastEl: (ctx: Ctx) => HTMLElement;
    getPrevEl: (ctx: Ctx, id: string) => HTMLElement | null;
    getNextEl: (ctx: Ctx, id: string) => HTMLElement;
    getElAtIndex: (ctx: Ctx, index: number) => HTMLElement;
    getIndexOfId: (ctx: Ctx, id: string) => number;
    isInputFocused: (ctx: Ctx) => boolean;
    getFocusedTagValue: (ctx: Ctx) => string | null;
    setHoverIntent: (el: Element) => void;
    clearHoverIntent: (el: Element) => void;
    dispatchInputEvent(ctx: Ctx): void;
};
