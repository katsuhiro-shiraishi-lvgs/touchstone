'use strict';

Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });

const numericRange = require('@zag-js/numeric-range');

function getVerticalThumbOffset(ctx) {
  const { height = 0 } = ctx.thumbSize ?? {};
  const getValue = numericRange.getValueTransformer([ctx.min, ctx.max], [-height / 2, height / 2]);
  return parseFloat(getValue(ctx.value).toFixed(2));
}
function getHorizontalThumbOffset(ctx) {
  const { width = 0 } = ctx.thumbSize ?? {};
  if (ctx.isRtl) {
    const getValue2 = numericRange.getValueTransformer([ctx.max, ctx.min], [-width * 1.5, -width / 2]);
    return -1 * parseFloat(getValue2(ctx.value).toFixed(2));
  }
  const getValue = numericRange.getValueTransformer([ctx.min, ctx.max], [-width / 2, width / 2]);
  return parseFloat(getValue(ctx.value).toFixed(2));
}
function getThumbOffset(ctx) {
  const percent = numericRange.getValuePercent(ctx.value, ctx.min, ctx.max) * 100;
  if (ctx.thumbAlignment === "center") {
    return `${percent}%`;
  }
  const offset = ctx.isVertical ? getVerticalThumbOffset(ctx) : getHorizontalThumbOffset(ctx);
  return `calc(${percent}% - ${offset}px)`;
}
function getVisibility(ctx) {
  let visibility = "visible";
  if (ctx.thumbAlignment === "contain" && !ctx.hasMeasuredThumbSize) {
    visibility = "hidden";
  }
  return visibility;
}
function getThumbStyle(ctx) {
  const placementProp = ctx.isVertical ? "bottom" : ctx.isRtl ? "right" : "left";
  return {
    visibility: getVisibility(ctx),
    position: "absolute",
    transform: "var(--slider-thumb-transform)",
    [placementProp]: "var(--slider-thumb-offset)"
  };
}
function getRangeOffsets(ctx) {
  let start = "0%";
  let end = `${100 - ctx.valuePercent}%`;
  if (ctx.origin === "center") {
    const isNegative = ctx.valuePercent < 50;
    start = isNegative ? `${ctx.valuePercent}%` : "50%";
    end = isNegative ? "50%" : end;
  }
  return { start, end };
}
function getRangeStyle(ctx) {
  if (ctx.isVertical) {
    return {
      position: "absolute",
      bottom: "var(--slider-range-start)",
      top: "var(--slider-range-end)"
    };
  }
  return {
    position: "absolute",
    [ctx.isRtl ? "right" : "left"]: "var(--slider-range-start)",
    [ctx.isRtl ? "left" : "right"]: "var(--slider-range-end)"
  };
}
function getControlStyle() {
  return {
    touchAction: "none",
    userSelect: "none",
    position: "relative"
  };
}
function getRootStyle(ctx) {
  const range = getRangeOffsets(ctx);
  return {
    "--slider-thumb-transform": ctx.isVertical ? "translateY(50%)" : "translateX(-50%)",
    "--slider-thumb-offset": getThumbOffset(ctx),
    "--slider-range-start": range.start,
    "--slider-range-end": range.end
  };
}
function getMarkerStyle(ctx, percent) {
  return {
    position: "absolute",
    pointerEvents: "none",
    [ctx.isHorizontal ? "left" : "bottom"]: `${(ctx.isRtl ? 1 - percent : percent) * 100}%`
  };
}
function getLabelStyle() {
  return { userSelect: "none" };
}
function getTrackStyle() {
  return { position: "relative" };
}
function getMarkerGroupStyle() {
  return {
    userSelect: "none",
    pointerEvents: "none",
    position: "relative"
  };
}
const styles = {
  getThumbOffset,
  getControlStyle,
  getThumbStyle,
  getRangeStyle,
  getRootStyle,
  getMarkerStyle,
  getLabelStyle,
  getTrackStyle,
  getMarkerGroupStyle
};

exports.styles = styles;
