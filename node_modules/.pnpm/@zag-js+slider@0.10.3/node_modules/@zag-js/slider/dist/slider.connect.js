'use strict';

Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });

const domEvent = require('@zag-js/dom-event');
const domQuery = require('@zag-js/dom-query');
const numericRange = require('@zag-js/numeric-range');
const slider_anatomy = require('./slider.anatomy.js');
const slider_dom = require('./slider.dom.js');

function connect(state, send, normalize) {
  const ariaLabel = state.context["aria-label"];
  const ariaLabelledBy = state.context["aria-labelledby"];
  const ariaValueText = state.context.getAriaValueText?.(state.context.value);
  const isFocused = state.matches("focus");
  const isDragging = state.matches("dragging");
  const isDisabled = state.context.disabled;
  const isInteractive = state.context.isInteractive;
  const isInvalid = state.context.invalid;
  function getPercentValueFn(percent) {
    return numericRange.getPercentValue(percent, state.context.min, state.context.max, state.context.step);
  }
  function getValuePercentFn(value) {
    return numericRange.getValuePercent(value, state.context.min, state.context.max);
  }
  return {
    /**
     * Whether the slider is focused.
     */
    isFocused,
    /**
     * Whether the slider is being dragged.
     */
    isDragging,
    /**
     * The value of the slider.
     */
    value: state.context.value,
    /**
     * The value of the slider as a percent.
     */
    percent: numericRange.getValuePercent(state.context.value, state.context.min, state.context.max),
    /**
     * Function to set the value of the slider.
     */
    setValue(value) {
      send({ type: "SET_VALUE", value });
    },
    /**
     * Returns the value of the slider at the given percent.
     */
    getPercentValue: getPercentValueFn,
    /**
     * Returns the percent of the slider at the given value.
     */
    getValuePercent: getValuePercentFn,
    /**
     * Function to focus the slider.
     */
    focus() {
      slider_dom.dom.getThumbEl(state.context)?.focus();
    },
    /**
     * Function to increment the value of the slider by the step.
     */
    increment() {
      send("INCREMENT");
    },
    /**
     * Function to decrement the value of the slider by the step.
     */
    decrement() {
      send("DECREMENT");
    },
    rootProps: normalize.element({
      ...slider_anatomy.parts.root.attrs,
      "data-disabled": domQuery.dataAttr(isDisabled),
      "data-focus": domQuery.dataAttr(isFocused),
      "data-orientation": state.context.orientation,
      "data-invalid": domQuery.dataAttr(isInvalid),
      id: slider_dom.dom.getRootId(state.context),
      dir: state.context.dir,
      style: slider_dom.dom.getRootStyle(state.context)
    }),
    labelProps: normalize.label({
      ...slider_anatomy.parts.label.attrs,
      "data-disabled": domQuery.dataAttr(isDisabled),
      "data-invalid": domQuery.dataAttr(isInvalid),
      "data-focus": domQuery.dataAttr(isFocused),
      id: slider_dom.dom.getLabelId(state.context),
      htmlFor: slider_dom.dom.getHiddenInputId(state.context),
      onClick(event) {
        if (!isInteractive)
          return;
        event.preventDefault();
        slider_dom.dom.getThumbEl(state.context)?.focus();
      },
      style: slider_dom.dom.getLabelStyle()
    }),
    thumbProps: normalize.element({
      ...slider_anatomy.parts.thumb.attrs,
      id: slider_dom.dom.getThumbId(state.context),
      "data-disabled": domQuery.dataAttr(isDisabled),
      "data-orientation": state.context.orientation,
      "data-focus": domQuery.dataAttr(isFocused),
      draggable: false,
      "aria-invalid": domQuery.ariaAttr(isInvalid),
      "data-invalid": domQuery.dataAttr(isInvalid),
      "aria-disabled": domQuery.ariaAttr(isDisabled),
      "aria-label": ariaLabel,
      "aria-labelledby": ariaLabel ? void 0 : ariaLabelledBy ?? slider_dom.dom.getLabelId(state.context),
      "aria-orientation": state.context.orientation,
      "aria-valuemax": state.context.max,
      "aria-valuemin": state.context.min,
      "aria-valuenow": state.context.value,
      "aria-valuetext": ariaValueText,
      role: "slider",
      tabIndex: isDisabled ? void 0 : 0,
      onBlur() {
        if (!isInteractive)
          return;
        send("BLUR");
      },
      onFocus() {
        if (!isInteractive)
          return;
        send("FOCUS");
      },
      onKeyDown(event) {
        if (!isInteractive)
          return;
        const step = domEvent.getEventStep(event) * state.context.step;
        let prevent = true;
        const keyMap = {
          ArrowUp() {
            send({ type: "ARROW_UP", step });
            prevent = state.context.isVertical;
          },
          ArrowDown() {
            send({ type: "ARROW_DOWN", step });
            prevent = state.context.isVertical;
          },
          ArrowLeft() {
            send({ type: "ARROW_LEFT", step });
            prevent = state.context.isHorizontal;
          },
          ArrowRight() {
            send({ type: "ARROW_RIGHT", step });
            prevent = state.context.isHorizontal;
          },
          PageUp() {
            send({ type: "PAGE_UP", step });
          },
          PageDown() {
            send({ type: "PAGE_DOWN", step });
          },
          Home() {
            send("HOME");
          },
          End() {
            send("END");
          }
        };
        const key = domEvent.getEventKey(event, state.context);
        const exec = keyMap[key];
        if (!exec)
          return;
        exec(event);
        if (prevent) {
          event.preventDefault();
        }
      },
      style: slider_dom.dom.getThumbStyle(state.context)
    }),
    hiddenInputProps: normalize.input({
      ...slider_anatomy.parts.hiddenInput.attrs,
      type: "text",
      defaultValue: state.context.value,
      name: state.context.name,
      form: state.context.form,
      id: slider_dom.dom.getHiddenInputId(state.context),
      hidden: true
    }),
    outputProps: normalize.output({
      ...slider_anatomy.parts.output.attrs,
      "data-disabled": domQuery.dataAttr(isDisabled),
      "data-invalid": domQuery.dataAttr(isInvalid),
      id: slider_dom.dom.getOutputId(state.context),
      htmlFor: slider_dom.dom.getHiddenInputId(state.context),
      "aria-live": "off"
    }),
    trackProps: normalize.element({
      ...slider_anatomy.parts.track.attrs,
      id: slider_dom.dom.getTrackId(state.context),
      "data-disabled": domQuery.dataAttr(isDisabled),
      "data-focus": domQuery.dataAttr(isFocused),
      "data-invalid": domQuery.dataAttr(isInvalid),
      "data-orientation": state.context.orientation,
      style: slider_dom.dom.getTrackStyle()
    }),
    rangeProps: normalize.element({
      ...slider_anatomy.parts.range.attrs,
      id: slider_dom.dom.getRangeId(state.context),
      "data-focus": domQuery.dataAttr(isFocused),
      "data-invalid": domQuery.dataAttr(isInvalid),
      "data-disabled": domQuery.dataAttr(isDisabled),
      "data-orientation": state.context.orientation,
      style: slider_dom.dom.getRangeStyle(state.context)
    }),
    controlProps: normalize.element({
      ...slider_anatomy.parts.control.attrs,
      id: slider_dom.dom.getControlId(state.context),
      "data-disabled": domQuery.dataAttr(isDisabled),
      "data-invalid": domQuery.dataAttr(isInvalid),
      "data-orientation": state.context.orientation,
      "data-focus": domQuery.dataAttr(isFocused),
      onPointerDown(event) {
        if (!isInteractive)
          return;
        const evt = domEvent.getNativeEvent(event);
        if (!domEvent.isLeftClick(evt) || domEvent.isModifiedEvent(evt))
          return;
        const point = domEvent.getEventPoint(evt);
        send({ type: "POINTER_DOWN", point });
        event.preventDefault();
        event.stopPropagation();
      },
      style: slider_dom.dom.getControlStyle()
    }),
    markerGroupProps: normalize.element({
      ...slider_anatomy.parts.markerGroup.attrs,
      role: "presentation",
      "aria-hidden": true,
      "data-orientation": state.context.orientation,
      style: slider_dom.dom.getMarkerGroupStyle()
    }),
    getMarkerProps({ value }) {
      const percent = getValuePercentFn(value);
      const style = slider_dom.dom.getMarkerStyle(state.context, percent);
      const markerState = value > state.context.value ? "over-value" : value < state.context.value ? "under-value" : "at-value";
      return normalize.element({
        ...slider_anatomy.parts.marker.attrs,
        id: slider_dom.dom.getMarkerId(state.context, value),
        role: "presentation",
        "data-orientation": state.context.orientation,
        "data-value": value,
        "data-disabled": domQuery.dataAttr(isDisabled),
        "data-state": markerState,
        style
      });
    }
  };
}

exports.connect = connect;
