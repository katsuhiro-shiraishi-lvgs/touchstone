import type { JSX } from '@zag-js/types';
import type { SharedContext, MachineContext as Ctx,  Point } from './slider.types';
export declare const dom: {
    getRootNode: (ctx: {
        getRootNode?: (() => Node | ShadowRoot | Document) | undefined;
    }) => ShadowRoot | Document;
    getDoc: (ctx: {
        getRootNode?: (() => Node | ShadowRoot | Document) | undefined;
    }) => Document;
    getWin: (ctx: {
        getRootNode?: (() => Node | ShadowRoot | Document) | undefined;
    }) => Window & typeof globalThis;
    getActiveElement: (ctx: {
        getRootNode?: (() => Node | ShadowRoot | Document) | undefined;
    }) => HTMLElement | null;
    getById: <T extends HTMLElement = HTMLElement>(ctx: {
        getRootNode?: (() => Node | ShadowRoot | Document) | undefined;
    }, id: string) => T | null;
    queryById: <T_1 extends HTMLElement = HTMLElement>(ctx: {
        getRootNode?: (() => Node | ShadowRoot | Document) | undefined;
    }, id: string) => T_1;
} & {
    getRootId: (ctx: Ctx) => string;
    getThumbId: (ctx: Ctx) => string;
    getControlId: (ctx: Ctx) => string;
    getHiddenInputId: (ctx: Ctx) => string;
    getOutputId: (ctx: Ctx) => string;
    getTrackId: (ctx: Ctx) => string;
    getRangeId: (ctx: Ctx) => string;
    getLabelId: (ctx: Ctx) => string;
    getMarkerId: (ctx: Ctx, value: number) => string;
    getRootEl: (ctx: Ctx) => HTMLElement | null;
    getThumbEl: (ctx: Ctx) => HTMLElement | null;
    getControlEl: (ctx: Ctx) => HTMLElement;
    getHiddenInputEl: (ctx: Ctx) => HTMLInputElement | null;
    getValueFromPoint(ctx: Ctx, point: Point): number | undefined;
    dispatchChangeEvent(ctx: Ctx): void;
    getThumbOffset: (ctx: SharedContext) => string;
    getControlStyle: () => JSX.CSSProperties;
    getThumbStyle: (ctx: SharedContext) => JSX.CSSProperties;
    getRangeStyle: (ctx: Pick<SharedContext, "isVertical" | "isRtl">) => JSX.CSSProperties;
    getRootStyle: (ctx: Ctx) => JSX.CSSProperties;
    getMarkerStyle: (ctx: Pick<SharedContext, "isHorizontal" | "isRtl">, percent: number) => JSX.CSSProperties;
    getLabelStyle: () => JSX.CSSProperties;
    getTrackStyle: () => JSX.CSSProperties;
    getMarkerGroupStyle: () => JSX.CSSProperties;
};
