'use strict';

Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });

const domQuery = require('@zag-js/dom-query');
const popper = require('@zag-js/popper');
const visuallyHidden = require('@zag-js/visually-hidden');
const tooltip_anatomy = require('./tooltip.anatomy.js');
const tooltip_dom = require('./tooltip.dom.js');
const tooltip_store = require('./tooltip.store.js');

function connect(state, send, normalize) {
  const id = state.context.id;
  const hasAriaLabel = state.context.hasAriaLabel;
  const isOpen = state.hasTag("open");
  const triggerId = tooltip_dom.dom.getTriggerId(state.context);
  const contentId = tooltip_dom.dom.getContentId(state.context);
  const isDisabled = state.context.disabled;
  const popperStyles = popper.getPlacementStyles({
    placement: state.context.currentPlacement
  });
  return {
    /**
     * Whether the tooltip is open.
     */
    isOpen,
    /**
     * Function to open the tooltip.
     */
    open() {
      send("OPEN");
    },
    /**
     * Function to close the tooltip.
     */
    close() {
      send("CLOSE");
    },
    /**
     * Returns the animation state of the tooltip.
     */
    getAnimationState() {
      return {
        enter: tooltip_store.store.prevId === null && id === tooltip_store.store.id,
        exit: tooltip_store.store.id === null
      };
    },
    /**
     * Function to reposition the popover
     */
    setPositioning(options = {}) {
      send({ type: "SET_POSITIONING", options });
    },
    triggerProps: normalize.button({
      ...tooltip_anatomy.parts.trigger.attrs,
      id: triggerId,
      "data-expanded": domQuery.dataAttr(isOpen),
      "aria-describedby": isOpen ? contentId : void 0,
      onClick() {
        send("CLICK");
      },
      onFocus() {
        send("FOCUS");
      },
      onBlur() {
        if (id === tooltip_store.store.id) {
          send("BLUR");
        }
      },
      onPointerDown() {
        if (isDisabled)
          return;
        if (id === tooltip_store.store.id) {
          send("POINTER_DOWN");
        }
      },
      onPointerMove() {
        if (isDisabled)
          return;
        send("POINTER_ENTER");
      },
      onPointerLeave() {
        if (isDisabled)
          return;
        send("POINTER_LEAVE");
      },
      onPointerCancel() {
        if (isDisabled)
          return;
        send("POINTER_LEAVE");
      }
    }),
    arrowProps: normalize.element({
      id: tooltip_dom.dom.getArrowId(state.context),
      ...tooltip_anatomy.parts.arrow.attrs,
      style: popperStyles.arrow
    }),
    arrowTipProps: normalize.element({
      ...tooltip_anatomy.parts.arrowTip.attrs,
      style: popperStyles.arrowTip
    }),
    positionerProps: normalize.element({
      id: tooltip_dom.dom.getPositionerId(state.context),
      ...tooltip_anatomy.parts.positioner.attrs,
      style: popperStyles.floating
    }),
    contentProps: normalize.element({
      ...tooltip_anatomy.parts.content.attrs,
      hidden: !isOpen,
      role: hasAriaLabel ? void 0 : "tooltip",
      id: hasAriaLabel ? void 0 : contentId,
      "data-placement": state.context.currentPlacement,
      onPointerEnter() {
        send("TOOLTIP_POINTER_ENTER");
      },
      onPointerLeave() {
        send("TOOLTIP_POINTER_LEAVE");
      },
      style: {
        pointerEvents: state.context.interactive ? "auto" : "none"
      }
    }),
    labelProps: normalize.element({
      ...tooltip_anatomy.parts.label.attrs,
      id: contentId,
      role: "tooltip",
      style: visuallyHidden.visuallyHiddenStyle,
      children: state.context["aria-label"]
    })
  };
}

exports.connect = connect;
