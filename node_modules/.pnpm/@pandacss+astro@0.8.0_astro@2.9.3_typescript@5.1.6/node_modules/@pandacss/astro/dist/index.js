// src/index.ts
import autoprefixerPlugin from "autoprefixer";
import { createRequire } from "module";
var require2 = createRequire(import.meta.url);
var interopDefault = (obj) => obj && obj.__esModule ? obj.default : obj;
async function getPostCssConfig(root, postcssInlineOptions) {
  let postcssConfig;
  if (!(typeof postcssInlineOptions === "object" && postcssInlineOptions !== null)) {
    const { default: postcssrc } = await import("postcss-load-config");
    const searchPath = typeof postcssInlineOptions === "string" ? postcssInlineOptions : root;
    try {
      postcssConfig = await postcssrc({}, searchPath);
    } catch (e) {
      postcssConfig = null;
    }
  }
  return postcssConfig;
}
async function getViteConfig(viteConfig) {
  const postcssConfig = await getPostCssConfig(viteConfig.root, viteConfig.css?.postcss);
  const postcssOptions = postcssConfig?.options || {};
  const postcssPlugins = postcssConfig?.plugins?.slice() ?? [];
  postcssPlugins.push(interopDefault(require2("@pandacss/postcss")));
  postcssPlugins.push(autoprefixerPlugin());
  return {
    css: {
      postcss: {
        options: postcssOptions,
        plugins: postcssPlugins
      }
    }
  };
}
function pandaIntegration() {
  return {
    name: "@pandacss/astro",
    hooks: {
      "astro:config:setup": async ({ config, updateConfig }) => {
        updateConfig({
          vite: await getViteConfig(config.vite)
        });
      }
    }
  };
}
export {
  pandaIntegration as default
};
