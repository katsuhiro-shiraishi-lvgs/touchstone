import type { MachineContext as Ctx } from "./number-input.types";
export declare const dom: {
    getRootNode: (ctx: {
        getRootNode?: (() => Node | ShadowRoot | Document) | undefined;
    }) => ShadowRoot | Document;
    getDoc: (ctx: {
        getRootNode?: (() => Node | ShadowRoot | Document) | undefined;
    }) => Document;
    getWin: (ctx: {
        getRootNode?: (() => Node | ShadowRoot | Document) | undefined;
    }) => Window & typeof globalThis;
    getActiveElement: (ctx: {
        getRootNode?: (() => Node | ShadowRoot | Document) | undefined;
    }) => HTMLElement | null;
    getById: <T extends HTMLElement = HTMLElement>(ctx: {
        getRootNode?: (() => Node | ShadowRoot | Document) | undefined;
    }, id: string) => T | null;
    queryById: <T_1 extends HTMLElement = HTMLElement>(ctx: {
        getRootNode?: (() => Node | ShadowRoot | Document) | undefined;
    }, id: string) => T_1;
} & {
    getRootId: (ctx: Ctx) => string;
    getInputId: (ctx: Ctx) => string;
    getIncrementTriggerId: (ctx: Ctx) => string;
    getDecrementTriggerId: (ctx: Ctx) => string;
    getScrubberId: (ctx: Ctx) => string;
    getCursorId: (ctx: Ctx) => string;
    getLabelId: (ctx: Ctx) => string;
    getInputEl: (ctx: Ctx) => HTMLInputElement | null;
    getIncrementTriggerEl: (ctx: Ctx) => HTMLButtonElement | null;
    getDecrementTriggerEl: (ctx: Ctx) => HTMLButtonElement | null;
    getScrubberEl: (ctx: Ctx) => HTMLElement | null;
    getCursorEl: (ctx: Ctx) => HTMLElement | null;
    getPressedTriggerEl: (ctx: Ctx, hint?: "set" | "increment" | "decrement" | null) => HTMLButtonElement | null;
    setupVirtualCursor(ctx: Ctx): (() => void) | undefined;
    preventTextSelection(ctx: Ctx): () => void;
    getMousementValue(ctx: Ctx, event: MouseEvent): {
        hint: string | null;
        point: {
            x: number;
            y: number;
        };
    };
    createVirtualCursor(ctx: Ctx): void;
};
