'use strict';

Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });

const domEvent = require('@zag-js/dom-event');
const domQuery = require('@zag-js/dom-query');
const numberUtils = require('@zag-js/number-utils');
const numberInput_anatomy = require('./number-input.anatomy.js');
const numberInput_dom = require('./number-input.dom.js');
const numberInput_utils = require('./number-input.utils.js');

function connect(state, send, normalize) {
  const isFocused = state.hasTag("focus");
  const isInvalid = state.context.isOutOfRange || !!state.context.invalid;
  const isDisabled = !!state.context.disabled;
  const isValueEmpty = state.context.isValueEmpty;
  const isIncrementDisabled = isDisabled || !state.context.canIncrement;
  const isDecrementDisabled = isDisabled || !state.context.canDecrement;
  const translations = state.context.translations;
  return {
    /**
     * Whether the input is focused.
     */
    isFocused,
    /**
     * Whether the input is invalid.
     */
    isInvalid,
    /**
     * Whether the input value is empty.
     */
    isValueEmpty,
    /**
     * The formatted value of the input.
     */
    value: state.context.formattedValue,
    /**
     * The value of the input as a number.
     */
    valueAsNumber: state.context.valueAsNumber,
    /**
     * Function to set the value of the input.
     */
    setValue(value) {
      send({ type: "SET_VALUE", value: value.toString() });
    },
    /**
     * Function to clear the value of the input.
     */
    clearValue() {
      send("CLEAR_VALUE");
    },
    /**
     * Function to increment the value of the input by the step.
     */
    increment() {
      send("INCREMENT");
    },
    /**
     * Function to decrement the value of the input by the step.
     */
    decrement() {
      send("DECREMENT");
    },
    /**
     * Function to set the value of the input to the max.
     */
    setToMax() {
      send({ type: "SET_VALUE", value: state.context.max });
    },
    /**
     * Function to set the value of the input to the min.
     */
    setToMin() {
      send({ type: "SET_VALUE", value: state.context.min });
    },
    /**
     * Function to focus the input.
     */
    focus() {
      numberInput_dom.dom.getInputEl(state.context)?.focus();
    },
    /**
     * Function to blur the input.
     */
    blur() {
      numberInput_dom.dom.getInputEl(state.context)?.blur();
    },
    rootProps: normalize.element({
      id: numberInput_dom.dom.getRootId(state.context),
      ...numberInput_anatomy.parts.root.attrs,
      "data-disabled": domQuery.dataAttr(isDisabled)
    }),
    labelProps: normalize.label({
      ...numberInput_anatomy.parts.label.attrs,
      "data-disabled": domQuery.dataAttr(isDisabled),
      "data-invalid": domQuery.dataAttr(isInvalid),
      id: numberInput_dom.dom.getLabelId(state.context),
      htmlFor: numberInput_dom.dom.getInputId(state.context)
    }),
    controlProps: normalize.element({
      ...numberInput_anatomy.parts.control.attrs,
      role: "group",
      "aria-disabled": isDisabled,
      "data-disabled": domQuery.dataAttr(isDisabled),
      "data-invalid": domQuery.dataAttr(isInvalid),
      "aria-invalid": domQuery.ariaAttr(state.context.invalid)
    }),
    inputProps: normalize.input({
      ...numberInput_anatomy.parts.input.attrs,
      name: state.context.name,
      form: state.context.form,
      id: numberInput_dom.dom.getInputId(state.context),
      role: "spinbutton",
      defaultValue: state.context.formattedValue,
      pattern: state.context.pattern,
      inputMode: state.context.inputMode,
      "aria-invalid": domQuery.ariaAttr(isInvalid),
      "data-invalid": domQuery.dataAttr(isInvalid),
      disabled: isDisabled,
      "data-disabled": domQuery.dataAttr(isDisabled),
      readOnly: !!state.context.readOnly,
      autoComplete: "off",
      autoCorrect: "off",
      spellCheck: "false",
      type: "text",
      "aria-roledescription": "numberfield",
      "aria-valuemin": state.context.min,
      "aria-valuemax": state.context.max,
      "aria-valuenow": isNaN(state.context.valueAsNumber) ? void 0 : state.context.valueAsNumber,
      "aria-valuetext": state.context.valueText,
      onFocus() {
        send("FOCUS");
      },
      onBlur() {
        send("BLUR");
      },
      onChange(event) {
        send({ type: "CHANGE", target: event.currentTarget, hint: "set" });
      },
      onKeyDown(event) {
        const evt = domEvent.getNativeEvent(event);
        if (evt.isComposing)
          return;
        if (!numberInput_utils.utils.isValidNumericEvent(state.context, event)) {
          event.preventDefault();
        }
        const step = domEvent.getEventStep(event) * state.context.step;
        const keyMap = {
          ArrowUp() {
            send({ type: "ARROW_UP", step });
          },
          ArrowDown() {
            send({ type: "ARROW_DOWN", step });
          },
          Home() {
            send("HOME");
          },
          End() {
            send("END");
          }
        };
        const exec = keyMap[event.key];
        if (exec) {
          exec(event);
          event.preventDefault();
        }
      }
    }),
    decrementTriggerProps: normalize.button({
      ...numberInput_anatomy.parts.decrementTrigger.attrs,
      id: numberInput_dom.dom.getDecrementTriggerId(state.context),
      disabled: isDecrementDisabled,
      "data-disabled": domQuery.dataAttr(isDecrementDisabled),
      "aria-label": translations.decrementLabel,
      type: "button",
      tabIndex: -1,
      "aria-controls": numberInput_dom.dom.getInputId(state.context),
      onPointerDown(event) {
        if (isDecrementDisabled)
          return;
        send(domEvent.isLeftClick(event) ? { type: "PRESS_DOWN", hint: "decrement" } : { type: "FOCUS" });
        event.preventDefault();
      },
      onPointerUp() {
        send({ type: "PRESS_UP", hint: "decrement" });
      },
      onPointerLeave() {
        if (isDecrementDisabled)
          return;
        send({ type: "PRESS_UP", hint: "decrement" });
      }
    }),
    incrementTriggerProps: normalize.button({
      ...numberInput_anatomy.parts.incrementTrigger.attrs,
      id: numberInput_dom.dom.getIncrementTriggerId(state.context),
      disabled: isIncrementDisabled,
      "data-disabled": domQuery.dataAttr(isIncrementDisabled),
      "aria-label": translations.incrementLabel,
      type: "button",
      tabIndex: -1,
      "aria-controls": numberInput_dom.dom.getInputId(state.context),
      onPointerDown(event) {
        if (isIncrementDisabled)
          return;
        send(domEvent.isLeftClick(event) ? { type: "PRESS_DOWN", hint: "increment" } : { type: "FOCUS" });
        event.preventDefault();
      },
      onPointerUp() {
        send({ type: "PRESS_UP", hint: "increment" });
      },
      onPointerLeave() {
        send({ type: "PRESS_UP", hint: "increment" });
      }
    }),
    scrubberProps: normalize.element({
      ...numberInput_anatomy.parts.scrubber.attrs,
      "data-disabled": domQuery.dataAttr(isDisabled),
      id: numberInput_dom.dom.getScrubberId(state.context),
      role: "presentation",
      onMouseDown(event) {
        if (isDisabled)
          return;
        const evt = domEvent.getNativeEvent(event);
        const point = domEvent.getEventPoint(evt);
        point.x = point.x - numberUtils.roundToDevicePixel(7.5);
        point.y = point.y - numberUtils.roundToDevicePixel(7.5);
        send({ type: "PRESS_DOWN_SCRUBBER", point });
        event.preventDefault();
      },
      style: {
        cursor: isDisabled ? void 0 : "ew-resize"
      }
    })
  };
}

exports.connect = connect;
