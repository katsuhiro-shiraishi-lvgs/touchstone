'use strict';

Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });

const domEvent = require('@zag-js/dom-event');
const numberUtils = require('@zag-js/number-utils');

const utils = {
  isValidNumericEvent: (ctx, event) => {
    if (event.key == null)
      return true;
    const isModifier = domEvent.isModifiedEvent(event);
    const isSingleKey = event.key.length === 1;
    if (isModifier || !isSingleKey)
      return true;
    return ctx.validateCharacter?.(event.key) ?? utils.isFloatingPoint(event.key);
  },
  isFloatingPoint: (v) => /^[0-9+\-.]$/.test(v),
  sanitize: (ctx, value) => {
    return value.split("").filter(ctx.validateCharacter ?? utils.isFloatingPoint).join("");
  },
  increment: (ctx, step) => {
    const value = numberUtils.increment(ctx.value, step ?? ctx.step);
    return numberUtils.formatDecimal(numberUtils.clamp(value, ctx), ctx);
  },
  decrement: (ctx, step) => {
    const value = numberUtils.decrement(ctx.value, step ?? ctx.step);
    return numberUtils.formatDecimal(numberUtils.clamp(value, ctx), ctx);
  },
  clamp: (ctx) => {
    return numberUtils.formatDecimal(numberUtils.clamp(ctx.value, ctx), ctx);
  },
  parse: (ctx, value) => {
    return ctx.parse?.(value) ?? value;
  },
  format: (ctx, value) => {
    const _val = value.toString();
    return ctx.format?.(_val) ?? _val;
  },
  round: (ctx) => {
    return numberUtils.formatDecimal(ctx.value, ctx);
  }
};

exports.utils = utils;
