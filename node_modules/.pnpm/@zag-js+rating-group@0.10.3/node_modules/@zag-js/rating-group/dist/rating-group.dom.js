'use strict';

Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });

const domQuery = require('@zag-js/dom-query');
const formUtils = require('@zag-js/form-utils');

const dom = domQuery.createScope({
  getRootId: (ctx) => ctx.ids?.root ?? `rating:${ctx.id}`,
  getLabelId: (ctx) => ctx.ids?.label ?? `rating:${ctx.id}:label`,
  getHiddenInputId: (ctx) => ctx.ids?.hiddenInput ?? `rating:${ctx.id}:input`,
  getControlId: (ctx) => ctx.ids?.control ?? `rating:${ctx.id}:control`,
  getRatingId: (ctx, id) => ctx.ids?.rating?.(id) ?? `rating:${ctx.id}:star:${id}`,
  getRootEl: (ctx) => dom.getById(ctx, dom.getRootId(ctx)),
  getControlEl: (ctx) => dom.getById(ctx, dom.getControlId(ctx)),
  getRadioEl: (ctx) => dom.getControlEl(ctx)?.querySelector(`[role=radio][aria-posinset='${Math.ceil(ctx.value)}']`),
  getActiveEl: (ctx) => dom.getRootNode(ctx).activeElement,
  getHiddenInputEl: (ctx) => dom.getById(ctx, dom.getHiddenInputId(ctx)),
  dispatchChangeEvent: (ctx) => {
    const inputEl = dom.getHiddenInputEl(ctx);
    if (!inputEl)
      return;
    formUtils.dispatchInputValueEvent(inputEl, { value: ctx.value });
  }
});

exports.dom = dom;
