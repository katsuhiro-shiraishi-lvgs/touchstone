'use strict';

Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });

const domQuery = require('@zag-js/dom-query');
const editable_anatomy = require('./editable.anatomy.js');
const editable_dom = require('./editable.dom.js');

function connect(state, send, normalize) {
  const isDisabled = state.context.disabled;
  const isInteractive = state.context.isInteractive;
  const isReadOnly = state.context.readOnly;
  const isValueEmpty = state.context.isValueEmpty;
  const isInvalid = state.context.invalid;
  const autoResize = state.context.autoResize;
  const translations = state.context.translations;
  const isEditing = state.matches("edit");
  const placeholderProp = state.context.placeholder;
  const placeholder = typeof placeholderProp === "string" ? { edit: placeholderProp, preview: placeholderProp } : placeholderProp;
  return {
    /**
     * Whether the editable is in edit mode
     */
    isEditing,
    /**
     * Whether the editable value is empty
     */
    isValueEmpty,
    /**
     * The current value of the editable
     */
    value: state.context.value,
    /**
     * Function to set the value of the editable
     */
    setValue(value) {
      send({ type: "SET_VALUE", value });
    },
    /**
     * Function to clear the value of the editable
     */
    clearValue() {
      send({ type: "SET_VALUE", value: "" });
    },
    /**
     * Function to enter edit mode
     */
    edit() {
      if (!isInteractive)
        return;
      send("EDIT");
    },
    /**
     * Function to exit edit mode, and discard any changes
     */
    cancel() {
      if (!isInteractive)
        return;
      send("CANCEL");
    },
    /**
     * Function to exit edit mode, and submit any changes
     */
    submit() {
      if (!isInteractive)
        return;
      send("SUBMIT");
    },
    rootProps: normalize.element({
      ...editable_anatomy.parts.root.attrs,
      id: editable_dom.dom.getRootId(state.context)
    }),
    areaProps: normalize.element({
      ...editable_anatomy.parts.area.attrs,
      id: editable_dom.dom.getAreaId(state.context),
      style: autoResize ? { display: "inline-grid" } : void 0,
      "data-focus": domQuery.dataAttr(isEditing),
      "data-disabled": domQuery.dataAttr(isDisabled),
      "data-placeholder-shown": domQuery.dataAttr(isValueEmpty)
    }),
    labelProps: normalize.label({
      ...editable_anatomy.parts.label.attrs,
      id: editable_dom.dom.getLabelId(state.context),
      htmlFor: editable_dom.dom.getInputId(state.context),
      "data-focus": domQuery.dataAttr(isEditing),
      "data-invalid": domQuery.dataAttr(isInvalid),
      onPointerDown(event) {
        if (!isEditing) {
          event.preventDefault();
          editable_dom.dom.getPreviewEl(state.context)?.focus();
        }
      }
    }),
    inputProps: normalize.input({
      ...editable_anatomy.parts.input.attrs,
      "aria-label": translations.input,
      name: state.context.name,
      form: state.context.form,
      id: editable_dom.dom.getInputId(state.context),
      hidden: autoResize ? void 0 : !isEditing,
      placeholder: placeholder?.edit,
      disabled: isDisabled,
      "data-disabled": domQuery.dataAttr(isDisabled),
      readOnly: isReadOnly,
      "data-readonly": domQuery.dataAttr(isReadOnly),
      "aria-invalid": domQuery.ariaAttr(isInvalid),
      "data-invalid": domQuery.dataAttr(isInvalid),
      defaultValue: state.context.value,
      size: autoResize ? 1 : void 0,
      onChange(event) {
        send({ type: "TYPE", value: event.currentTarget.value });
      },
      onKeyDown(event) {
        const keyMap = {
          Escape() {
            send("CANCEL");
          },
          Enter(event2) {
            if (!event2.shiftKey && !event2.metaKey) {
              send("ENTER");
            }
          }
        };
        const exec = keyMap[event.key];
        if (exec) {
          event.preventDefault();
          exec(event);
        }
      },
      style: autoResize ? {
        all: "unset",
        gridArea: "1 / 1 / auto / auto",
        visibility: !isEditing ? "hidden" : void 0
      } : void 0
    }),
    previewProps: normalize.element({
      id: editable_dom.dom.getPreviewId(state.context),
      ...editable_anatomy.parts.preview.attrs,
      "data-placeholder-shown": domQuery.dataAttr(isValueEmpty),
      "aria-readonly": domQuery.ariaAttr(isReadOnly),
      "data-readonly": domQuery.dataAttr(isDisabled),
      "data-disabled": domQuery.dataAttr(isDisabled),
      "aria-disabled": domQuery.ariaAttr(isDisabled),
      "aria-invalid": domQuery.ariaAttr(isInvalid),
      "data-invalid": domQuery.dataAttr(isInvalid),
      children: isValueEmpty ? placeholder?.preview : state.context.value,
      hidden: autoResize ? void 0 : isEditing,
      tabIndex: isInteractive && state.context.isPreviewFocusable ? 0 : void 0,
      onFocus() {
        if (!isInteractive)
          return;
        send("FOCUS");
      },
      onDoubleClick() {
        if (!isInteractive)
          return;
        send("DBLCLICK");
      },
      style: autoResize ? {
        whiteSpace: "pre",
        userSelect: "none",
        gridArea: "1 / 1 / auto / auto",
        visibility: isEditing ? "hidden" : void 0,
        // in event the preview overflow's the parent element
        overflow: "hidden",
        textOverflow: "ellipsis"
      } : void 0
    }),
    editTriggerProps: normalize.button({
      ...editable_anatomy.parts.editTrigger.attrs,
      id: editable_dom.dom.getEditTriggerId(state.context),
      "aria-label": translations.edit,
      type: "button",
      disabled: isDisabled,
      onClick() {
        if (!isInteractive)
          return;
        send("EDIT");
      }
    }),
    controlProps: normalize.element({
      id: editable_dom.dom.getControlId(state.context),
      ...editable_anatomy.parts.control.attrs
    }),
    submitTriggerProps: normalize.button({
      ...editable_anatomy.parts.submitTrigger.attrs,
      id: editable_dom.dom.getSubmitTriggerId(state.context),
      "aria-label": translations.submit,
      disabled: isDisabled,
      type: "button",
      onClick() {
        if (!isInteractive)
          return;
        send("SUBMIT");
      }
    }),
    cancelTriggerProps: normalize.button({
      ...editable_anatomy.parts.cancelTrigger.attrs,
      "aria-label": translations.cancel,
      id: editable_dom.dom.getCancelTriggerId(state.context),
      type: "button",
      disabled: isDisabled,
      onClick() {
        if (!isInteractive)
          return;
        send("CANCEL");
      }
    })
  };
}

exports.connect = connect;
