'use strict';

Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });

const domQuery = require('@zag-js/dom-query');
const utils = require('@zag-js/utils');

const dom = domQuery.createScope({
  getRootId: (ctx) => ctx.ids?.root ?? `combobox:${ctx.id}`,
  getLabelId: (ctx) => ctx.ids?.label ?? `combobox:${ctx.id}:label`,
  getControlId: (ctx) => ctx.ids?.control ?? `combobox:${ctx.id}:control`,
  getInputId: (ctx) => ctx.ids?.input ?? `combobox:${ctx.id}:input`,
  getContentId: (ctx) => ctx.ids?.content ?? `combobox:${ctx.id}:listbox`,
  getPositionerId: (ctx) => ctx.ids?.positioner ?? `combobox:${ctx.id}:popper`,
  getTriggerId: (ctx) => ctx.ids?.trigger ?? `combobox:${ctx.id}:toggle-btn`,
  getClearTriggerId: (ctx) => ctx.ids?.clearTrigger ?? `combobox:${ctx.id}:clear-btn`,
  getOptionId: (ctx, id, index) => ctx.ids?.option?.(id, index) ?? [`combobox:${ctx.id}:option:${id}`, index].filter((v) => v != null).join(":"),
  getActiveOptionEl: (ctx) => ctx.focusedId ? dom.getById(ctx, ctx.focusedId) : null,
  getContentEl: (ctx) => dom.getById(ctx, dom.getContentId(ctx)),
  getInputEl: (ctx) => dom.getById(ctx, dom.getInputId(ctx)),
  getPositionerEl: (ctx) => dom.getById(ctx, dom.getPositionerId(ctx)),
  getControlEl: (ctx) => dom.getById(ctx, dom.getControlId(ctx)),
  getTriggerEl: (ctx) => dom.getById(ctx, dom.getTriggerId(ctx)),
  getClearTriggerEl: (ctx) => dom.getById(ctx, dom.getClearTriggerId(ctx)),
  getElements: (ctx) => domQuery.queryAll(dom.getContentEl(ctx), "[role=option]:not([aria-disabled=true])"),
  getFocusedOptionEl: (ctx) => {
    if (!ctx.focusedId)
      return null;
    const selector = `[role=option][id=${CSS.escape(ctx.focusedId)}]`;
    return dom.getContentEl(ctx)?.querySelector(selector);
  },
  getFirstEl: (ctx) => utils.first(dom.getElements(ctx)),
  getLastEl: (ctx) => utils.last(dom.getElements(ctx)),
  getPrevEl: (ctx, id) => domQuery.prevById(dom.getElements(ctx), id, ctx.loop),
  getNextEl: (ctx, id) => domQuery.nextById(dom.getElements(ctx), id, ctx.loop),
  isInputFocused: (ctx) => dom.getDoc(ctx).activeElement === dom.getInputEl(ctx),
  getOptionData: (el) => ({
    value: el?.getAttribute("data-value") ?? "",
    label: el?.getAttribute("data-label") ?? ""
  }),
  getOptionCount: (ctx) => {
    const listbox = dom.getContentEl(ctx);
    const count = listbox?.querySelector("[role=option]")?.getAttribute("aria-setsize");
    if (count != null)
      return parseInt(count);
    return listbox?.querySelectorAll("[role=option]").length ?? 0;
  },
  getMatchingOptionEl: (ctx, value) => {
    if (!value)
      return null;
    const selector = `[role=option][data-value="${CSS.escape(value)}"`;
    const listbox = dom.getContentEl(ctx);
    if (!listbox)
      return null;
    return listbox.querySelector(selector);
  },
  focusInput: (ctx) => {
    const input = dom.getInputEl(ctx);
    if (dom.getDoc(ctx).activeElement !== input) {
      input?.focus();
    }
    if (ctx.selectInputOnFocus) {
      input?.select();
    }
  },
  getClosestSectionLabel(ctx) {
    if (!ctx.focusedId)
      return;
    const group = dom.getActiveOptionEl(ctx)?.closest("[data-part=option-group]");
    return group?.getAttribute("aria-label");
  },
  getValueLabel: (ctx, value) => {
    const el = dom.getMatchingOptionEl(ctx, value);
    return dom.getOptionData(el).label;
  }
});

exports.dom = dom;
