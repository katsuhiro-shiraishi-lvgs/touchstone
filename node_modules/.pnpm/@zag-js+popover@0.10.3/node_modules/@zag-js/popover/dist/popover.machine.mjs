import { ariaHidden } from '@zag-js/aria-hidden';
import { createMachine } from '@zag-js/core';
import { trackDismissableElement } from '@zag-js/dismissable';
import { nextTick, raf } from '@zag-js/dom-query';
import { getPlacement } from '@zag-js/popper';
import { preventBodyScroll } from '@zag-js/remove-scroll';
import { proxyTabFocus } from '@zag-js/tabbable';
import { compact, runIfFn } from '@zag-js/utils';
import { createFocusTrap } from 'focus-trap';
import { dom } from './popover.dom.mjs';

function machine(userContext) {
  const ctx = compact(userContext);
  return createMachine(
    {
      id: "popover",
      initial: ctx.open ? "open" : "closed",
      context: {
        closeOnInteractOutside: true,
        closeOnEsc: true,
        autoFocus: true,
        modal: false,
        positioning: {
          placement: "bottom",
          ...ctx.positioning
        },
        currentPlacement: void 0,
        ...ctx,
        renderedElements: {
          title: true,
          description: true
        }
      },
      computed: {
        currentPortalled: (ctx2) => !!ctx2.modal || !!ctx2.portalled
      },
      watch: {
        open: ["toggleVisibility"]
      },
      entry: ["checkRenderedElements"],
      states: {
        closed: {
          on: {
            TOGGLE: {
              target: "open",
              actions: ["invokeOnOpen"]
            },
            OPEN: {
              target: "open",
              actions: ["invokeOnOpen"]
            }
          }
        },
        open: {
          activities: [
            "trapFocus",
            "preventScroll",
            "hideContentBelow",
            "trackPositioning",
            "trackDismissableElement",
            "proxyTabFocus"
          ],
          entry: ["setInitialFocus"],
          on: {
            CLOSE: {
              target: "closed",
              actions: ["invokeOnClose"]
            },
            REQUEST_CLOSE: {
              target: "closed",
              actions: ["restoreFocusIfNeeded", "invokeOnClose"]
            },
            TOGGLE: {
              target: "closed",
              actions: ["invokeOnClose"]
            },
            SET_POSITIONING: {
              actions: "setPositioning"
            }
          }
        }
      }
    },
    {
      activities: {
        trackPositioning(ctx2) {
          ctx2.currentPlacement = ctx2.positioning.placement;
          const anchorEl = dom.getAnchorEl(ctx2) ?? dom.getTriggerEl(ctx2);
          const getPositionerEl = () => dom.getPositionerEl(ctx2);
          return getPlacement(anchorEl, getPositionerEl, {
            ...ctx2.positioning,
            defer: true,
            onComplete(data) {
              ctx2.currentPlacement = data.placement;
            },
            onCleanup() {
              ctx2.currentPlacement = void 0;
            }
          });
        },
        trackDismissableElement(ctx2, _evt, { send }) {
          const getContentEl = () => dom.getContentEl(ctx2);
          let restoreFocus = true;
          return trackDismissableElement(getContentEl, {
            pointerBlocking: ctx2.modal,
            exclude: dom.getTriggerEl(ctx2),
            defer: true,
            onEscapeKeyDown(event) {
              ctx2.onEscapeKeyDown?.(event);
              if (ctx2.closeOnEsc)
                return;
              event.preventDefault();
            },
            onInteractOutside(event) {
              ctx2.onInteractOutside?.(event);
              if (event.defaultPrevented)
                return;
              restoreFocus = !(event.detail.focusable || event.detail.contextmenu);
              if (!ctx2.closeOnInteractOutside) {
                event.preventDefault();
              }
            },
            onPointerDownOutside(event) {
              ctx2.onPointerDownOutside?.(event);
            },
            onFocusOutside(event) {
              ctx2.onFocusOutside?.(event);
            },
            onDismiss() {
              send({ type: "REQUEST_CLOSE", src: "interact-outside", restoreFocus });
            }
          });
        },
        proxyTabFocus(ctx2) {
          if (ctx2.modal || !ctx2.portalled)
            return;
          const getContentEl = () => dom.getContentEl(ctx2);
          return proxyTabFocus(getContentEl, {
            triggerElement: dom.getTriggerEl(ctx2),
            defer: true,
            onFocus(el) {
              el.focus({ preventScroll: true });
            }
          });
        },
        hideContentBelow(ctx2) {
          if (!ctx2.modal)
            return;
          const getElements = () => [dom.getContentEl(ctx2), dom.getTriggerEl(ctx2)];
          return ariaHidden(getElements, { defer: true });
        },
        preventScroll(ctx2) {
          if (!ctx2.modal)
            return;
          return preventBodyScroll(dom.getDoc(ctx2));
        },
        trapFocus(ctx2) {
          if (!ctx2.modal)
            return;
          let trap;
          nextTick(() => {
            const el = dom.getContentEl(ctx2);
            if (!el)
              return;
            trap = createFocusTrap(el, {
              escapeDeactivates: false,
              allowOutsideClick: true,
              preventScroll: true,
              returnFocusOnDeactivate: true,
              document: dom.getDoc(ctx2),
              fallbackFocus: el,
              initialFocus: runIfFn(ctx2.initialFocusEl)
            });
            try {
              trap.activate();
            } catch {
            }
          });
          return () => trap?.deactivate();
        }
      },
      actions: {
        setPositioning(ctx2, evt) {
          const anchorEl = dom.getAnchorEl(ctx2) ?? dom.getTriggerEl(ctx2);
          const getPositionerEl = () => dom.getPositionerEl(ctx2);
          getPlacement(anchorEl, getPositionerEl, {
            ...ctx2.positioning,
            ...evt.options,
            defer: true,
            listeners: false
          });
        },
        checkRenderedElements(ctx2) {
          raf(() => {
            Object.assign(ctx2.renderedElements, {
              title: !!dom.getTitleEl(ctx2),
              description: !!dom.getDescriptionEl(ctx2)
            });
          });
        },
        setInitialFocus(ctx2) {
          raf(() => {
            dom.getInitialFocusEl(ctx2)?.focus({ preventScroll: true });
          });
        },
        restoreFocusIfNeeded(ctx2, evt) {
          if (!evt.restoreFocus)
            return;
          raf(() => {
            dom.getTriggerEl(ctx2)?.focus({ preventScroll: true });
          });
        },
        invokeOnOpen(ctx2) {
          ctx2.onOpen?.();
        },
        invokeOnClose(ctx2) {
          ctx2.onClose?.();
        },
        toggleVisibility(ctx2, _evt, { send }) {
          send({ type: ctx2.open ? "OPEN" : "CLOSE", src: "controlled" });
        }
      }
    }
  );
}

export { machine };
