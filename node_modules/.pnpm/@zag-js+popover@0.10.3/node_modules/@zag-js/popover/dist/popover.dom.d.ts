import type { MachineContext as Ctx } from "./popover.types";
export declare const dom: {
    getRootNode: (ctx: {
        getRootNode?: (() => Node | ShadowRoot | Document) | undefined;
    }) => ShadowRoot | Document;
    getDoc: (ctx: {
        getRootNode?: (() => Node | ShadowRoot | Document) | undefined;
    }) => Document;
    getWin: (ctx: {
        getRootNode?: (() => Node | ShadowRoot | Document) | undefined;
    }) => Window & typeof globalThis;
    getActiveElement: (ctx: {
        getRootNode?: (() => Node | ShadowRoot | Document) | undefined;
    }) => HTMLElement | null;
    getById: <T extends HTMLElement = HTMLElement>(ctx: {
        getRootNode?: (() => Node | ShadowRoot | Document) | undefined;
    }, id: string) => T | null;
    queryById: <T_1 extends HTMLElement = HTMLElement>(ctx: {
        getRootNode?: (() => Node | ShadowRoot | Document) | undefined;
    }, id: string) => T_1;
} & {
    getActiveEl: (ctx: Ctx) => Element | null;
    getAnchorId: (ctx: Ctx) => string;
    getTriggerId: (ctx: Ctx) => string;
    getContentId: (ctx: Ctx) => string;
    getPositionerId: (ctx: Ctx) => string;
    getArrowId: (ctx: Ctx) => string;
    getTitleId: (ctx: Ctx) => string;
    getDescriptionId: (ctx: Ctx) => string;
    getCloseTriggerId: (ctx: Ctx) => string;
    getAnchorEl: (ctx: Ctx) => HTMLElement | null;
    getTriggerEl: (ctx: Ctx) => HTMLElement | null;
    getContentEl: (ctx: Ctx) => HTMLElement | null;
    getPositionerEl: (ctx: Ctx) => HTMLElement | null;
    getTitleEl: (ctx: Ctx) => HTMLElement | null;
    getDescriptionEl: (ctx: Ctx) => HTMLElement | null;
    getFocusableEls: (ctx: Ctx) => HTMLElement[];
    getFirstFocusableEl: (ctx: Ctx) => HTMLElement;
    getDocTabbableEls: (ctx: Ctx) => HTMLElement[];
    getTabbableEls: (ctx: Ctx) => HTMLElement[];
    getFirstTabbableEl: (ctx: Ctx) => HTMLElement;
    getLastTabbableEl: (ctx: Ctx) => HTMLElement;
    getInitialFocusEl: (ctx: Ctx) => HTMLElement | null;
};
