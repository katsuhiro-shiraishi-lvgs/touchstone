'use strict';

Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });

const domQuery = require('@zag-js/dom-query');
const popper = require('@zag-js/popper');
const popover_anatomy = require('./popover.anatomy.js');
const popover_dom = require('./popover.dom.js');

function connect(state, send, normalize) {
  const isOpen = state.matches("open");
  const currentPlacement = state.context.currentPlacement;
  const portalled = state.context.currentPortalled;
  const rendered = state.context.renderedElements;
  const popperStyles = popper.getPlacementStyles({
    placement: currentPlacement
  });
  return {
    /**
     * Whether the popover is portalled
     */
    portalled,
    /**
     * Whether the popover is open
     */
    isOpen,
    /**
     * Function to open the popover
     */
    open() {
      send("OPEN");
    },
    /**
     * Function to close the popover
     */
    close() {
      send("CLOSE");
    },
    /**
     * Function to reposition the popover
     */
    setPositioning(options = {}) {
      send({ type: "SET_POSITIONING", options });
    },
    arrowProps: normalize.element({
      id: popover_dom.dom.getArrowId(state.context),
      ...popover_anatomy.parts.arrow.attrs,
      style: popperStyles.arrow
    }),
    arrowTipProps: normalize.element({
      ...popover_anatomy.parts.arrowTip.attrs,
      style: popperStyles.arrowTip
    }),
    anchorProps: normalize.element({
      ...popover_anatomy.parts.anchor.attrs,
      id: popover_dom.dom.getAnchorId(state.context)
    }),
    triggerProps: normalize.button({
      ...popover_anatomy.parts.trigger.attrs,
      type: "button",
      "data-placement": currentPlacement,
      id: popover_dom.dom.getTriggerId(state.context),
      "aria-haspopup": "dialog",
      "aria-expanded": isOpen,
      "data-expanded": domQuery.dataAttr(isOpen),
      "aria-controls": popover_dom.dom.getContentId(state.context),
      onClick() {
        send("TOGGLE");
      },
      onBlur(event) {
        send({ type: "TRIGGER_BLUR", target: event.relatedTarget });
      }
    }),
    positionerProps: normalize.element({
      id: popover_dom.dom.getPositionerId(state.context),
      ...popover_anatomy.parts.positioner.attrs,
      style: popperStyles.floating
    }),
    contentProps: normalize.element({
      ...popover_anatomy.parts.content.attrs,
      id: popover_dom.dom.getContentId(state.context),
      tabIndex: -1,
      role: "dialog",
      hidden: !isOpen,
      "data-expanded": domQuery.dataAttr(isOpen),
      "aria-labelledby": rendered.title ? popover_dom.dom.getTitleId(state.context) : void 0,
      "aria-describedby": rendered.description ? popover_dom.dom.getDescriptionId(state.context) : void 0,
      "data-placement": currentPlacement
    }),
    titleProps: normalize.element({
      ...popover_anatomy.parts.title.attrs,
      id: popover_dom.dom.getTitleId(state.context)
    }),
    descriptionProps: normalize.element({
      ...popover_anatomy.parts.description.attrs,
      id: popover_dom.dom.getDescriptionId(state.context)
    }),
    closeTriggerProps: normalize.button({
      ...popover_anatomy.parts.closeTrigger.attrs,
      id: popover_dom.dom.getCloseTriggerId(state.context),
      type: "button",
      "aria-label": "close",
      onClick() {
        send("REQUEST_CLOSE");
      }
    })
  };
}

exports.connect = connect;
