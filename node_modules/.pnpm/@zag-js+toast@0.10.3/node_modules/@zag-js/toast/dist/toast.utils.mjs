function getToastsByPlacement(toasts) {
  const result = {};
  for (const toast of toasts) {
    const placement = toast.state.context.placement;
    result[placement] ||= [];
    result[placement].push(toast);
  }
  return result;
}
const defaultTimeouts = {
  info: 5e3,
  error: 5e3,
  success: 2e3,
  loading: Infinity,
  custom: 5e3
};
function getToastDuration(duration, type) {
  return duration ?? defaultTimeouts[type];
}
function getGroupPlacementStyle(ctx, placement) {
  const offset = ctx.offsets;
  const computedOffset = typeof offset === "string" ? { left: offset, right: offset, bottom: offset, top: offset } : offset;
  const rtl = ctx.dir === "rtl";
  const computedPlacement = placement.replace("-start", rtl ? "-right" : "-left").replace("-end", rtl ? "-left" : "-right");
  const isRighty = computedPlacement.includes("right");
  const isLefty = computedPlacement.includes("left");
  const styles = {
    position: "fixed",
    pointerEvents: ctx.count > 0 ? void 0 : "none",
    display: "flex",
    flexDirection: "column",
    "--toast-gutter": ctx.gutter,
    zIndex: ctx.zIndex
  };
  let alignItems = "center";
  if (isRighty)
    alignItems = "flex-end";
  if (isLefty)
    alignItems = "flex-start";
  styles.alignItems = alignItems;
  if (computedPlacement.includes("top")) {
    const offset2 = computedOffset.top;
    styles.top = `calc(env(safe-area-inset-top, 0px) + ${offset2})`;
  }
  if (computedPlacement.includes("bottom")) {
    const offset2 = computedOffset.bottom;
    styles.bottom = `calc(env(safe-area-inset-bottom, 0px) + ${offset2})`;
  }
  if (!computedPlacement.includes("left")) {
    const offset2 = computedOffset.right;
    styles.right = `calc(env(safe-area-inset-right, 0px) + ${offset2})`;
  }
  if (!computedPlacement.includes("right")) {
    const offset2 = computedOffset.left;
    styles.left = `calc(env(safe-area-inset-left, 0px) + ${offset2})`;
  }
  return styles;
}

export { defaultTimeouts, getGroupPlacementStyle, getToastDuration, getToastsByPlacement };
