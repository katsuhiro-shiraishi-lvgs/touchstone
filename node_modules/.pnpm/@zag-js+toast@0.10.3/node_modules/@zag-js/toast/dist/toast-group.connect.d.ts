import type { NormalizeProps, PropTypes } from "@zag-js/types";
import type { Service, GroupMachineContext,  GroupProps,  GroupSend,  GroupState,  Placement,  PromiseOptions,  Toaster,  Options } from './toast.types';
export declare let toaster: Toaster;
export declare function groupConnect<T extends PropTypes>(state: GroupState, send: GroupSend, normalize: NormalizeProps<T>): {
    /**
     * The total number of toasts
     */
    count: number;
    /**
     * The active toasts
     */
    toasts: Service[];
    /**
     * The active toasts by placement
     */
    toastsByPlacement: Partial<Record<Placement, Service[]>>;
    /**
     * Returns whether the toast id is visible
     */
    isVisible(id: string): boolean;
    /**
     * Function to create a toast.
     */
    create(options: Options): string | undefined;
    /**
     * Function to create or update a toast.
     */
    upsert(options: Options): string | undefined;
    /**
     * Function to dismiss a toast by id.
     * If no id is provided, all toasts will be dismissed.
     */
    dismiss(id?: string): void;
    /**
     * Function to remove a toast by id.
     * If no id is provided, all toasts will be removed.
     */
    remove(id?: string): void;
    /**
     * Function to dismiss all toasts by placement.
     */
    dismissByPlacement(placement: Placement): void;
    /**
     * Function to update a toast's options by id.
     */
    update(id: string, options: Options): string | undefined;
    /**
     * Function to create a loading toast.
     */
    loading(options: Options): string | undefined;
    /**
     * Function to create a success toast.
     */
    success(options: Options): string | undefined;
    /**
     * Function to create an error toast.
     */
    error(options: Options): string | undefined;
    /**
     * Function to create a toast from a promise.
     * - When the promise resolves, the toast will be updated with the success options.
     * - When the promise rejects, the toast will be updated with the error options.
     */
    promise<T_1>(promise: Promise<T_1>, options: PromiseOptions<T_1>, shared?: Options): Promise<T_1>;
    /**
     * Function to pause a toast by id.
     */
    pause(id?: string): void;
    /**
     * Function to resume a toast by id.
     */
    resume(id?: string): void;
    getGroupProps(options: GroupProps): T["element"];
    subscribe(fn: (toasts: GroupMachineContext["toasts"]) => void): () => void;
};
