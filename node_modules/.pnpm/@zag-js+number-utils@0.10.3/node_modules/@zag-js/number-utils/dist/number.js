'use strict';

Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });

function wrap(num, max) {
  return (num % max + max) % max;
}
function round(v, t) {
  let num = valueOf(v);
  const p = 10 ** (t ?? 10);
  num = Math.round(num * p) / p;
  return t ? num.toFixed(t) : v.toString();
}
function roundToDevicePixel(num) {
  if (typeof window.devicePixelRatio !== "number")
    return Math.round(num);
  const dp = window.devicePixelRatio;
  return Math.floor(num * dp + 0.5) / dp;
}
const valueToPercent = (v, r) => (valueOf(v) - r.min) * 100 / (r.max - r.min);
const percentToValue = (v, r) => r.min + (r.max - r.min) * valueOf(v);
function clamp(v, o) {
  return Math.min(Math.max(valueOf(v), o.min), o.max);
}
function countDecimals(value) {
  if (!Number.isFinite(value))
    return 0;
  let e = 1, p = 0;
  while (Math.round(value * e) / e !== value) {
    e *= 10;
    p += 1;
  }
  return p;
}
const increment = (v, s) => decimalOperation(valueOf(v), "+", s);
const decrement = (v, s) => decimalOperation(valueOf(v), "-", s);
function snapToStep(value, step) {
  const num = valueOf(value);
  const p = countDecimals(step);
  const v = Math.round(num / step) * step;
  return round(v, p);
}
function valueOf(v) {
  if (typeof v === "number")
    return v;
  const num = parseFloat(v.toString().replace(/[^\w.-]+/g, ""));
  return !Number.isNaN(num) ? num : 0;
}
function formatDecimal(v, o) {
  return new Intl.NumberFormat("en-US", {
    useGrouping: false,
    style: "decimal",
    minimumFractionDigits: o.minFractionDigits,
    maximumFractionDigits: o.maxFractionDigits
  }).format(valueOf(v));
}
function isAtMax(v, o) {
  const val = valueOf(v);
  return val >= o.max;
}
function isAtMin(v, o) {
  const val = valueOf(v);
  return val <= o.min;
}
function isWithinRange(v, o) {
  const val = valueOf(v);
  return val >= o.min && val <= o.max;
}
function decimalOperation(a, op, b) {
  let result = op === "+" ? a + b : a - b;
  if (a % 1 !== 0 || b % 1 !== 0) {
    const multiplier = 10 ** Math.max(countDecimals(a), countDecimals(b));
    a = Math.round(a * multiplier);
    b = Math.round(b * multiplier);
    result = op === "+" ? a + b : a - b;
    result /= multiplier;
  }
  return result;
}

exports.clamp = clamp;
exports.countDecimals = countDecimals;
exports.decrement = decrement;
exports.formatDecimal = formatDecimal;
exports.increment = increment;
exports.isAtMax = isAtMax;
exports.isAtMin = isAtMin;
exports.isWithinRange = isWithinRange;
exports.percentToValue = percentToValue;
exports.round = round;
exports.roundToDevicePixel = roundToDevicePixel;
exports.snapToStep = snapToStep;
exports.valueOf = valueOf;
exports.valueToPercent = valueToPercent;
exports.wrap = wrap;
