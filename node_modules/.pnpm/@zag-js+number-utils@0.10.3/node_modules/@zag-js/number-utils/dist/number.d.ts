export type Num<T extends string> = Record<T, number>;
export declare function wrap(num: number, max: number): number;
export declare function round(v: number | string, t?: number): string;
export declare function roundToDevicePixel(num: number): number;
export declare const valueToPercent: (v: number | string, r: Num<"step" | "min" | "max">) => number;
export declare const percentToValue: (v: number | string, r: Num<"min" | "max">) => number;
export declare function clamp(v: number | string, o: Num<"min" | "max">): number;
export declare function countDecimals(value: number): number;
export declare const increment: (v: number | string, s: number) => number;
export declare const decrement: (v: number | string, s: number) => number;
export declare function snapToStep(value: number | string, step: number): string;
export declare function valueOf(v: string | number): number;
export type FormatDecimalOptions = {
    /**
     * The minimum number of fraction digits to use. Possible values are from 0 to 20
     */
    minFractionDigits?: number;
    /**
     * The maximum number of fraction digits to use. Possible values are from 0 to 20;
     */
    maxFractionDigits?: number;
};
export declare function formatDecimal(v: number | string, o: Omit<FormatDecimalOptions, "value">): string;
export declare function isAtMax(v: number | string, o: Num<"max">): boolean;
export declare function isAtMin(v: number | string, o: Num<"min">): boolean;
export declare function isWithinRange(v: number | string, o: Num<"min" | "max">): boolean;
