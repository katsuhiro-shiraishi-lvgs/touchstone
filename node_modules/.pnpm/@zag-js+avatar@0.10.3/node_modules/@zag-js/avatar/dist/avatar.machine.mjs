import { createMachine } from '@zag-js/core';
import { compact } from '@zag-js/utils';
import { observeAttributes, observeChildren } from '@zag-js/mutation-observer';
import { dom } from './avatar.dom.mjs';

function machine(userContext) {
  const ctx = compact(userContext);
  return createMachine(
    {
      id: "avatar",
      initial: "loading",
      activities: ["trackImageRemoval"],
      context: ctx,
      on: {
        "SRC.CHANGE": {
          target: "loading"
        },
        "IMG.UNMOUNT": {
          target: "error"
        }
      },
      states: {
        loading: {
          activities: ["trackSrcChange"],
          entry: ["checkImgStatus"],
          on: {
            "IMG.LOADED": {
              target: "loaded",
              actions: ["invokeOnLoad"]
            },
            "IMG.ERROR": {
              target: "error",
              actions: ["invokeOnError"]
            }
          }
        },
        error: {
          activities: ["trackSrcChange"],
          on: {
            "IMG.LOADED": {
              target: "loaded",
              actions: ["invokeOnLoad"]
            }
          }
        },
        loaded: {
          activities: ["trackSrcChange"]
        }
      }
    },
    {
      activities: {
        trackSrcChange(ctx2, _evt, { send }) {
          const img = dom.getImageEl(ctx2);
          return observeAttributes(img, ["src", "srcset"], () => {
            send({ type: "SRC.CHANGE" });
          });
        },
        trackImageRemoval(ctx2, _evt, { send }) {
          const rootEl = dom.getRootEl(ctx2);
          return observeChildren(rootEl, (records) => {
            const removedNodes = Array.from(records[0].removedNodes);
            const removed = removedNodes.find((node) => node.matches("[data-scope=avatar][data-part=image]"));
            if (removed) {
              send({ type: "IMG.UNMOUNT" });
            }
          });
        }
      },
      actions: {
        invokeOnLoad(ctx2) {
          ctx2.onLoad?.();
        },
        invokeOnError(ctx2) {
          ctx2.onError?.();
        },
        checkImgStatus(ctx2, _evt, { send }) {
          const img = dom.getImageEl(ctx2);
          if (img?.complete) {
            send({ type: "IMG.LOADED", src: "ssr" });
          }
        }
      }
    }
  );
}

export { machine };
