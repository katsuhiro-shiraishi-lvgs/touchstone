import { createMachine } from '@zag-js/core';
import { isNumber } from '@zag-js/utils';

function machine(ctx) {
  return createMachine(
    {
      initial: ctx.mounted ? "entered" : "exited",
      context: {
        mounted: false,
        duration: 250,
        ...ctx
      },
      computed: {
        enterDuration(ctx2) {
          if (ctx2.reduceMotion)
            return 0;
          return isNumber(ctx2.duration) ? ctx2.duration : ctx2.duration?.enter;
        },
        exitDuration(ctx2) {
          if (ctx2.reduceMotion)
            return 0;
          return isNumber(ctx2.duration) ? ctx2.duration : ctx2.duration.exit;
        }
      },
      on: {
        "MOUNTED.TOGGLE": {
          actions: ["togglePresence"]
        }
      },
      watch: {
        mounted: ["updatePresence"]
      },
      states: {
        exited: {
          tags: "exit",
          on: {
            MOUNT: {
              target: "pre-entering",
              actions: ["invokeOnEnter"]
            }
          }
        },
        "pre-entering": {
          tags: "exit",
          after: {
            NEXT_FRAME: "entering"
          }
        },
        entering: {
          tags: "enter",
          after: {
            ENTER_DURATION: {
              target: "entered",
              actions: ["invokeOnEntered"]
            }
          },
          on: {
            UNMOUNT: {
              target: "exited",
              actions: ["invokeOnExited"]
            }
          }
        },
        entered: {
          tags: "enter",
          on: {
            UNMOUNT: {
              target: "pre-exiting",
              actions: ["invokeOnExit"]
            }
          }
        },
        "pre-exiting": {
          tags: "exit",
          after: {
            NEXT_FRAME: "exiting"
          }
        },
        exiting: {
          tags: "exit",
          after: {
            EXIT_DURATION: {
              target: "exited",
              actions: ["invokeOnExited"]
            }
          },
          on: {
            MOUNT: {
              target: "entered",
              actions: ["invokeOnEntered"]
            }
          }
        }
      }
    },
    {
      delays: {
        ENTER_DURATION(ctx2) {
          return ctx2.enterDuration;
        },
        EXIT_DURATION(ctx2) {
          return ctx2.exitDuration;
        },
        NEXT_FRAME: 16.667
      },
      actions: {
        updatePresence(ctx2, _evt, { send }) {
          send(ctx2.mounted ? "MOUNT" : "UNMOUNT");
        },
        togglePresence(ctx2) {
          ctx2.mounted = !ctx2.mounted;
        },
        invokeOnEnter(ctx2) {
          ctx2.onEnter?.();
        },
        invokeOnExit(ctx2) {
          ctx2.onExit?.();
        },
        invokeOnEntered(ctx2) {
          ctx2.onEntered?.();
        },
        invokeOnExited(ctx2) {
          ctx2.onExited?.();
        }
      }
    }
  );
}

export { machine };
