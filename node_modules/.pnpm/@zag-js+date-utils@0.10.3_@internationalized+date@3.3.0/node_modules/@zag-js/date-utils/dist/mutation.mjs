import { today, getLocalTimeZone, toCalendar, toCalendarDateTime } from '@internationalized/date';
import { constrainValue } from './constrain.mjs';

function getTodayDate(timeZone) {
  return today(timeZone ?? getLocalTimeZone());
}
function getNextDay(date) {
  return date.add({ days: 1 });
}
function getPreviousDay(date) {
  return date.subtract({ days: 1 });
}
function setMonth(date, month) {
  return date.set({ month });
}
function setYear(date, year) {
  return date.set({ year });
}
function setCalendar(date, calendar) {
  return toCalendar(toCalendarDateTime(date), calendar);
}
function setDate(date, startDate, isDateUnavailable, locale, minValue, maxValue) {
  let result;
  result = constrainValue(date, minValue, maxValue);
  result = getPreviousAvailableDate(date, startDate, locale, isDateUnavailable);
  return result;
}
function getPreviousAvailableDate(date, minValue, locale, isDateUnavailable) {
  if (!isDateUnavailable) {
    return date;
  }
  while (date.compare(minValue) >= 0 && isDateUnavailable(date, locale)) {
    date = date.subtract({ days: 1 });
  }
  if (date.compare(minValue) >= 0) {
    return date;
  }
}

export { getNextDay, getPreviousAvailableDate, getPreviousDay, getTodayDate, setCalendar, setDate, setMonth, setYear };
