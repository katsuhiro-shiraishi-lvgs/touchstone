export declare function getMinValueAtIndex(index: number, values: number[], minValue: number): number;
export declare function getMaxValueAtIndex(index: number, values: number[], maxValue: number): number;
export declare function isValueAtMax(value: number, maxValue: number): boolean;
export declare function isValueAtMin(value: number, minValue: number): boolean;
export declare function isValueWithinRange(value: number, minValue: number, maxValue: number): boolean;
export declare function getRoundedValue(value: number, minValue: number, step: number): number;
export declare function clampValue(value: number, minValue: number, maxValue: number): number;
export declare function getValuePercent(value: number, minValue: number, maxValue: number): number;
export declare function getPercentValue(percent: number, minValue: number, maxValue: number, step: number): number;
export declare function snapValueToStep(value: number, min: number, max: number, step: number): number;
type RangeContext = {
    min: number;
    max: number;
    step: number;
    values: number[];
};
export declare function getValueSetterAtIndex(index: number, ctx: RangeContext): (value: number) => number[];
export declare function getNextStepValue(index: number, ctx: RangeContext): number[];
export declare function getPreviousStepValue(index: number, ctx: RangeContext): number[];
export declare function getClosestValueIndex(values: number[], targetValue: number): number;
export declare function getValueRanges(values: number[], minValue: number, maxValue: number, gap: number): {
    min: number;
    max: number;
    value: number;
}[];
export declare function getValueTransformer(valueA: number[], valueB: number[]): (value: number) => number;
export {};
