import * as ts_morph from 'ts-morph';
import { ProjectOptions as ProjectOptions$1 } from 'ts-morph';
import { ResultItem, RecipeConfig, ConfigTsOptions, Runtime, PandaHookable } from '@pandacss/types';

declare class ParserResult {
    jsx: Set<ResultItem>;
    css: Set<ResultItem>;
    cva: Set<ResultItem>;
    recipe: Map<string, Set<ResultItem>>;
    pattern: Map<string, Set<ResultItem>>;
    filePath: string | undefined;
    set(name: 'cva' | 'css', result: ResultItem): void;
    setCva(result: ResultItem): void;
    setJsx(result: ResultItem): void;
    setPattern(name: string, result: ResultItem): void;
    setRecipe(name: string, result: ResultItem): void;
    isEmpty(): boolean;
    setFilePath(filePath: string): this;
    toArray(): ResultItem[];
    toJSON(): {
        css: ResultItem[];
        cva: ResultItem[];
        recipe: {
            [k: string]: ResultItem[];
        };
        pattern: {
            [k: string]: ResultItem[];
        };
        jsx: ResultItem[];
    };
    merge(result: ParserResult): this;
    static fromJSON(json: string): ParserResult;
}
declare const createParserResult: () => ParserResult;

type ParserPatternNode = {
    name: string;
    type: 'pattern';
    props?: string[];
    baseName: string;
};
type ParserRecipeNode = {
    name: string;
    type: 'recipe';
    props: string[];
    baseName: string;
    jsx: RecipeConfig['jsx'];
};
type ParserNodeOptions = ParserPatternNode | ParserRecipeNode;
type ParserOptions = {
    importMap: Record<'css' | 'recipe' | 'pattern' | 'jsx', string[]>;
    jsx?: {
        factory: string;
        nodes: ParserNodeOptions[];
        isStyleProp: (prop: string) => boolean;
    };
    getRecipesByJsxName: (jsxName: string) => RecipeConfig[];
    tsOptions?: ConfigTsOptions;
    join: Runtime['path']['join'];
};

type ProjectOptions = Partial<ProjectOptions$1> & {
    readFile: Runtime['fs']['readFileSync'];
    getFiles: () => string[];
    hooks: PandaHookable;
    parserOptions: ParserOptions;
    tsOptions?: ConfigTsOptions;
};

declare const createProject: ({ getFiles, readFile, parserOptions, hooks, ...projectOptions }: ProjectOptions) => {
    getSourceFile: (filePath: string) => ts_morph.SourceFile | undefined;
    removeSourceFile: (filePath: string) => void;
    createSourceFile: (filePath: string) => ts_morph.SourceFile;
    addSourceFile: (filePath: string, content: string) => ts_morph.SourceFile;
    parseSourceFile: (filePath: string) => ParserResult | undefined;
    reloadSourceFile: (filePath: string) => ts_morph.FileSystemRefreshResult | undefined;
    reloadSourceFiles: () => void;
};
type Project = ReturnType<typeof createProject>;

export { ParserResult, Project, createParserResult, createProject };
